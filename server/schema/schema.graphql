"""Queries"""
type Query {
  messages(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): MessageConnection
  patients(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PatientConnection
  doctors(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): DoctorConnection
}

"""A connection to a list of items."""
type MessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge"""
  node: Message

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represents a message"""
type Message implements Node {
  """The ID of an object"""
  id: ID!
  content: String
  createdAt: String
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type PatientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PatientEdge]
}

"""An edge in a connection."""
type PatientEdge {
  """The item at the end of the edge"""
  node: Patient

  """A cursor for use in pagination"""
  cursor: String!
}

"""Patients who use the application"""
type Patient implements Node {
  """The ID of an object"""
  id: ID!
  username: String!
  email: String
}

"""A connection to a list of items."""
type DoctorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DoctorEdge]
}

"""An edge in a connection."""
type DoctorEdge {
  """The item at the end of the edge"""
  node: Doctor

  """A cursor for use in pagination"""
  cursor: String!
}

"""Doctors who use the application to attend appointments"""
type Doctor implements Node {
  """The ID of an object"""
  id: ID!
  username: String!
  email: String
}

type Mutation {
  MessageAdd(input: MessageAddInput!): MessageAddPayload
  PatientSignInMutation(input: PatientSignInMutationInput!): PatientSignInMutationPayload
  PatientSignUpMutation(input: PatientSignUpMutationInput!): PatientSignUpMutationPayload
  ScheduleAppointmentMutation(input: ScheduleAppointmentMutationInput!): ScheduleAppointmentMutationPayload
  DoctorSignInMutation(input: DoctorSignInMutationInput!): DoctorSignInMutationPayload
  DoctorSignUpMutation(input: DoctorSignUpMutationInput!): DoctorSignUpMutationPayload
}

type MessageAddPayload {
  message: Message
  clientMutationId: String
}

input MessageAddInput {
  content: String!
  clientMutationId: String
}

type PatientSignInMutationPayload {
  me: Patient
  clientMutationId: String
}

input PatientSignInMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}

type PatientSignUpMutationPayload {
  me: Patient
  token: String
  clientMutationId: String
}

input PatientSignUpMutationInput {
  username: String!
  email: String!
  password: String!
  clientMutationId: String
}

type ScheduleAppointmentMutationPayload {
  appointment: Appointment
  clientMutationId: String
}

"""Appointments scheduled by patient with chosen doctor"""
type Appointment implements Node {
  """The ID of an object"""
  id: ID!
  doctorId: String!
  patientId: String!
}

input ScheduleAppointmentMutationInput {
  doctorId: String!
  startsAt: String!
  date: String!
  clientMutationId: String
}

type DoctorSignInMutationPayload {
  me: Doctor
  clientMutationId: String
}

input DoctorSignInMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}

type DoctorSignUpMutationPayload {
  me: Doctor
  token: String
  clientMutationId: String
}

input DoctorSignUpMutationInput {
  username: String!
  email: String!
  password: String!
  clientMutationId: String
}

type Subscription {
  MessageAdded(input: MessageAddedInput!): MessageAddedPayload
}

type MessageAddedPayload {
  message: Message
  clientSubscriptionId: String
}

input MessageAddedInput {
  clientSubscriptionId: String
}