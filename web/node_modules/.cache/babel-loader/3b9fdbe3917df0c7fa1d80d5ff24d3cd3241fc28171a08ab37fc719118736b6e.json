{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _require = require('../util/RelayConcreteNode'),\n  ACTOR_CHANGE = _require.ACTOR_CHANGE,\n  ALIASED_FRAGMENT_SPREAD = _require.ALIASED_FRAGMENT_SPREAD,\n  ALIASED_INLINE_FRAGMENT_SPREAD = _require.ALIASED_INLINE_FRAGMENT_SPREAD,\n  CLIENT_EDGE_TO_CLIENT_OBJECT = _require.CLIENT_EDGE_TO_CLIENT_OBJECT,\n  CLIENT_EDGE_TO_SERVER_OBJECT = _require.CLIENT_EDGE_TO_SERVER_OBJECT,\n  CLIENT_EXTENSION = _require.CLIENT_EXTENSION,\n  CONDITION = _require.CONDITION,\n  DEFER = _require.DEFER,\n  FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD,\n  INLINE_DATA_FRAGMENT_SPREAD = _require.INLINE_DATA_FRAGMENT_SPREAD,\n  INLINE_FRAGMENT = _require.INLINE_FRAGMENT,\n  LINKED_FIELD = _require.LINKED_FIELD,\n  MODULE_IMPORT = _require.MODULE_IMPORT,\n  RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER,\n  RELAY_RESOLVER = _require.RELAY_RESOLVER,\n  REQUIRED_FIELD = _require.REQUIRED_FIELD,\n  SCALAR_FIELD = _require.SCALAR_FIELD,\n  STREAM = _require.STREAM;\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\nvar _require2 = require('./experimental-live-resolvers/LiveResolverSuspenseSentinel'),\n  isSuspenseSentinel = _require2.isSuspenseSentinel;\nvar RelayConcreteVariables = require('./RelayConcreteVariables');\nvar RelayModernRecord = require('./RelayModernRecord');\nvar _require3 = require('./RelayStoreUtils'),\n  CLIENT_EDGE_TRAVERSAL_PATH = _require3.CLIENT_EDGE_TRAVERSAL_PATH,\n  FRAGMENT_OWNER_KEY = _require3.FRAGMENT_OWNER_KEY,\n  FRAGMENT_PROP_NAME_KEY = _require3.FRAGMENT_PROP_NAME_KEY,\n  FRAGMENTS_KEY = _require3.FRAGMENTS_KEY,\n  ID_KEY = _require3.ID_KEY,\n  MODULE_COMPONENT_KEY = _require3.MODULE_COMPONENT_KEY,\n  ROOT_ID = _require3.ROOT_ID,\n  getArgumentValues = _require3.getArgumentValues,\n  getModuleComponentKey = _require3.getModuleComponentKey,\n  getStorageKey = _require3.getStorageKey;\nvar _require4 = require('./ResolverCache'),\n  NoopResolverCache = _require4.NoopResolverCache;\nvar _require5 = require('./ResolverFragments'),\n  RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = _require5.RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL,\n  withResolverContext = _require5.withResolverContext;\nvar _require6 = require('./TypeID'),\n  generateTypeID = _require6.generateTypeID;\nvar invariant = require('invariant');\nfunction read(recordSource, selector, resolverCache) {\n  var reader = new RelayReader(recordSource, selector, resolverCache !== null && resolverCache !== void 0 ? resolverCache : new NoopResolverCache());\n  return reader.read();\n}\nvar RelayReader = /*#__PURE__*/function () {\n  function RelayReader(recordSource, selector, resolverCache) {\n    var _selector$clientEdgeT;\n    this._clientEdgeTraversalPath = RelayFeatureFlags.ENABLE_CLIENT_EDGES && (_selector$clientEdgeT = selector.clientEdgeTraversalPath) !== null && _selector$clientEdgeT !== void 0 && _selector$clientEdgeT.length ? (0, _toConsumableArray2[\"default\"])(selector.clientEdgeTraversalPath) : [];\n    this._missingClientEdges = [];\n    this._missingLiveResolverFields = [];\n    this._isMissingData = false;\n    this._isWithinUnmatchedTypeRefinement = false;\n    this._missingRequiredFields = null;\n    this._owner = selector.owner;\n    this._recordSource = recordSource;\n    this._seenRecords = new Set();\n    this._selector = selector;\n    this._variables = selector.variables;\n    this._resolverCache = resolverCache;\n    this._resolverErrors = [];\n    this._fragmentName = selector.node.name;\n    this._updatedDataIDs = new Set();\n  }\n  var _proto = RelayReader.prototype;\n  _proto.read = function read() {\n    var _this$_selector = this._selector,\n      node = _this$_selector.node,\n      dataID = _this$_selector.dataID,\n      isWithinUnmatchedTypeRefinement = _this$_selector.isWithinUnmatchedTypeRefinement;\n    var abstractKey = node.abstractKey;\n    var record = this._recordSource.get(dataID);\n    var isDataExpectedToBePresent = !isWithinUnmatchedTypeRefinement;\n    if (isDataExpectedToBePresent && abstractKey == null && record != null) {\n      var recordType = RelayModernRecord.getType(record);\n      if (recordType !== node.type && dataID !== ROOT_ID) {\n        isDataExpectedToBePresent = false;\n      }\n    }\n    if (isDataExpectedToBePresent && abstractKey != null && record != null) {\n      var implementsInterface = this._implementsInterface(record, abstractKey);\n      if (implementsInterface === false) {\n        isDataExpectedToBePresent = false;\n      } else if (implementsInterface == null) {\n        this._isMissingData = true;\n      }\n    }\n    this._isWithinUnmatchedTypeRefinement = !isDataExpectedToBePresent;\n    var data = this._traverse(node, dataID, null);\n    if (this._updatedDataIDs.size > 0) {\n      this._resolverCache.notifyUpdatedSubscribers(this._updatedDataIDs);\n      this._updatedDataIDs.clear();\n    }\n    return {\n      data: data,\n      isMissingData: this._isMissingData && isDataExpectedToBePresent,\n      missingClientEdges: RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._missingClientEdges.length ? this._missingClientEdges : null,\n      missingLiveResolverFields: this._missingLiveResolverFields,\n      seenRecords: this._seenRecords,\n      selector: this._selector,\n      missingRequiredFields: this._missingRequiredFields,\n      relayResolverErrors: this._resolverErrors\n    };\n  };\n  _proto._markDataAsMissing = function _markDataAsMissing() {\n    this._isMissingData = true;\n    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._clientEdgeTraversalPath.length) {\n      var top = this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1];\n      if (top !== null) {\n        this._missingClientEdges.push({\n          request: top.readerClientEdge.operation,\n          clientEdgeDestinationID: top.clientEdgeDestinationID\n        });\n      }\n    }\n  };\n  _proto._traverse = function _traverse(node, dataID, prevData) {\n    var record = this._recordSource.get(dataID);\n    this._seenRecords.add(dataID);\n    if (record == null) {\n      if (record === undefined) {\n        this._markDataAsMissing();\n      }\n      return record;\n    }\n    var data = prevData || {};\n    var hadRequiredData = this._traverseSelections(node.selections, record, data);\n    return hadRequiredData ? data : null;\n  };\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n  _proto._maybeReportUnexpectedNull = function _maybeReportUnexpectedNull(fieldPath, action) {\n    var _this$_missingRequire;\n    if (((_this$_missingRequire = this._missingRequiredFields) === null || _this$_missingRequire === void 0 ? void 0 : _this$_missingRequire.action) === 'THROW') {\n      return;\n    }\n    var owner = this._fragmentName;\n    switch (action) {\n      case 'THROW':\n        this._missingRequiredFields = {\n          action: action,\n          field: {\n            path: fieldPath,\n            owner: owner\n          }\n        };\n        return;\n      case 'LOG':\n        if (this._missingRequiredFields == null) {\n          this._missingRequiredFields = {\n            action: action,\n            fields: [{\n              path: fieldPath,\n              owner: owner\n            }]\n          };\n        } else {\n          this._missingRequiredFields = {\n            action: action,\n            fields: [].concat((0, _toConsumableArray2[\"default\"])(this._missingRequiredFields.fields), [{\n              path: fieldPath,\n              owner: owner\n            }])\n          };\n        }\n        return;\n      default:\n        action;\n    }\n  };\n  _proto._traverseSelections = function _traverseSelections(selections, record, data) {\n    for (var i = 0; i < selections.length; i++) {\n      var selection = selections[i];\n      switch (selection.kind) {\n        case REQUIRED_FIELD:\n          {\n            var fieldValue = this._readRequiredField(selection, record, data);\n            if (fieldValue == null) {\n              var action = selection.action;\n              if (action !== 'NONE') {\n                this._maybeReportUnexpectedNull(selection.path, action);\n              }\n              return false;\n            }\n            break;\n          }\n        case SCALAR_FIELD:\n          this._readScalar(selection, record, data);\n          break;\n        case LINKED_FIELD:\n          if (selection.plural) {\n            this._readPluralLink(selection, record, data);\n          } else {\n            this._readLink(selection, record, data);\n          }\n          break;\n        case CONDITION:\n          var conditionValue = Boolean(this._getVariableValue(selection.condition));\n          if (conditionValue === selection.passingValue) {\n            var hasExpectedData = this._traverseSelections(selection.selections, record, data);\n            if (!hasExpectedData) {\n              return false;\n            }\n          }\n          break;\n        case INLINE_FRAGMENT:\n          {\n            if (this._readInlineFragment(selection, record, data) === false) {\n              return false;\n            }\n            break;\n          }\n        case RELAY_LIVE_RESOLVER:\n        case RELAY_RESOLVER:\n          {\n            if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n              throw new Error('Relay Resolver fields are not yet supported.');\n            }\n            this._readResolverField(selection, record, data);\n            break;\n          }\n        case FRAGMENT_SPREAD:\n          this._createFragmentPointer(selection, record, data);\n          break;\n        case ALIASED_FRAGMENT_SPREAD:\n          data[selection.name] = this._createAliasedFragmentSpread(selection, record);\n          break;\n        case ALIASED_INLINE_FRAGMENT_SPREAD:\n          {\n            var _fieldValue = this._readInlineFragment(selection.fragment, record, {});\n            if (_fieldValue === false) {\n              _fieldValue = null;\n            }\n            data[selection.name] = _fieldValue;\n            break;\n          }\n        case MODULE_IMPORT:\n          this._readModuleImport(selection, record, data);\n          break;\n        case INLINE_DATA_FRAGMENT_SPREAD:\n          this._createInlineDataOrResolverFragmentPointer(selection, record, data);\n          break;\n        case DEFER:\n        case CLIENT_EXTENSION:\n          {\n            var isMissingData = this._isMissingData;\n            var alreadyMissingClientEdges = this._missingClientEdges.length;\n            if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n              this._clientEdgeTraversalPath.push(null);\n            }\n            var _hasExpectedData = this._traverseSelections(selection.selections, record, data);\n            this._isMissingData = isMissingData || this._missingClientEdges.length > alreadyMissingClientEdges || this._missingLiveResolverFields.length > 0;\n            if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n              this._clientEdgeTraversalPath.pop();\n            }\n            if (!_hasExpectedData) {\n              return false;\n            }\n            break;\n          }\n        case STREAM:\n          {\n            var _hasExpectedData2 = this._traverseSelections(selection.selections, record, data);\n            if (!_hasExpectedData2) {\n              return false;\n            }\n            break;\n          }\n        case ACTOR_CHANGE:\n          this._readActorChange(selection, record, data);\n          break;\n        case CLIENT_EDGE_TO_CLIENT_OBJECT:\n        case CLIENT_EDGE_TO_SERVER_OBJECT:\n          if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n            this._readClientEdge(selection, record, data);\n          } else {\n            throw new Error('Client edges are not yet supported.');\n          }\n          break;\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n    return true;\n  };\n  _proto._readRequiredField = function _readRequiredField(selection, record, data) {\n    switch (selection.field.kind) {\n      case SCALAR_FIELD:\n        return this._readScalar(selection.field, record, data);\n      case LINKED_FIELD:\n        if (selection.field.plural) {\n          return this._readPluralLink(selection.field, record, data);\n        } else {\n          return this._readLink(selection.field, record, data);\n        }\n      case RELAY_RESOLVER:\n        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n          throw new Error('Relay Resolver fields are not yet supported.');\n        }\n        return this._readResolverField(selection.field, record, data);\n      case RELAY_LIVE_RESOLVER:\n        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n          throw new Error('Relay Resolver fields are not yet supported.');\n        }\n        return this._readResolverField(selection.field, record, data);\n      case CLIENT_EDGE_TO_CLIENT_OBJECT:\n      case CLIENT_EDGE_TO_SERVER_OBJECT:\n        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n          throw new Error('Relay Resolver fields are not yet supported.');\n        }\n        return this._readClientEdge(selection.field, record, data);\n      default:\n        selection.field.kind;\n        !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n    }\n  };\n  _proto._readResolverField = function _readResolverField(field, record, data) {\n    var _this = this;\n    var _field$alias;\n    var fragment = field.fragment;\n    var parentRecordID = RelayModernRecord.getDataID(record);\n    var snapshot;\n    var getDataForResolverFragment = function getDataForResolverFragment(singularReaderSelector) {\n      if (snapshot != null) {\n        return {\n          data: snapshot.data,\n          isMissingData: snapshot.isMissingData\n        };\n      }\n      snapshot = read(_this._recordSource, singularReaderSelector, _this._resolverCache);\n      return {\n        data: snapshot.data,\n        isMissingData: snapshot.isMissingData\n      };\n    };\n    var evaluate = function evaluate() {\n      if (fragment != null) {\n        var key = {\n          __id: parentRecordID,\n          __fragmentOwner: _this._owner,\n          __fragments: (0, _defineProperty2[\"default\"])({}, fragment.name, fragment.args ? getArgumentValues(fragment.args, _this._variables) : {})\n        };\n        var resolverContext = {\n          getDataForResolverFragment: getDataForResolverFragment\n        };\n        return withResolverContext(resolverContext, function () {\n          var _getResolverValue = getResolverValue(field, _this._variables, key),\n            resolverResult = _getResolverValue[0],\n            resolverError = _getResolverValue[1];\n          return {\n            resolverResult: resolverResult,\n            snapshot: snapshot,\n            error: resolverError\n          };\n        });\n      } else {\n        var _getResolverValue2 = getResolverValue(field, _this._variables, null),\n          resolverResult = _getResolverValue2[0],\n          _resolverError = _getResolverValue2[1];\n        return {\n          resolverResult: resolverResult,\n          snapshot: undefined,\n          error: _resolverError\n        };\n      }\n    };\n    var _this$_resolverCache$ = this._resolverCache.readFromCacheOrEvaluate(parentRecordID, field, this._variables, evaluate, getDataForResolverFragment),\n      result = _this$_resolverCache$[0],\n      seenRecord = _this$_resolverCache$[1],\n      resolverError = _this$_resolverCache$[2],\n      cachedSnapshot = _this$_resolverCache$[3],\n      suspenseID = _this$_resolverCache$[4],\n      updatedDataIDs = _this$_resolverCache$[5];\n    this._propogateResolverMetadata(field.path, cachedSnapshot, resolverError, seenRecord, suspenseID, updatedDataIDs);\n    var applicationName = (_field$alias = field.alias) !== null && _field$alias !== void 0 ? _field$alias : field.name;\n    data[applicationName] = result;\n    return result;\n  };\n  _proto._propogateResolverMetadata = function _propogateResolverMetadata(fieldPath, cachedSnapshot, resolverError, seenRecord, suspenseID, updatedDataIDs) {\n    if (cachedSnapshot != null) {\n      if (cachedSnapshot.missingRequiredFields != null) {\n        this._addMissingRequiredFields(cachedSnapshot.missingRequiredFields);\n      }\n      if (cachedSnapshot.missingClientEdges != null) {\n        var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(cachedSnapshot.missingClientEdges),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var missing = _step.value;\n            this._missingClientEdges.push(missing);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      if (cachedSnapshot.missingLiveResolverFields != null) {\n        this._isMissingData = this._isMissingData || cachedSnapshot.missingLiveResolverFields.length > 0;\n        var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(cachedSnapshot.missingLiveResolverFields),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var missingResolverField = _step2.value;\n            this._missingLiveResolverFields.push(missingResolverField);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n      var _iterator3 = (0, _createForOfIteratorHelper2[\"default\"])(cachedSnapshot.relayResolverErrors),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var error = _step3.value;\n          this._resolverErrors.push(error);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      this._isMissingData = this._isMissingData || cachedSnapshot.isMissingData;\n    }\n    if (resolverError) {\n      this._resolverErrors.push({\n        field: {\n          path: fieldPath,\n          owner: this._fragmentName\n        },\n        error: resolverError\n      });\n    }\n    if (seenRecord != null) {\n      this._seenRecords.add(seenRecord);\n    }\n    if (suspenseID != null) {\n      this._isMissingData = true;\n      this._missingLiveResolverFields.push({\n        path: \"\".concat(this._fragmentName, \".\").concat(fieldPath),\n        liveStateID: suspenseID\n      });\n    }\n    if (updatedDataIDs != null) {\n      var _iterator4 = (0, _createForOfIteratorHelper2[\"default\"])(updatedDataIDs),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var recordID = _step4.value;\n          this._updatedDataIDs.add(recordID);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  };\n  _proto._readClientEdge = function _readClientEdge(field, record, data) {\n    var _backingField$alias;\n    var backingField = field.backingField;\n    !(backingField.kind !== 'ClientExtension') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Client extension client edges are not yet implemented.') : invariant(false) : void 0;\n    var applicationName = (_backingField$alias = backingField.alias) !== null && _backingField$alias !== void 0 ? _backingField$alias : backingField.name;\n    var backingFieldData = {};\n    this._traverseSelections([backingField], record, backingFieldData);\n    var clientEdgeResolverResponse = backingFieldData[applicationName];\n    if (clientEdgeResolverResponse == null || isSuspenseSentinel(clientEdgeResolverResponse)) {\n      data[applicationName] = clientEdgeResolverResponse;\n      return clientEdgeResolverResponse;\n    }\n    var validClientEdgeResolverResponse = assertValidClientEdgeResolverResponse(field, clientEdgeResolverResponse);\n    switch (validClientEdgeResolverResponse.kind) {\n      case 'PluralConcrete':\n        var storeIDs = getStoreIDsForPluralClientEdgeResolver(field, validClientEdgeResolverResponse.ids, this._resolverCache);\n        this._clientEdgeTraversalPath.push(null);\n        var edgeValues = this._readLinkedIds(field.linkedField, storeIDs, record, data);\n        this._clientEdgeTraversalPath.pop();\n        data[applicationName] = edgeValues;\n        return edgeValues;\n      case 'SingularConcrete':\n        var _getStoreIDAndTravers = getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver(field, validClientEdgeResolverResponse.id, this._resolverCache),\n          storeID = _getStoreIDAndTravers[0],\n          traversalPathSegment = _getStoreIDAndTravers[1];\n        this._clientEdgeTraversalPath.push(traversalPathSegment);\n        var prevData = data[applicationName];\n        !(prevData == null || typeof prevData === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n        var edgeValue = this._traverse(field.linkedField, storeID, prevData);\n        this._clientEdgeTraversalPath.pop();\n        data[applicationName] = edgeValue;\n        return edgeValue;\n      default:\n        validClientEdgeResolverResponse.kind;\n    }\n  };\n  _proto._readScalar = function _readScalar(field, record, data) {\n    var _field$alias2;\n    var applicationName = (_field$alias2 = field.alias) !== null && _field$alias2 !== void 0 ? _field$alias2 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var value = RelayModernRecord.getValue(record, storageKey);\n    if (value === undefined) {\n      this._markDataAsMissing();\n    }\n    data[applicationName] = value;\n    return value;\n  };\n  _proto._readLink = function _readLink(field, record, data) {\n    var _field$alias3;\n    var applicationName = (_field$alias3 = field.alias) !== null && _field$alias3 !== void 0 ? _field$alias3 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n    if (linkedID == null) {\n      data[applicationName] = linkedID;\n      if (linkedID === undefined) {\n        this._markDataAsMissing();\n      }\n      return linkedID;\n    }\n    var prevData = data[applicationName];\n    !(prevData == null || typeof prevData === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n    var value = this._traverse(field, linkedID, prevData);\n    data[applicationName] = value;\n    return value;\n  };\n  _proto._readActorChange = function _readActorChange(field, record, data) {\n    var _field$alias4;\n    var applicationName = (_field$alias4 = field.alias) !== null && _field$alias4 !== void 0 ? _field$alias4 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var externalRef = RelayModernRecord.getActorLinkedRecordID(record, storageKey);\n    if (externalRef == null) {\n      data[applicationName] = externalRef;\n      if (externalRef === undefined) {\n        this._markDataAsMissing();\n      }\n      return data[applicationName];\n    }\n    var actorIdentifier = externalRef[0],\n      dataID = externalRef[1];\n    var fragmentRef = {};\n    this._createFragmentPointer(field.fragmentSpread, RelayModernRecord.fromObject({\n      __id: dataID\n    }), fragmentRef);\n    data[applicationName] = {\n      __fragmentRef: fragmentRef,\n      __viewer: actorIdentifier\n    };\n    return data[applicationName];\n  };\n  _proto._readPluralLink = function _readPluralLink(field, record, data) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    return this._readLinkedIds(field, linkedIDs, record, data);\n  };\n  _proto._readLinkedIds = function _readLinkedIds(field, linkedIDs, record, data) {\n    var _this2 = this;\n    var _field$alias5;\n    var applicationName = (_field$alias5 = field.alias) !== null && _field$alias5 !== void 0 ? _field$alias5 : field.name;\n    if (linkedIDs == null) {\n      data[applicationName] = linkedIDs;\n      if (linkedIDs === undefined) {\n        this._markDataAsMissing();\n      }\n      return linkedIDs;\n    }\n    var prevData = data[applicationName];\n    !(prevData == null || Array.isArray(prevData)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an array, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n    var linkedArray = prevData || [];\n    linkedIDs.forEach(function (linkedID, nextIndex) {\n      if (linkedID == null) {\n        if (linkedID === undefined) {\n          _this2._markDataAsMissing();\n        }\n        linkedArray[nextIndex] = linkedID;\n        return;\n      }\n      var prevItem = linkedArray[nextIndex];\n      !(prevItem == null || typeof prevItem === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevItem) : invariant(false) : void 0;\n      linkedArray[nextIndex] = _this2._traverse(field, linkedID, prevItem);\n    });\n    data[applicationName] = linkedArray;\n    return linkedArray;\n  };\n  _proto._readModuleImport = function _readModuleImport(moduleImport, record, data) {\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var component = RelayModernRecord.getValue(record, componentKey);\n    if (component == null) {\n      if (component === undefined) {\n        this._markDataAsMissing();\n      }\n      return;\n    }\n    this._createFragmentPointer({\n      kind: 'FragmentSpread',\n      name: moduleImport.fragmentName,\n      args: moduleImport.args\n    }, record, data);\n    data[FRAGMENT_PROP_NAME_KEY] = moduleImport.fragmentPropName;\n    data[MODULE_COMPONENT_KEY] = component;\n  };\n  _proto._createAliasedFragmentSpread = function _createAliasedFragmentSpread(namedFragmentSpread, record) {\n    var abstractKey = namedFragmentSpread.abstractKey;\n    if (abstractKey == null) {\n      var typeName = RelayModernRecord.getType(record);\n      if (typeName == null || typeName !== namedFragmentSpread.type) {\n        return null;\n      }\n    } else {\n      var implementsInterface = this._implementsInterface(record, abstractKey);\n      if (implementsInterface === false) {\n        return null;\n      } else if (implementsInterface == null) {\n        this._markDataAsMissing();\n        return undefined;\n      }\n    }\n    var fieldData = {};\n    this._createFragmentPointer(namedFragmentSpread.fragment, record, fieldData);\n    return RelayModernRecord.fromObject(fieldData);\n  };\n  _proto._readInlineFragment = function _readInlineFragment(inlineFragment, record, data) {\n    var abstractKey = inlineFragment.abstractKey;\n    if (abstractKey == null) {\n      var typeName = RelayModernRecord.getType(record);\n      if (typeName == null || typeName !== inlineFragment.type) {\n        return null;\n      } else {\n        var hasExpectedData = this._traverseSelections(inlineFragment.selections, record, data);\n        if (!hasExpectedData) {\n          return false;\n        }\n      }\n    } else {\n      var implementsInterface = this._implementsInterface(record, abstractKey);\n      var parentIsMissingData = this._isMissingData;\n      var parentIsWithinUnmatchedTypeRefinement = this._isWithinUnmatchedTypeRefinement;\n      this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement || implementsInterface === false;\n      this._traverseSelections(inlineFragment.selections, record, data);\n      this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement;\n      if (implementsInterface === false) {\n        this._isMissingData = parentIsMissingData;\n        return undefined;\n      } else if (implementsInterface == null) {\n        this._markDataAsMissing();\n        return null;\n      }\n    }\n    return data;\n  };\n  _proto._createFragmentPointer = function _createFragmentPointer(fragmentSpread, record, data) {\n    var fragmentPointers = data[FRAGMENTS_KEY];\n    if (fragmentPointers == null) {\n      fragmentPointers = data[FRAGMENTS_KEY] = {};\n    }\n    !(typeof fragmentPointers === 'object' && fragmentPointers != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : invariant(false) : void 0;\n    if (data[ID_KEY] == null) {\n      data[ID_KEY] = RelayModernRecord.getDataID(record);\n    }\n    fragmentPointers[fragmentSpread.name] = getArgumentValues(fragmentSpread.args, this._variables, this._isWithinUnmatchedTypeRefinement);\n    data[FRAGMENT_OWNER_KEY] = this._owner;\n    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n      if (this._clientEdgeTraversalPath.length > 0 && this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1] !== null) {\n        data[CLIENT_EDGE_TRAVERSAL_PATH] = (0, _toConsumableArray2[\"default\"])(this._clientEdgeTraversalPath);\n      }\n    }\n  };\n  _proto._createInlineDataOrResolverFragmentPointer = function _createInlineDataOrResolverFragmentPointer(fragmentSpreadOrFragment, record, data) {\n    var fragmentPointers = data[FRAGMENTS_KEY];\n    if (fragmentPointers == null) {\n      fragmentPointers = data[FRAGMENTS_KEY] = {};\n    }\n    !(typeof fragmentPointers === 'object' && fragmentPointers != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : invariant(false) : void 0;\n    if (data[ID_KEY] == null) {\n      data[ID_KEY] = RelayModernRecord.getDataID(record);\n    }\n    var inlineData = {};\n    var parentFragmentName = this._fragmentName;\n    this._fragmentName = fragmentSpreadOrFragment.name;\n    var parentVariables = this._variables;\n    var argumentVariables = fragmentSpreadOrFragment.args ? getArgumentValues(fragmentSpreadOrFragment.args, this._variables) : {};\n    this._variables = RelayConcreteVariables.getFragmentVariables(fragmentSpreadOrFragment, this._owner.variables, argumentVariables);\n    this._traverseSelections(fragmentSpreadOrFragment.selections, record, inlineData);\n    this._variables = parentVariables;\n    this._fragmentName = parentFragmentName;\n    fragmentPointers[fragmentSpreadOrFragment.name] = inlineData;\n  };\n  _proto._addMissingRequiredFields = function _addMissingRequiredFields(additional) {\n    if (this._missingRequiredFields == null) {\n      this._missingRequiredFields = additional;\n      return;\n    }\n    if (this._missingRequiredFields.action === 'THROW') {\n      return;\n    }\n    if (additional.action === 'THROW') {\n      this._missingRequiredFields = additional;\n      return;\n    }\n    this._missingRequiredFields = {\n      action: 'LOG',\n      fields: [].concat((0, _toConsumableArray2[\"default\"])(this._missingRequiredFields.fields), (0, _toConsumableArray2[\"default\"])(additional.fields))\n    };\n  };\n  _proto._implementsInterface = function _implementsInterface(record, abstractKey) {\n    var typeName = RelayModernRecord.getType(record);\n    var typeRecord = this._recordSource.get(generateTypeID(typeName));\n    var implementsInterface = typeRecord != null ? RelayModernRecord.getValue(typeRecord, abstractKey) : null;\n    return implementsInterface;\n  };\n  return RelayReader;\n}();\nfunction getResolverValue(field, variables, fragmentKey) {\n  var resolverFunction = typeof field.resolverModule === 'function' ? field.resolverModule : field.resolverModule[\"default\"];\n  var resolverResult = null;\n  var resolverError = null;\n  try {\n    var resolverFunctionArgs = [];\n    if (field.fragment != null) {\n      resolverFunctionArgs.push(fragmentKey);\n    }\n    var args = field.args ? getArgumentValues(field.args, variables) : undefined;\n    resolverFunctionArgs.push(args);\n    resolverResult = resolverFunction.apply(null, resolverFunctionArgs);\n  } catch (e) {\n    if (e === RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL) {\n      resolverResult = undefined;\n    } else {\n      resolverError = e;\n    }\n  }\n  return [resolverResult, resolverError];\n}\nfunction assertValidClientEdgeResolverResponse(field, clientEdgeResolverResponse) {\n  if (field.linkedField.plural) {\n    !Array.isArray(clientEdgeResolverResponse) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected plural Client Edge Relay Resolver to return an array containing IDs or objects with shape {id}.') : invariant(false) : void 0;\n    return {\n      kind: 'PluralConcrete',\n      ids: clientEdgeResolverResponse.map(function (response) {\n        return extractIdFromResponse(response, 'Expected this plural Client Edge Relay Resolver to return an array containing IDs or objects with shape {id}.');\n      })\n    };\n  } else {\n    return {\n      kind: 'SingularConcrete',\n      id: extractIdFromResponse(clientEdgeResolverResponse, 'Expected this Client Edge Relay Resolver to return an ID of type `string` or an object with shape {id}.')\n    };\n  }\n}\nfunction getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver(field, clientEdgeResolverResponse, resolverCache) {\n  if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {\n    if (field.backingField.normalizationInfo == null) {\n      var concreteType = field.concreteType;\n      !(concreteType != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected at least one of backingField.normalizationInfo or field.concreteType to be non-null. ' + 'This indicates a bug in Relay.') : invariant(false) : void 0;\n      return [resolverCache.ensureClientRecord(clientEdgeResolverResponse, concreteType), null];\n    } else {\n      return [clientEdgeResolverResponse, null];\n    }\n  } else {\n    return [clientEdgeResolverResponse, {\n      readerClientEdge: field,\n      clientEdgeDestinationID: clientEdgeResolverResponse\n    }];\n  }\n}\nfunction getStoreIDsForPluralClientEdgeResolver(field, clientEdgeResolverResponse, resolverCache) {\n  if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {\n    if (field.backingField.normalizationInfo == null) {\n      var concreteType = field.concreteType;\n      !(concreteType != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected at least one of backingField.normalizationInfo or field.concreteType to be non-null. ' + 'This indicates a bug in Relay.') : invariant(false) : void 0;\n      return clientEdgeResolverResponse.map(function (id) {\n        return resolverCache.ensureClientRecord(id, concreteType);\n      });\n    } else {\n      return clientEdgeResolverResponse;\n    }\n  } else {\n    !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Unexpected Client Edge to plural server type. This should be prevented by the compiler.') : invariant(false) : void 0;\n  }\n}\nfunction extractIdFromResponse(individualResponse, errorMessage) {\n  if (typeof individualResponse === 'string') {\n    return individualResponse;\n  } else if (typeof individualResponse === 'object' && individualResponse != null && typeof individualResponse.id === 'string') {\n    return individualResponse.id;\n  }\n  !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, errorMessage) : invariant(false) : void 0;\n}\nmodule.exports = {\n  read: read\n};","map":{"version":3,"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","_defineProperty2","_toConsumableArray2","_require","ACTOR_CHANGE","ALIASED_FRAGMENT_SPREAD","ALIASED_INLINE_FRAGMENT_SPREAD","CLIENT_EDGE_TO_CLIENT_OBJECT","CLIENT_EDGE_TO_SERVER_OBJECT","CLIENT_EXTENSION","CONDITION","DEFER","FRAGMENT_SPREAD","INLINE_DATA_FRAGMENT_SPREAD","INLINE_FRAGMENT","LINKED_FIELD","MODULE_IMPORT","RELAY_LIVE_RESOLVER","RELAY_RESOLVER","REQUIRED_FIELD","SCALAR_FIELD","STREAM","RelayFeatureFlags","_require2","isSuspenseSentinel","RelayConcreteVariables","RelayModernRecord","_require3","CLIENT_EDGE_TRAVERSAL_PATH","FRAGMENT_OWNER_KEY","FRAGMENT_PROP_NAME_KEY","FRAGMENTS_KEY","ID_KEY","MODULE_COMPONENT_KEY","ROOT_ID","getArgumentValues","getModuleComponentKey","getStorageKey","_require4","NoopResolverCache","_require5","RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL","withResolverContext","_require6","generateTypeID","invariant","read","recordSource","selector","resolverCache","reader","RelayReader","_selector$clientEdgeT","_clientEdgeTraversalPath","ENABLE_CLIENT_EDGES","clientEdgeTraversalPath","length","_missingClientEdges","_missingLiveResolverFields","_isMissingData","_isWithinUnmatchedTypeRefinement","_missingRequiredFields","_owner","owner","_recordSource","_seenRecords","Set","_selector","_variables","variables","_resolverCache","_resolverErrors","_fragmentName","node","name","_updatedDataIDs","_proto","prototype","_this$_selector","dataID","isWithinUnmatchedTypeRefinement","abstractKey","record","get","isDataExpectedToBePresent","recordType","getType","type","implementsInterface","_implementsInterface","data","_traverse","size","notifyUpdatedSubscribers","clear","isMissingData","missingClientEdges","missingLiveResolverFields","seenRecords","missingRequiredFields","relayResolverErrors","_markDataAsMissing","top","push","request","readerClientEdge","operation","clientEdgeDestinationID","prevData","add","undefined","hadRequiredData","_traverseSelections","selections","_getVariableValue","hasOwnProperty","process","env","NODE_ENV","_maybeReportUnexpectedNull","fieldPath","action","_this$_missingRequire","field","path","fields","concat","i","selection","kind","fieldValue","_readRequiredField","_readScalar","plural","_readPluralLink","_readLink","conditionValue","Boolean","condition","passingValue","hasExpectedData","_readInlineFragment","ENABLE_RELAY_RESOLVERS","Error","_readResolverField","_createFragmentPointer","_createAliasedFragmentSpread","_fieldValue","fragment","_readModuleImport","_createInlineDataOrResolverFragmentPointer","alreadyMissingClientEdges","_hasExpectedData","pop","_hasExpectedData2","_readActorChange","_readClientEdge","_this","_field$alias","parentRecordID","getDataID","snapshot","getDataForResolverFragment","singularReaderSelector","evaluate","key","__id","__fragmentOwner","__fragments","args","resolverContext","_getResolverValue","getResolverValue","resolverResult","resolverError","error","_getResolverValue2","_resolverError","_this$_resolverCache$","readFromCacheOrEvaluate","result","seenRecord","cachedSnapshot","suspenseID","updatedDataIDs","_propogateResolverMetadata","applicationName","alias","_addMissingRequiredFields","_iterator","_step","s","n","done","missing","value","err","e","f","_iterator2","_step2","missingResolverField","_iterator3","_step3","liveStateID","_iterator4","_step4","recordID","_backingField$alias","backingField","backingFieldData","clientEdgeResolverResponse","validClientEdgeResolverResponse","assertValidClientEdgeResolverResponse","storeIDs","getStoreIDsForPluralClientEdgeResolver","ids","edgeValues","_readLinkedIds","linkedField","_getStoreIDAndTravers","getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver","id","storeID","traversalPathSegment","edgeValue","_field$alias2","storageKey","getValue","_field$alias3","linkedID","getLinkedRecordID","_field$alias4","externalRef","getActorLinkedRecordID","actorIdentifier","fragmentRef","fragmentSpread","fromObject","__fragmentRef","__viewer","linkedIDs","getLinkedRecordIDs","_this2","_field$alias5","Array","isArray","linkedArray","forEach","nextIndex","prevItem","moduleImport","componentKey","documentName","component","fragmentName","fragmentPropName","namedFragmentSpread","typeName","fieldData","inlineFragment","parentIsMissingData","parentIsWithinUnmatchedTypeRefinement","fragmentPointers","fragmentSpreadOrFragment","inlineData","parentFragmentName","parentVariables","argumentVariables","getFragmentVariables","additional","typeRecord","fragmentKey","resolverFunction","resolverModule","resolverFunctionArgs","apply","map","response","extractIdFromResponse","normalizationInfo","concreteType","ensureClientRecord","individualResponse","errorMessage","module","exports"],"sources":["/Users/joaoluismoraes/Desktop/woovi-challenge/web/node_modules/relay-runtime/lib/store/RelayReader.js"],"sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _require = require('../util/RelayConcreteNode'),\n  ACTOR_CHANGE = _require.ACTOR_CHANGE,\n  ALIASED_FRAGMENT_SPREAD = _require.ALIASED_FRAGMENT_SPREAD,\n  ALIASED_INLINE_FRAGMENT_SPREAD = _require.ALIASED_INLINE_FRAGMENT_SPREAD,\n  CLIENT_EDGE_TO_CLIENT_OBJECT = _require.CLIENT_EDGE_TO_CLIENT_OBJECT,\n  CLIENT_EDGE_TO_SERVER_OBJECT = _require.CLIENT_EDGE_TO_SERVER_OBJECT,\n  CLIENT_EXTENSION = _require.CLIENT_EXTENSION,\n  CONDITION = _require.CONDITION,\n  DEFER = _require.DEFER,\n  FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD,\n  INLINE_DATA_FRAGMENT_SPREAD = _require.INLINE_DATA_FRAGMENT_SPREAD,\n  INLINE_FRAGMENT = _require.INLINE_FRAGMENT,\n  LINKED_FIELD = _require.LINKED_FIELD,\n  MODULE_IMPORT = _require.MODULE_IMPORT,\n  RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER,\n  RELAY_RESOLVER = _require.RELAY_RESOLVER,\n  REQUIRED_FIELD = _require.REQUIRED_FIELD,\n  SCALAR_FIELD = _require.SCALAR_FIELD,\n  STREAM = _require.STREAM;\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\nvar _require2 = require('./experimental-live-resolvers/LiveResolverSuspenseSentinel'),\n  isSuspenseSentinel = _require2.isSuspenseSentinel;\nvar RelayConcreteVariables = require('./RelayConcreteVariables');\nvar RelayModernRecord = require('./RelayModernRecord');\nvar _require3 = require('./RelayStoreUtils'),\n  CLIENT_EDGE_TRAVERSAL_PATH = _require3.CLIENT_EDGE_TRAVERSAL_PATH,\n  FRAGMENT_OWNER_KEY = _require3.FRAGMENT_OWNER_KEY,\n  FRAGMENT_PROP_NAME_KEY = _require3.FRAGMENT_PROP_NAME_KEY,\n  FRAGMENTS_KEY = _require3.FRAGMENTS_KEY,\n  ID_KEY = _require3.ID_KEY,\n  MODULE_COMPONENT_KEY = _require3.MODULE_COMPONENT_KEY,\n  ROOT_ID = _require3.ROOT_ID,\n  getArgumentValues = _require3.getArgumentValues,\n  getModuleComponentKey = _require3.getModuleComponentKey,\n  getStorageKey = _require3.getStorageKey;\nvar _require4 = require('./ResolverCache'),\n  NoopResolverCache = _require4.NoopResolverCache;\nvar _require5 = require('./ResolverFragments'),\n  RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = _require5.RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL,\n  withResolverContext = _require5.withResolverContext;\nvar _require6 = require('./TypeID'),\n  generateTypeID = _require6.generateTypeID;\nvar invariant = require('invariant');\nfunction read(recordSource, selector, resolverCache) {\n  var reader = new RelayReader(recordSource, selector, resolverCache !== null && resolverCache !== void 0 ? resolverCache : new NoopResolverCache());\n  return reader.read();\n}\nvar RelayReader = /*#__PURE__*/function () {\n  function RelayReader(recordSource, selector, resolverCache) {\n    var _selector$clientEdgeT;\n    this._clientEdgeTraversalPath = RelayFeatureFlags.ENABLE_CLIENT_EDGES && (_selector$clientEdgeT = selector.clientEdgeTraversalPath) !== null && _selector$clientEdgeT !== void 0 && _selector$clientEdgeT.length ? (0, _toConsumableArray2[\"default\"])(selector.clientEdgeTraversalPath) : [];\n    this._missingClientEdges = [];\n    this._missingLiveResolverFields = [];\n    this._isMissingData = false;\n    this._isWithinUnmatchedTypeRefinement = false;\n    this._missingRequiredFields = null;\n    this._owner = selector.owner;\n    this._recordSource = recordSource;\n    this._seenRecords = new Set();\n    this._selector = selector;\n    this._variables = selector.variables;\n    this._resolverCache = resolverCache;\n    this._resolverErrors = [];\n    this._fragmentName = selector.node.name;\n    this._updatedDataIDs = new Set();\n  }\n  var _proto = RelayReader.prototype;\n  _proto.read = function read() {\n    var _this$_selector = this._selector,\n      node = _this$_selector.node,\n      dataID = _this$_selector.dataID,\n      isWithinUnmatchedTypeRefinement = _this$_selector.isWithinUnmatchedTypeRefinement;\n    var abstractKey = node.abstractKey;\n    var record = this._recordSource.get(dataID);\n    var isDataExpectedToBePresent = !isWithinUnmatchedTypeRefinement;\n    if (isDataExpectedToBePresent && abstractKey == null && record != null) {\n      var recordType = RelayModernRecord.getType(record);\n      if (recordType !== node.type && dataID !== ROOT_ID) {\n        isDataExpectedToBePresent = false;\n      }\n    }\n    if (isDataExpectedToBePresent && abstractKey != null && record != null) {\n      var implementsInterface = this._implementsInterface(record, abstractKey);\n      if (implementsInterface === false) {\n        isDataExpectedToBePresent = false;\n      } else if (implementsInterface == null) {\n        this._isMissingData = true;\n      }\n    }\n    this._isWithinUnmatchedTypeRefinement = !isDataExpectedToBePresent;\n    var data = this._traverse(node, dataID, null);\n    if (this._updatedDataIDs.size > 0) {\n      this._resolverCache.notifyUpdatedSubscribers(this._updatedDataIDs);\n      this._updatedDataIDs.clear();\n    }\n    return {\n      data: data,\n      isMissingData: this._isMissingData && isDataExpectedToBePresent,\n      missingClientEdges: RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._missingClientEdges.length ? this._missingClientEdges : null,\n      missingLiveResolverFields: this._missingLiveResolverFields,\n      seenRecords: this._seenRecords,\n      selector: this._selector,\n      missingRequiredFields: this._missingRequiredFields,\n      relayResolverErrors: this._resolverErrors\n    };\n  };\n  _proto._markDataAsMissing = function _markDataAsMissing() {\n    this._isMissingData = true;\n    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._clientEdgeTraversalPath.length) {\n      var top = this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1];\n      if (top !== null) {\n        this._missingClientEdges.push({\n          request: top.readerClientEdge.operation,\n          clientEdgeDestinationID: top.clientEdgeDestinationID\n        });\n      }\n    }\n  };\n  _proto._traverse = function _traverse(node, dataID, prevData) {\n    var record = this._recordSource.get(dataID);\n    this._seenRecords.add(dataID);\n    if (record == null) {\n      if (record === undefined) {\n        this._markDataAsMissing();\n      }\n      return record;\n    }\n    var data = prevData || {};\n    var hadRequiredData = this._traverseSelections(node.selections, record, data);\n    return hadRequiredData ? data : null;\n  };\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n  _proto._maybeReportUnexpectedNull = function _maybeReportUnexpectedNull(fieldPath, action) {\n    var _this$_missingRequire;\n    if (((_this$_missingRequire = this._missingRequiredFields) === null || _this$_missingRequire === void 0 ? void 0 : _this$_missingRequire.action) === 'THROW') {\n      return;\n    }\n    var owner = this._fragmentName;\n    switch (action) {\n      case 'THROW':\n        this._missingRequiredFields = {\n          action: action,\n          field: {\n            path: fieldPath,\n            owner: owner\n          }\n        };\n        return;\n      case 'LOG':\n        if (this._missingRequiredFields == null) {\n          this._missingRequiredFields = {\n            action: action,\n            fields: [{\n              path: fieldPath,\n              owner: owner\n            }]\n          };\n        } else {\n          this._missingRequiredFields = {\n            action: action,\n            fields: [].concat((0, _toConsumableArray2[\"default\"])(this._missingRequiredFields.fields), [{\n              path: fieldPath,\n              owner: owner\n            }])\n          };\n        }\n        return;\n      default:\n        action;\n    }\n  };\n  _proto._traverseSelections = function _traverseSelections(selections, record, data) {\n    for (var i = 0; i < selections.length; i++) {\n      var selection = selections[i];\n      switch (selection.kind) {\n        case REQUIRED_FIELD:\n          {\n            var fieldValue = this._readRequiredField(selection, record, data);\n            if (fieldValue == null) {\n              var action = selection.action;\n              if (action !== 'NONE') {\n                this._maybeReportUnexpectedNull(selection.path, action);\n              }\n              return false;\n            }\n            break;\n          }\n        case SCALAR_FIELD:\n          this._readScalar(selection, record, data);\n          break;\n        case LINKED_FIELD:\n          if (selection.plural) {\n            this._readPluralLink(selection, record, data);\n          } else {\n            this._readLink(selection, record, data);\n          }\n          break;\n        case CONDITION:\n          var conditionValue = Boolean(this._getVariableValue(selection.condition));\n          if (conditionValue === selection.passingValue) {\n            var hasExpectedData = this._traverseSelections(selection.selections, record, data);\n            if (!hasExpectedData) {\n              return false;\n            }\n          }\n          break;\n        case INLINE_FRAGMENT:\n          {\n            if (this._readInlineFragment(selection, record, data) === false) {\n              return false;\n            }\n            break;\n          }\n        case RELAY_LIVE_RESOLVER:\n        case RELAY_RESOLVER:\n          {\n            if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n              throw new Error('Relay Resolver fields are not yet supported.');\n            }\n            this._readResolverField(selection, record, data);\n            break;\n          }\n        case FRAGMENT_SPREAD:\n          this._createFragmentPointer(selection, record, data);\n          break;\n        case ALIASED_FRAGMENT_SPREAD:\n          data[selection.name] = this._createAliasedFragmentSpread(selection, record);\n          break;\n        case ALIASED_INLINE_FRAGMENT_SPREAD:\n          {\n            var _fieldValue = this._readInlineFragment(selection.fragment, record, {});\n            if (_fieldValue === false) {\n              _fieldValue = null;\n            }\n            data[selection.name] = _fieldValue;\n            break;\n          }\n        case MODULE_IMPORT:\n          this._readModuleImport(selection, record, data);\n          break;\n        case INLINE_DATA_FRAGMENT_SPREAD:\n          this._createInlineDataOrResolverFragmentPointer(selection, record, data);\n          break;\n        case DEFER:\n        case CLIENT_EXTENSION:\n          {\n            var isMissingData = this._isMissingData;\n            var alreadyMissingClientEdges = this._missingClientEdges.length;\n            if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n              this._clientEdgeTraversalPath.push(null);\n            }\n            var _hasExpectedData = this._traverseSelections(selection.selections, record, data);\n            this._isMissingData = isMissingData || this._missingClientEdges.length > alreadyMissingClientEdges || this._missingLiveResolverFields.length > 0;\n            if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n              this._clientEdgeTraversalPath.pop();\n            }\n            if (!_hasExpectedData) {\n              return false;\n            }\n            break;\n          }\n        case STREAM:\n          {\n            var _hasExpectedData2 = this._traverseSelections(selection.selections, record, data);\n            if (!_hasExpectedData2) {\n              return false;\n            }\n            break;\n          }\n        case ACTOR_CHANGE:\n          this._readActorChange(selection, record, data);\n          break;\n        case CLIENT_EDGE_TO_CLIENT_OBJECT:\n        case CLIENT_EDGE_TO_SERVER_OBJECT:\n          if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n            this._readClientEdge(selection, record, data);\n          } else {\n            throw new Error('Client edges are not yet supported.');\n          }\n          break;\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n    return true;\n  };\n  _proto._readRequiredField = function _readRequiredField(selection, record, data) {\n    switch (selection.field.kind) {\n      case SCALAR_FIELD:\n        return this._readScalar(selection.field, record, data);\n      case LINKED_FIELD:\n        if (selection.field.plural) {\n          return this._readPluralLink(selection.field, record, data);\n        } else {\n          return this._readLink(selection.field, record, data);\n        }\n      case RELAY_RESOLVER:\n        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n          throw new Error('Relay Resolver fields are not yet supported.');\n        }\n        return this._readResolverField(selection.field, record, data);\n      case RELAY_LIVE_RESOLVER:\n        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n          throw new Error('Relay Resolver fields are not yet supported.');\n        }\n        return this._readResolverField(selection.field, record, data);\n      case CLIENT_EDGE_TO_CLIENT_OBJECT:\n      case CLIENT_EDGE_TO_SERVER_OBJECT:\n        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n          throw new Error('Relay Resolver fields are not yet supported.');\n        }\n        return this._readClientEdge(selection.field, record, data);\n      default:\n        selection.field.kind;\n        !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n    }\n  };\n  _proto._readResolverField = function _readResolverField(field, record, data) {\n    var _this = this;\n    var _field$alias;\n    var fragment = field.fragment;\n    var parentRecordID = RelayModernRecord.getDataID(record);\n    var snapshot;\n    var getDataForResolverFragment = function getDataForResolverFragment(singularReaderSelector) {\n      if (snapshot != null) {\n        return {\n          data: snapshot.data,\n          isMissingData: snapshot.isMissingData\n        };\n      }\n      snapshot = read(_this._recordSource, singularReaderSelector, _this._resolverCache);\n      return {\n        data: snapshot.data,\n        isMissingData: snapshot.isMissingData\n      };\n    };\n    var evaluate = function evaluate() {\n      if (fragment != null) {\n        var key = {\n          __id: parentRecordID,\n          __fragmentOwner: _this._owner,\n          __fragments: (0, _defineProperty2[\"default\"])({}, fragment.name, fragment.args ? getArgumentValues(fragment.args, _this._variables) : {})\n        };\n        var resolverContext = {\n          getDataForResolverFragment: getDataForResolverFragment\n        };\n        return withResolverContext(resolverContext, function () {\n          var _getResolverValue = getResolverValue(field, _this._variables, key),\n            resolverResult = _getResolverValue[0],\n            resolverError = _getResolverValue[1];\n          return {\n            resolverResult: resolverResult,\n            snapshot: snapshot,\n            error: resolverError\n          };\n        });\n      } else {\n        var _getResolverValue2 = getResolverValue(field, _this._variables, null),\n          resolverResult = _getResolverValue2[0],\n          _resolverError = _getResolverValue2[1];\n        return {\n          resolverResult: resolverResult,\n          snapshot: undefined,\n          error: _resolverError\n        };\n      }\n    };\n    var _this$_resolverCache$ = this._resolverCache.readFromCacheOrEvaluate(parentRecordID, field, this._variables, evaluate, getDataForResolverFragment),\n      result = _this$_resolverCache$[0],\n      seenRecord = _this$_resolverCache$[1],\n      resolverError = _this$_resolverCache$[2],\n      cachedSnapshot = _this$_resolverCache$[3],\n      suspenseID = _this$_resolverCache$[4],\n      updatedDataIDs = _this$_resolverCache$[5];\n    this._propogateResolverMetadata(field.path, cachedSnapshot, resolverError, seenRecord, suspenseID, updatedDataIDs);\n    var applicationName = (_field$alias = field.alias) !== null && _field$alias !== void 0 ? _field$alias : field.name;\n    data[applicationName] = result;\n    return result;\n  };\n  _proto._propogateResolverMetadata = function _propogateResolverMetadata(fieldPath, cachedSnapshot, resolverError, seenRecord, suspenseID, updatedDataIDs) {\n    if (cachedSnapshot != null) {\n      if (cachedSnapshot.missingRequiredFields != null) {\n        this._addMissingRequiredFields(cachedSnapshot.missingRequiredFields);\n      }\n      if (cachedSnapshot.missingClientEdges != null) {\n        var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(cachedSnapshot.missingClientEdges),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var missing = _step.value;\n            this._missingClientEdges.push(missing);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      if (cachedSnapshot.missingLiveResolverFields != null) {\n        this._isMissingData = this._isMissingData || cachedSnapshot.missingLiveResolverFields.length > 0;\n        var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(cachedSnapshot.missingLiveResolverFields),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var missingResolverField = _step2.value;\n            this._missingLiveResolverFields.push(missingResolverField);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n      var _iterator3 = (0, _createForOfIteratorHelper2[\"default\"])(cachedSnapshot.relayResolverErrors),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var error = _step3.value;\n          this._resolverErrors.push(error);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      this._isMissingData = this._isMissingData || cachedSnapshot.isMissingData;\n    }\n    if (resolverError) {\n      this._resolverErrors.push({\n        field: {\n          path: fieldPath,\n          owner: this._fragmentName\n        },\n        error: resolverError\n      });\n    }\n    if (seenRecord != null) {\n      this._seenRecords.add(seenRecord);\n    }\n    if (suspenseID != null) {\n      this._isMissingData = true;\n      this._missingLiveResolverFields.push({\n        path: \"\".concat(this._fragmentName, \".\").concat(fieldPath),\n        liveStateID: suspenseID\n      });\n    }\n    if (updatedDataIDs != null) {\n      var _iterator4 = (0, _createForOfIteratorHelper2[\"default\"])(updatedDataIDs),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var recordID = _step4.value;\n          this._updatedDataIDs.add(recordID);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  };\n  _proto._readClientEdge = function _readClientEdge(field, record, data) {\n    var _backingField$alias;\n    var backingField = field.backingField;\n    !(backingField.kind !== 'ClientExtension') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Client extension client edges are not yet implemented.') : invariant(false) : void 0;\n    var applicationName = (_backingField$alias = backingField.alias) !== null && _backingField$alias !== void 0 ? _backingField$alias : backingField.name;\n    var backingFieldData = {};\n    this._traverseSelections([backingField], record, backingFieldData);\n    var clientEdgeResolverResponse = backingFieldData[applicationName];\n    if (clientEdgeResolverResponse == null || isSuspenseSentinel(clientEdgeResolverResponse)) {\n      data[applicationName] = clientEdgeResolverResponse;\n      return clientEdgeResolverResponse;\n    }\n    var validClientEdgeResolverResponse = assertValidClientEdgeResolverResponse(field, clientEdgeResolverResponse);\n    switch (validClientEdgeResolverResponse.kind) {\n      case 'PluralConcrete':\n        var storeIDs = getStoreIDsForPluralClientEdgeResolver(field, validClientEdgeResolverResponse.ids, this._resolverCache);\n        this._clientEdgeTraversalPath.push(null);\n        var edgeValues = this._readLinkedIds(field.linkedField, storeIDs, record, data);\n        this._clientEdgeTraversalPath.pop();\n        data[applicationName] = edgeValues;\n        return edgeValues;\n      case 'SingularConcrete':\n        var _getStoreIDAndTravers = getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver(field, validClientEdgeResolverResponse.id, this._resolverCache),\n          storeID = _getStoreIDAndTravers[0],\n          traversalPathSegment = _getStoreIDAndTravers[1];\n        this._clientEdgeTraversalPath.push(traversalPathSegment);\n        var prevData = data[applicationName];\n        !(prevData == null || typeof prevData === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n        var edgeValue = this._traverse(field.linkedField, storeID, prevData);\n        this._clientEdgeTraversalPath.pop();\n        data[applicationName] = edgeValue;\n        return edgeValue;\n      default:\n        validClientEdgeResolverResponse.kind;\n    }\n  };\n  _proto._readScalar = function _readScalar(field, record, data) {\n    var _field$alias2;\n    var applicationName = (_field$alias2 = field.alias) !== null && _field$alias2 !== void 0 ? _field$alias2 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var value = RelayModernRecord.getValue(record, storageKey);\n    if (value === undefined) {\n      this._markDataAsMissing();\n    }\n    data[applicationName] = value;\n    return value;\n  };\n  _proto._readLink = function _readLink(field, record, data) {\n    var _field$alias3;\n    var applicationName = (_field$alias3 = field.alias) !== null && _field$alias3 !== void 0 ? _field$alias3 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n    if (linkedID == null) {\n      data[applicationName] = linkedID;\n      if (linkedID === undefined) {\n        this._markDataAsMissing();\n      }\n      return linkedID;\n    }\n    var prevData = data[applicationName];\n    !(prevData == null || typeof prevData === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n    var value = this._traverse(field, linkedID, prevData);\n    data[applicationName] = value;\n    return value;\n  };\n  _proto._readActorChange = function _readActorChange(field, record, data) {\n    var _field$alias4;\n    var applicationName = (_field$alias4 = field.alias) !== null && _field$alias4 !== void 0 ? _field$alias4 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var externalRef = RelayModernRecord.getActorLinkedRecordID(record, storageKey);\n    if (externalRef == null) {\n      data[applicationName] = externalRef;\n      if (externalRef === undefined) {\n        this._markDataAsMissing();\n      }\n      return data[applicationName];\n    }\n    var actorIdentifier = externalRef[0],\n      dataID = externalRef[1];\n    var fragmentRef = {};\n    this._createFragmentPointer(field.fragmentSpread, RelayModernRecord.fromObject({\n      __id: dataID\n    }), fragmentRef);\n    data[applicationName] = {\n      __fragmentRef: fragmentRef,\n      __viewer: actorIdentifier\n    };\n    return data[applicationName];\n  };\n  _proto._readPluralLink = function _readPluralLink(field, record, data) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    return this._readLinkedIds(field, linkedIDs, record, data);\n  };\n  _proto._readLinkedIds = function _readLinkedIds(field, linkedIDs, record, data) {\n    var _this2 = this;\n    var _field$alias5;\n    var applicationName = (_field$alias5 = field.alias) !== null && _field$alias5 !== void 0 ? _field$alias5 : field.name;\n    if (linkedIDs == null) {\n      data[applicationName] = linkedIDs;\n      if (linkedIDs === undefined) {\n        this._markDataAsMissing();\n      }\n      return linkedIDs;\n    }\n    var prevData = data[applicationName];\n    !(prevData == null || Array.isArray(prevData)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an array, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n    var linkedArray = prevData || [];\n    linkedIDs.forEach(function (linkedID, nextIndex) {\n      if (linkedID == null) {\n        if (linkedID === undefined) {\n          _this2._markDataAsMissing();\n        }\n        linkedArray[nextIndex] = linkedID;\n        return;\n      }\n      var prevItem = linkedArray[nextIndex];\n      !(prevItem == null || typeof prevItem === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevItem) : invariant(false) : void 0;\n      linkedArray[nextIndex] = _this2._traverse(field, linkedID, prevItem);\n    });\n    data[applicationName] = linkedArray;\n    return linkedArray;\n  };\n  _proto._readModuleImport = function _readModuleImport(moduleImport, record, data) {\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var component = RelayModernRecord.getValue(record, componentKey);\n    if (component == null) {\n      if (component === undefined) {\n        this._markDataAsMissing();\n      }\n      return;\n    }\n    this._createFragmentPointer({\n      kind: 'FragmentSpread',\n      name: moduleImport.fragmentName,\n      args: moduleImport.args\n    }, record, data);\n    data[FRAGMENT_PROP_NAME_KEY] = moduleImport.fragmentPropName;\n    data[MODULE_COMPONENT_KEY] = component;\n  };\n  _proto._createAliasedFragmentSpread = function _createAliasedFragmentSpread(namedFragmentSpread, record) {\n    var abstractKey = namedFragmentSpread.abstractKey;\n    if (abstractKey == null) {\n      var typeName = RelayModernRecord.getType(record);\n      if (typeName == null || typeName !== namedFragmentSpread.type) {\n        return null;\n      }\n    } else {\n      var implementsInterface = this._implementsInterface(record, abstractKey);\n      if (implementsInterface === false) {\n        return null;\n      } else if (implementsInterface == null) {\n        this._markDataAsMissing();\n        return undefined;\n      }\n    }\n    var fieldData = {};\n    this._createFragmentPointer(namedFragmentSpread.fragment, record, fieldData);\n    return RelayModernRecord.fromObject(fieldData);\n  };\n  _proto._readInlineFragment = function _readInlineFragment(inlineFragment, record, data) {\n    var abstractKey = inlineFragment.abstractKey;\n    if (abstractKey == null) {\n      var typeName = RelayModernRecord.getType(record);\n      if (typeName == null || typeName !== inlineFragment.type) {\n        return null;\n      } else {\n        var hasExpectedData = this._traverseSelections(inlineFragment.selections, record, data);\n        if (!hasExpectedData) {\n          return false;\n        }\n      }\n    } else {\n      var implementsInterface = this._implementsInterface(record, abstractKey);\n      var parentIsMissingData = this._isMissingData;\n      var parentIsWithinUnmatchedTypeRefinement = this._isWithinUnmatchedTypeRefinement;\n      this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement || implementsInterface === false;\n      this._traverseSelections(inlineFragment.selections, record, data);\n      this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement;\n      if (implementsInterface === false) {\n        this._isMissingData = parentIsMissingData;\n        return undefined;\n      } else if (implementsInterface == null) {\n        this._markDataAsMissing();\n        return null;\n      }\n    }\n    return data;\n  };\n  _proto._createFragmentPointer = function _createFragmentPointer(fragmentSpread, record, data) {\n    var fragmentPointers = data[FRAGMENTS_KEY];\n    if (fragmentPointers == null) {\n      fragmentPointers = data[FRAGMENTS_KEY] = {};\n    }\n    !(typeof fragmentPointers === 'object' && fragmentPointers != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : invariant(false) : void 0;\n    if (data[ID_KEY] == null) {\n      data[ID_KEY] = RelayModernRecord.getDataID(record);\n    }\n    fragmentPointers[fragmentSpread.name] = getArgumentValues(fragmentSpread.args, this._variables, this._isWithinUnmatchedTypeRefinement);\n    data[FRAGMENT_OWNER_KEY] = this._owner;\n    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {\n      if (this._clientEdgeTraversalPath.length > 0 && this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1] !== null) {\n        data[CLIENT_EDGE_TRAVERSAL_PATH] = (0, _toConsumableArray2[\"default\"])(this._clientEdgeTraversalPath);\n      }\n    }\n  };\n  _proto._createInlineDataOrResolverFragmentPointer = function _createInlineDataOrResolverFragmentPointer(fragmentSpreadOrFragment, record, data) {\n    var fragmentPointers = data[FRAGMENTS_KEY];\n    if (fragmentPointers == null) {\n      fragmentPointers = data[FRAGMENTS_KEY] = {};\n    }\n    !(typeof fragmentPointers === 'object' && fragmentPointers != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : invariant(false) : void 0;\n    if (data[ID_KEY] == null) {\n      data[ID_KEY] = RelayModernRecord.getDataID(record);\n    }\n    var inlineData = {};\n    var parentFragmentName = this._fragmentName;\n    this._fragmentName = fragmentSpreadOrFragment.name;\n    var parentVariables = this._variables;\n    var argumentVariables = fragmentSpreadOrFragment.args ? getArgumentValues(fragmentSpreadOrFragment.args, this._variables) : {};\n    this._variables = RelayConcreteVariables.getFragmentVariables(fragmentSpreadOrFragment, this._owner.variables, argumentVariables);\n    this._traverseSelections(fragmentSpreadOrFragment.selections, record, inlineData);\n    this._variables = parentVariables;\n    this._fragmentName = parentFragmentName;\n    fragmentPointers[fragmentSpreadOrFragment.name] = inlineData;\n  };\n  _proto._addMissingRequiredFields = function _addMissingRequiredFields(additional) {\n    if (this._missingRequiredFields == null) {\n      this._missingRequiredFields = additional;\n      return;\n    }\n    if (this._missingRequiredFields.action === 'THROW') {\n      return;\n    }\n    if (additional.action === 'THROW') {\n      this._missingRequiredFields = additional;\n      return;\n    }\n    this._missingRequiredFields = {\n      action: 'LOG',\n      fields: [].concat((0, _toConsumableArray2[\"default\"])(this._missingRequiredFields.fields), (0, _toConsumableArray2[\"default\"])(additional.fields))\n    };\n  };\n  _proto._implementsInterface = function _implementsInterface(record, abstractKey) {\n    var typeName = RelayModernRecord.getType(record);\n    var typeRecord = this._recordSource.get(generateTypeID(typeName));\n    var implementsInterface = typeRecord != null ? RelayModernRecord.getValue(typeRecord, abstractKey) : null;\n    return implementsInterface;\n  };\n  return RelayReader;\n}();\nfunction getResolverValue(field, variables, fragmentKey) {\n  var resolverFunction = typeof field.resolverModule === 'function' ? field.resolverModule : field.resolverModule[\"default\"];\n  var resolverResult = null;\n  var resolverError = null;\n  try {\n    var resolverFunctionArgs = [];\n    if (field.fragment != null) {\n      resolverFunctionArgs.push(fragmentKey);\n    }\n    var args = field.args ? getArgumentValues(field.args, variables) : undefined;\n    resolverFunctionArgs.push(args);\n    resolverResult = resolverFunction.apply(null, resolverFunctionArgs);\n  } catch (e) {\n    if (e === RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL) {\n      resolverResult = undefined;\n    } else {\n      resolverError = e;\n    }\n  }\n  return [resolverResult, resolverError];\n}\nfunction assertValidClientEdgeResolverResponse(field, clientEdgeResolverResponse) {\n  if (field.linkedField.plural) {\n    !Array.isArray(clientEdgeResolverResponse) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected plural Client Edge Relay Resolver to return an array containing IDs or objects with shape {id}.') : invariant(false) : void 0;\n    return {\n      kind: 'PluralConcrete',\n      ids: clientEdgeResolverResponse.map(function (response) {\n        return extractIdFromResponse(response, 'Expected this plural Client Edge Relay Resolver to return an array containing IDs or objects with shape {id}.');\n      })\n    };\n  } else {\n    return {\n      kind: 'SingularConcrete',\n      id: extractIdFromResponse(clientEdgeResolverResponse, 'Expected this Client Edge Relay Resolver to return an ID of type `string` or an object with shape {id}.')\n    };\n  }\n}\nfunction getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver(field, clientEdgeResolverResponse, resolverCache) {\n  if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {\n    if (field.backingField.normalizationInfo == null) {\n      var concreteType = field.concreteType;\n      !(concreteType != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected at least one of backingField.normalizationInfo or field.concreteType to be non-null. ' + 'This indicates a bug in Relay.') : invariant(false) : void 0;\n      return [resolverCache.ensureClientRecord(clientEdgeResolverResponse, concreteType), null];\n    } else {\n      return [clientEdgeResolverResponse, null];\n    }\n  } else {\n    return [clientEdgeResolverResponse, {\n      readerClientEdge: field,\n      clientEdgeDestinationID: clientEdgeResolverResponse\n    }];\n  }\n}\nfunction getStoreIDsForPluralClientEdgeResolver(field, clientEdgeResolverResponse, resolverCache) {\n  if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {\n    if (field.backingField.normalizationInfo == null) {\n      var concreteType = field.concreteType;\n      !(concreteType != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected at least one of backingField.normalizationInfo or field.concreteType to be non-null. ' + 'This indicates a bug in Relay.') : invariant(false) : void 0;\n      return clientEdgeResolverResponse.map(function (id) {\n        return resolverCache.ensureClientRecord(id, concreteType);\n      });\n    } else {\n      return clientEdgeResolverResponse;\n    }\n  } else {\n    !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Unexpected Client Edge to plural server type. This should be prevented by the compiler.') : invariant(false) : void 0;\n  }\n}\nfunction extractIdFromResponse(individualResponse, errorMessage) {\n  if (typeof individualResponse === 'string') {\n    return individualResponse;\n  } else if (typeof individualResponse === 'object' && individualResponse != null && typeof individualResponse.id === 'string') {\n    return individualResponse.id;\n  }\n  !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, errorMessage) : invariant(false) : void 0;\n}\nmodule.exports = {\n  read: read\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}