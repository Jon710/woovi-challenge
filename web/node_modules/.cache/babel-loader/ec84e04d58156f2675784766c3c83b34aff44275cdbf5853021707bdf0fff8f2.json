{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _require = require('../multi-actor-environment/ActorIdentifier'),\n  INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = _require.INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE,\n  assertInternalActorIdentifier = _require.assertInternalActorIdentifier;\nvar deepFreeze = require('../util/deepFreeze');\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\nvar resolveImmediate = require('../util/resolveImmediate');\nvar DataChecker = require('./DataChecker');\nvar defaultGetDataID = require('./defaultGetDataID');\nvar RelayModernRecord = require('./RelayModernRecord');\nvar RelayOptimisticRecordSource = require('./RelayOptimisticRecordSource');\nvar RelayReader = require('./RelayReader');\nvar RelayReferenceMarker = require('./RelayReferenceMarker');\nvar RelayStoreSubscriptions = require('./RelayStoreSubscriptions');\nvar RelayStoreUtils = require('./RelayStoreUtils');\nvar _require2 = require('./RelayStoreUtils'),\n  ROOT_ID = _require2.ROOT_ID,\n  ROOT_TYPE = _require2.ROOT_TYPE;\nvar _require3 = require('./ResolverCache'),\n  RecordResolverCache = _require3.RecordResolverCache;\nvar invariant = require('invariant');\nvar DEFAULT_RELEASE_BUFFER_SIZE = 10;\nvar RelayModernStore = /*#__PURE__*/function () {\n  function RelayModernStore(source, options) {\n    var _this = this;\n    var _options$gcReleaseBuf, _options$gcScheduler, _options$getDataID, _options$log, _options$operationLoa;\n    (0, _defineProperty2[\"default\"])(this, \"_gcStep\", function () {\n      if (_this._gcRun) {\n        if (_this._gcRun.next().done) {\n          _this._gcRun = null;\n        } else {\n          _this._gcScheduler(_this._gcStep);\n        }\n      }\n    });\n    if (process.env.NODE_ENV !== \"production\") {\n      var storeIDs = source.getRecordIDs();\n      for (var ii = 0; ii < storeIDs.length; ii++) {\n        var record = source.get(storeIDs[ii]);\n        if (record) {\n          RelayModernRecord.freeze(record);\n        }\n      }\n    }\n    this._currentWriteEpoch = 0;\n    this._gcHoldCounter = 0;\n    this._gcReleaseBufferSize = (_options$gcReleaseBuf = options === null || options === void 0 ? void 0 : options.gcReleaseBufferSize) !== null && _options$gcReleaseBuf !== void 0 ? _options$gcReleaseBuf : DEFAULT_RELEASE_BUFFER_SIZE;\n    this._gcRun = null;\n    this._gcScheduler = (_options$gcScheduler = options === null || options === void 0 ? void 0 : options.gcScheduler) !== null && _options$gcScheduler !== void 0 ? _options$gcScheduler : resolveImmediate;\n    this._getDataID = (_options$getDataID = options === null || options === void 0 ? void 0 : options.getDataID) !== null && _options$getDataID !== void 0 ? _options$getDataID : defaultGetDataID;\n    this._globalInvalidationEpoch = null;\n    this._invalidationSubscriptions = new Set();\n    this._invalidatedRecordIDs = new Set();\n    this.__log = (_options$log = options === null || options === void 0 ? void 0 : options.log) !== null && _options$log !== void 0 ? _options$log : null;\n    this._queryCacheExpirationTime = options === null || options === void 0 ? void 0 : options.queryCacheExpirationTime;\n    this._operationLoader = (_options$operationLoa = options === null || options === void 0 ? void 0 : options.operationLoader) !== null && _options$operationLoa !== void 0 ? _options$operationLoa : null;\n    this._optimisticSource = null;\n    this._recordSource = source;\n    this._releaseBuffer = [];\n    this._roots = new Map();\n    this._shouldScheduleGC = false;\n    this._resolverCache = new RecordResolverCache(function () {\n      return _this._getMutableRecordSource();\n    });\n    this._storeSubscriptions = new RelayStoreSubscriptions(options === null || options === void 0 ? void 0 : options.log, this._resolverCache);\n    this._updatedRecordIDs = new Set();\n    this._shouldProcessClientComponents = options === null || options === void 0 ? void 0 : options.shouldProcessClientComponents;\n    initializeRecordSource(this._recordSource);\n  }\n  var _proto = RelayModernStore.prototype;\n  _proto.getSource = function getSource() {\n    var _this$_optimisticSour;\n    return (_this$_optimisticSour = this._optimisticSource) !== null && _this$_optimisticSour !== void 0 ? _this$_optimisticSour : this._recordSource;\n  };\n  _proto._getMutableRecordSource = function _getMutableRecordSource() {\n    var _this$_optimisticSour2;\n    return (_this$_optimisticSour2 = this._optimisticSource) !== null && _this$_optimisticSour2 !== void 0 ? _this$_optimisticSour2 : this._recordSource;\n  };\n  _proto.check = function check(operation, options) {\n    var _options$handlers, _options$getSourceFor, _options$getTargetFor, _options$defaultActor;\n    var selector = operation.root;\n    var source = this._getMutableRecordSource();\n    var globalInvalidationEpoch = this._globalInvalidationEpoch;\n    var rootEntry = this._roots.get(operation.request.identifier);\n    var operationLastWrittenAt = rootEntry != null ? rootEntry.epoch : null;\n    if (globalInvalidationEpoch != null) {\n      if (operationLastWrittenAt == null || operationLastWrittenAt <= globalInvalidationEpoch) {\n        return {\n          status: 'stale'\n        };\n      }\n    }\n    var handlers = (_options$handlers = options === null || options === void 0 ? void 0 : options.handlers) !== null && _options$handlers !== void 0 ? _options$handlers : [];\n    var getSourceForActor = (_options$getSourceFor = options === null || options === void 0 ? void 0 : options.getSourceForActor) !== null && _options$getSourceFor !== void 0 ? _options$getSourceFor : function (actorIdentifier) {\n      assertInternalActorIdentifier(actorIdentifier);\n      return source;\n    };\n    var getTargetForActor = (_options$getTargetFor = options === null || options === void 0 ? void 0 : options.getTargetForActor) !== null && _options$getTargetFor !== void 0 ? _options$getTargetFor : function (actorIdentifier) {\n      assertInternalActorIdentifier(actorIdentifier);\n      return source;\n    };\n    var operationAvailability = DataChecker.check(getSourceForActor, getTargetForActor, (_options$defaultActor = options === null || options === void 0 ? void 0 : options.defaultActorIdentifier) !== null && _options$defaultActor !== void 0 ? _options$defaultActor : INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE, selector, handlers, this._operationLoader, this._getDataID, this._shouldProcessClientComponents);\n    return getAvailabilityStatus(operationAvailability, operationLastWrittenAt, rootEntry === null || rootEntry === void 0 ? void 0 : rootEntry.fetchTime, this._queryCacheExpirationTime);\n  };\n  _proto.retain = function retain(operation) {\n    var _this2 = this;\n    var id = operation.request.identifier;\n    var disposed = false;\n    var dispose = function dispose() {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      var rootEntry = _this2._roots.get(id);\n      if (rootEntry == null) {\n        return;\n      }\n      rootEntry.refCount--;\n      if (rootEntry.refCount === 0) {\n        var _queryCacheExpirationTime = _this2._queryCacheExpirationTime;\n        var rootEntryIsStale = rootEntry.fetchTime != null && _queryCacheExpirationTime != null && rootEntry.fetchTime <= Date.now() - _queryCacheExpirationTime;\n        if (rootEntryIsStale) {\n          _this2._roots[\"delete\"](id);\n          _this2.scheduleGC();\n        } else {\n          _this2._releaseBuffer.push(id);\n          if (_this2._releaseBuffer.length > _this2._gcReleaseBufferSize) {\n            var _id = _this2._releaseBuffer.shift();\n            _this2._roots[\"delete\"](_id);\n            _this2.scheduleGC();\n          }\n        }\n      }\n    };\n    var rootEntry = this._roots.get(id);\n    if (rootEntry != null) {\n      if (rootEntry.refCount === 0) {\n        this._releaseBuffer = this._releaseBuffer.filter(function (_id) {\n          return _id !== id;\n        });\n      }\n      rootEntry.refCount += 1;\n    } else {\n      this._roots.set(id, {\n        operation: operation,\n        refCount: 1,\n        epoch: null,\n        fetchTime: null\n      });\n    }\n    return {\n      dispose: dispose\n    };\n  };\n  _proto.lookup = function lookup(selector) {\n    var source = this.getSource();\n    var snapshot = RelayReader.read(source, selector, this._resolverCache);\n    if (process.env.NODE_ENV !== \"production\") {\n      deepFreeze(snapshot);\n    }\n    return snapshot;\n  };\n  _proto.notify = function notify(sourceOperation, invalidateStore) {\n    var _this3 = this;\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.notify.start',\n        sourceOperation: sourceOperation\n      });\n    }\n    this._currentWriteEpoch++;\n    if (invalidateStore === true) {\n      this._globalInvalidationEpoch = this._currentWriteEpoch;\n    }\n    if (RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n      this._resolverCache.invalidateDataIDs(this._updatedRecordIDs);\n    }\n    var source = this.getSource();\n    var updatedOwners = [];\n    this._storeSubscriptions.updateSubscriptions(source, this._updatedRecordIDs, updatedOwners, sourceOperation);\n    this._invalidationSubscriptions.forEach(function (subscription) {\n      _this3._updateInvalidationSubscription(subscription, invalidateStore === true);\n    });\n    if (log != null) {\n      log({\n        name: 'store.notify.complete',\n        sourceOperation: sourceOperation,\n        updatedRecordIDs: this._updatedRecordIDs,\n        invalidatedRecordIDs: this._invalidatedRecordIDs\n      });\n    }\n    this._updatedRecordIDs.clear();\n    this._invalidatedRecordIDs.clear();\n    if (sourceOperation != null) {\n      var id = sourceOperation.request.identifier;\n      var rootEntry = this._roots.get(id);\n      if (rootEntry != null) {\n        rootEntry.epoch = this._currentWriteEpoch;\n        rootEntry.fetchTime = Date.now();\n      } else if (sourceOperation.request.node.params.operationKind === 'query' && this._gcReleaseBufferSize > 0 && this._releaseBuffer.length < this._gcReleaseBufferSize) {\n        var temporaryRootEntry = {\n          operation: sourceOperation,\n          refCount: 0,\n          epoch: this._currentWriteEpoch,\n          fetchTime: Date.now()\n        };\n        this._releaseBuffer.push(id);\n        this._roots.set(id, temporaryRootEntry);\n      }\n    }\n    return updatedOwners;\n  };\n  _proto.publish = function publish(source, idsMarkedForInvalidation) {\n    var target = this._getMutableRecordSource();\n    updateTargetFromSource(target, source, this._currentWriteEpoch + 1, idsMarkedForInvalidation, this._updatedRecordIDs, this._invalidatedRecordIDs);\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.publish',\n        source: source,\n        optimistic: target === this._optimisticSource\n      });\n    }\n  };\n  _proto.subscribe = function subscribe(snapshot, callback) {\n    return this._storeSubscriptions.subscribe(snapshot, callback);\n  };\n  _proto.holdGC = function holdGC() {\n    var _this4 = this;\n    if (this._gcRun) {\n      this._gcRun = null;\n      this._shouldScheduleGC = true;\n    }\n    this._gcHoldCounter++;\n    var dispose = function dispose() {\n      if (_this4._gcHoldCounter > 0) {\n        _this4._gcHoldCounter--;\n        if (_this4._gcHoldCounter === 0 && _this4._shouldScheduleGC) {\n          _this4.scheduleGC();\n          _this4._shouldScheduleGC = false;\n        }\n      }\n    };\n    return {\n      dispose: dispose\n    };\n  };\n  _proto.toJSON = function toJSON() {\n    return 'RelayModernStore()';\n  };\n  _proto.getEpoch = function getEpoch() {\n    return this._currentWriteEpoch;\n  };\n  _proto.__getUpdatedRecordIDs = function __getUpdatedRecordIDs() {\n    return this._updatedRecordIDs;\n  };\n  _proto.lookupInvalidationState = function lookupInvalidationState(dataIDs) {\n    var _this5 = this;\n    var invalidations = new Map();\n    dataIDs.forEach(function (dataID) {\n      var _RelayModernRecord$ge;\n      var record = _this5.getSource().get(dataID);\n      invalidations.set(dataID, (_RelayModernRecord$ge = RelayModernRecord.getInvalidationEpoch(record)) !== null && _RelayModernRecord$ge !== void 0 ? _RelayModernRecord$ge : null);\n    });\n    invalidations.set('global', this._globalInvalidationEpoch);\n    return {\n      dataIDs: dataIDs,\n      invalidations: invalidations\n    };\n  };\n  _proto.checkInvalidationState = function checkInvalidationState(prevInvalidationState) {\n    var latestInvalidationState = this.lookupInvalidationState(prevInvalidationState.dataIDs);\n    var currentInvalidations = latestInvalidationState.invalidations;\n    var prevInvalidations = prevInvalidationState.invalidations;\n    if (currentInvalidations.get('global') !== prevInvalidations.get('global')) {\n      return true;\n    }\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(prevInvalidationState.dataIDs),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var dataID = _step.value;\n        if (currentInvalidations.get(dataID) !== prevInvalidations.get(dataID)) {\n          return true;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return false;\n  };\n  _proto.subscribeToInvalidationState = function subscribeToInvalidationState(invalidationState, callback) {\n    var _this6 = this;\n    var subscription = {\n      callback: callback,\n      invalidationState: invalidationState\n    };\n    var dispose = function dispose() {\n      _this6._invalidationSubscriptions[\"delete\"](subscription);\n    };\n    this._invalidationSubscriptions.add(subscription);\n    return {\n      dispose: dispose\n    };\n  };\n  _proto._updateInvalidationSubscription = function _updateInvalidationSubscription(subscription, invalidatedStore) {\n    var _this7 = this;\n    var callback = subscription.callback,\n      invalidationState = subscription.invalidationState;\n    var dataIDs = invalidationState.dataIDs;\n    var isSubscribedToInvalidatedIDs = invalidatedStore || dataIDs.some(function (dataID) {\n      return _this7._invalidatedRecordIDs.has(dataID);\n    });\n    if (!isSubscribedToInvalidatedIDs) {\n      return;\n    }\n    callback();\n  };\n  _proto.snapshot = function snapshot() {\n    !(this._optimisticSource == null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernStore: Unexpected call to snapshot() while a previous ' + 'snapshot exists.') : invariant(false) : void 0;\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.snapshot'\n      });\n    }\n    this._storeSubscriptions.snapshotSubscriptions(this.getSource());\n    if (this._gcRun) {\n      this._gcRun = null;\n      this._shouldScheduleGC = true;\n    }\n    this._optimisticSource = RelayOptimisticRecordSource.create(this.getSource());\n  };\n  _proto.restore = function restore() {\n    !(this._optimisticSource != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernStore: Unexpected call to restore(), expected a snapshot ' + 'to exist (make sure to call snapshot()).') : invariant(false) : void 0;\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.restore'\n      });\n    }\n    this._optimisticSource = null;\n    if (this._shouldScheduleGC) {\n      this.scheduleGC();\n    }\n    this._storeSubscriptions.restoreSubscriptions();\n  };\n  _proto.scheduleGC = function scheduleGC() {\n    if (this._gcHoldCounter > 0) {\n      this._shouldScheduleGC = true;\n      return;\n    }\n    if (this._gcRun) {\n      return;\n    }\n    this._gcRun = this._collect();\n    this._gcScheduler(this._gcStep);\n  };\n  _proto.__gc = function __gc() {\n    if (this._optimisticSource != null) {\n      return;\n    }\n    var gcRun = this._collect();\n    while (!gcRun.next().done) {}\n  };\n  _proto._collect = function* _collect() {\n    top: while (true) {\n      var startEpoch = this._currentWriteEpoch;\n      var references = new Set();\n      var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(this._roots.values()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var operation = _step2.value.operation;\n          var selector = operation.root;\n          RelayReferenceMarker.mark(this._recordSource, selector, references, this._operationLoader, this._shouldProcessClientComponents);\n          yield;\n          if (startEpoch !== this._currentWriteEpoch) {\n            continue top;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var log = this.__log;\n      if (log != null) {\n        log({\n          name: 'store.gc',\n          references: references\n        });\n      }\n      if (references.size === 0) {\n        this._recordSource.clear();\n      } else {\n        var storeIDs = this._recordSource.getRecordIDs();\n        for (var ii = 0; ii < storeIDs.length; ii++) {\n          var dataID = storeIDs[ii];\n          if (!references.has(dataID)) {\n            this._recordSource.remove(dataID);\n          }\n        }\n      }\n      return;\n    }\n  };\n  return RelayModernStore;\n}();\nfunction initializeRecordSource(target) {\n  if (!target.has(ROOT_ID)) {\n    var rootRecord = RelayModernRecord.create(ROOT_ID, ROOT_TYPE);\n    target.set(ROOT_ID, rootRecord);\n  }\n}\nfunction updateTargetFromSource(target, source, currentWriteEpoch, idsMarkedForInvalidation, updatedRecordIDs, invalidatedRecordIDs) {\n  if (idsMarkedForInvalidation) {\n    idsMarkedForInvalidation.forEach(function (dataID) {\n      var targetRecord = target.get(dataID);\n      var sourceRecord = source.get(dataID);\n      if (sourceRecord === null) {\n        return;\n      }\n      var nextRecord;\n      if (targetRecord != null) {\n        nextRecord = RelayModernRecord.clone(targetRecord);\n      } else {\n        nextRecord = sourceRecord != null ? RelayModernRecord.clone(sourceRecord) : null;\n      }\n      if (!nextRecord) {\n        return;\n      }\n      RelayModernRecord.setValue(nextRecord, RelayStoreUtils.INVALIDATED_AT_KEY, currentWriteEpoch);\n      invalidatedRecordIDs.add(dataID);\n      target.set(dataID, nextRecord);\n    });\n  }\n  var dataIDs = source.getRecordIDs();\n  for (var ii = 0; ii < dataIDs.length; ii++) {\n    var dataID = dataIDs[ii];\n    var sourceRecord = source.get(dataID);\n    var targetRecord = target.get(dataID);\n    if (process.env.NODE_ENV !== \"production\") {\n      if (sourceRecord) {\n        RelayModernRecord.freeze(sourceRecord);\n      }\n    }\n    if (sourceRecord && targetRecord) {\n      var nextRecord = RelayModernRecord.update(targetRecord, sourceRecord);\n      if (nextRecord !== targetRecord) {\n        if (process.env.NODE_ENV !== \"production\") {\n          RelayModernRecord.freeze(nextRecord);\n        }\n        updatedRecordIDs.add(dataID);\n        target.set(dataID, nextRecord);\n      }\n    } else if (sourceRecord === null) {\n      target[\"delete\"](dataID);\n      if (targetRecord !== null) {\n        updatedRecordIDs.add(dataID);\n      }\n    } else if (sourceRecord) {\n      target.set(dataID, sourceRecord);\n      updatedRecordIDs.add(dataID);\n    }\n  }\n}\nfunction getAvailabilityStatus(operationAvailability, operationLastWrittenAt, operationFetchTime, queryCacheExpirationTime) {\n  var mostRecentlyInvalidatedAt = operationAvailability.mostRecentlyInvalidatedAt,\n    status = operationAvailability.status;\n  if (typeof mostRecentlyInvalidatedAt === 'number') {\n    if (operationLastWrittenAt == null || mostRecentlyInvalidatedAt > operationLastWrittenAt) {\n      return {\n        status: 'stale'\n      };\n    }\n  }\n  if (status === 'missing') {\n    return {\n      status: 'missing'\n    };\n  }\n  if (operationFetchTime != null && queryCacheExpirationTime != null) {\n    var isStale = operationFetchTime <= Date.now() - queryCacheExpirationTime;\n    if (isStale) {\n      return {\n        status: 'stale'\n      };\n    }\n  }\n  return {\n    status: 'available',\n    fetchTime: operationFetchTime !== null && operationFetchTime !== void 0 ? operationFetchTime : null\n  };\n}\nmodule.exports = RelayModernStore;","map":{"version":3,"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","_defineProperty2","_require","INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE","assertInternalActorIdentifier","deepFreeze","RelayFeatureFlags","resolveImmediate","DataChecker","defaultGetDataID","RelayModernRecord","RelayOptimisticRecordSource","RelayReader","RelayReferenceMarker","RelayStoreSubscriptions","RelayStoreUtils","_require2","ROOT_ID","ROOT_TYPE","_require3","RecordResolverCache","invariant","DEFAULT_RELEASE_BUFFER_SIZE","RelayModernStore","source","options","_this","_options$gcReleaseBuf","_options$gcScheduler","_options$getDataID","_options$log","_options$operationLoa","_gcRun","next","done","_gcScheduler","_gcStep","process","env","NODE_ENV","storeIDs","getRecordIDs","ii","length","record","get","freeze","_currentWriteEpoch","_gcHoldCounter","_gcReleaseBufferSize","gcReleaseBufferSize","gcScheduler","_getDataID","getDataID","_globalInvalidationEpoch","_invalidationSubscriptions","Set","_invalidatedRecordIDs","__log","log","_queryCacheExpirationTime","queryCacheExpirationTime","_operationLoader","operationLoader","_optimisticSource","_recordSource","_releaseBuffer","_roots","Map","_shouldScheduleGC","_resolverCache","_getMutableRecordSource","_storeSubscriptions","_updatedRecordIDs","_shouldProcessClientComponents","shouldProcessClientComponents","initializeRecordSource","_proto","prototype","getSource","_this$_optimisticSour","_this$_optimisticSour2","check","operation","_options$handlers","_options$getSourceFor","_options$getTargetFor","_options$defaultActor","selector","root","globalInvalidationEpoch","rootEntry","request","identifier","operationLastWrittenAt","epoch","status","handlers","getSourceForActor","actorIdentifier","getTargetForActor","operationAvailability","defaultActorIdentifier","getAvailabilityStatus","fetchTime","retain","_this2","id","disposed","dispose","refCount","rootEntryIsStale","Date","now","scheduleGC","push","_id","shift","filter","set","lookup","snapshot","read","notify","sourceOperation","invalidateStore","_this3","name","ENABLE_RELAY_RESOLVERS","invalidateDataIDs","updatedOwners","updateSubscriptions","forEach","subscription","_updateInvalidationSubscription","updatedRecordIDs","invalidatedRecordIDs","clear","node","params","operationKind","temporaryRootEntry","publish","idsMarkedForInvalidation","target","updateTargetFromSource","optimistic","subscribe","callback","holdGC","_this4","toJSON","getEpoch","__getUpdatedRecordIDs","lookupInvalidationState","dataIDs","_this5","invalidations","dataID","_RelayModernRecord$ge","getInvalidationEpoch","checkInvalidationState","prevInvalidationState","latestInvalidationState","currentInvalidations","prevInvalidations","_iterator","_step","s","n","value","err","e","f","subscribeToInvalidationState","invalidationState","_this6","add","invalidatedStore","_this7","isSubscribedToInvalidatedIDs","some","has","snapshotSubscriptions","create","restore","restoreSubscriptions","_collect","__gc","gcRun","top","startEpoch","references","_iterator2","values","_step2","mark","size","remove","rootRecord","currentWriteEpoch","targetRecord","sourceRecord","nextRecord","clone","setValue","INVALIDATED_AT_KEY","update","operationFetchTime","mostRecentlyInvalidatedAt","isStale","module","exports"],"sources":["/Users/joaoluismoraes/Desktop/woovi-challenge/web/node_modules/relay-runtime/lib/store/RelayModernStore.js"],"sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _require = require('../multi-actor-environment/ActorIdentifier'),\n  INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = _require.INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE,\n  assertInternalActorIdentifier = _require.assertInternalActorIdentifier;\nvar deepFreeze = require('../util/deepFreeze');\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\nvar resolveImmediate = require('../util/resolveImmediate');\nvar DataChecker = require('./DataChecker');\nvar defaultGetDataID = require('./defaultGetDataID');\nvar RelayModernRecord = require('./RelayModernRecord');\nvar RelayOptimisticRecordSource = require('./RelayOptimisticRecordSource');\nvar RelayReader = require('./RelayReader');\nvar RelayReferenceMarker = require('./RelayReferenceMarker');\nvar RelayStoreSubscriptions = require('./RelayStoreSubscriptions');\nvar RelayStoreUtils = require('./RelayStoreUtils');\nvar _require2 = require('./RelayStoreUtils'),\n  ROOT_ID = _require2.ROOT_ID,\n  ROOT_TYPE = _require2.ROOT_TYPE;\nvar _require3 = require('./ResolverCache'),\n  RecordResolverCache = _require3.RecordResolverCache;\nvar invariant = require('invariant');\nvar DEFAULT_RELEASE_BUFFER_SIZE = 10;\nvar RelayModernStore = /*#__PURE__*/function () {\n  function RelayModernStore(source, options) {\n    var _this = this;\n    var _options$gcReleaseBuf, _options$gcScheduler, _options$getDataID, _options$log, _options$operationLoa;\n    (0, _defineProperty2[\"default\"])(this, \"_gcStep\", function () {\n      if (_this._gcRun) {\n        if (_this._gcRun.next().done) {\n          _this._gcRun = null;\n        } else {\n          _this._gcScheduler(_this._gcStep);\n        }\n      }\n    });\n    if (process.env.NODE_ENV !== \"production\") {\n      var storeIDs = source.getRecordIDs();\n      for (var ii = 0; ii < storeIDs.length; ii++) {\n        var record = source.get(storeIDs[ii]);\n        if (record) {\n          RelayModernRecord.freeze(record);\n        }\n      }\n    }\n    this._currentWriteEpoch = 0;\n    this._gcHoldCounter = 0;\n    this._gcReleaseBufferSize = (_options$gcReleaseBuf = options === null || options === void 0 ? void 0 : options.gcReleaseBufferSize) !== null && _options$gcReleaseBuf !== void 0 ? _options$gcReleaseBuf : DEFAULT_RELEASE_BUFFER_SIZE;\n    this._gcRun = null;\n    this._gcScheduler = (_options$gcScheduler = options === null || options === void 0 ? void 0 : options.gcScheduler) !== null && _options$gcScheduler !== void 0 ? _options$gcScheduler : resolveImmediate;\n    this._getDataID = (_options$getDataID = options === null || options === void 0 ? void 0 : options.getDataID) !== null && _options$getDataID !== void 0 ? _options$getDataID : defaultGetDataID;\n    this._globalInvalidationEpoch = null;\n    this._invalidationSubscriptions = new Set();\n    this._invalidatedRecordIDs = new Set();\n    this.__log = (_options$log = options === null || options === void 0 ? void 0 : options.log) !== null && _options$log !== void 0 ? _options$log : null;\n    this._queryCacheExpirationTime = options === null || options === void 0 ? void 0 : options.queryCacheExpirationTime;\n    this._operationLoader = (_options$operationLoa = options === null || options === void 0 ? void 0 : options.operationLoader) !== null && _options$operationLoa !== void 0 ? _options$operationLoa : null;\n    this._optimisticSource = null;\n    this._recordSource = source;\n    this._releaseBuffer = [];\n    this._roots = new Map();\n    this._shouldScheduleGC = false;\n    this._resolverCache = new RecordResolverCache(function () {\n      return _this._getMutableRecordSource();\n    });\n    this._storeSubscriptions = new RelayStoreSubscriptions(options === null || options === void 0 ? void 0 : options.log, this._resolverCache);\n    this._updatedRecordIDs = new Set();\n    this._shouldProcessClientComponents = options === null || options === void 0 ? void 0 : options.shouldProcessClientComponents;\n    initializeRecordSource(this._recordSource);\n  }\n  var _proto = RelayModernStore.prototype;\n  _proto.getSource = function getSource() {\n    var _this$_optimisticSour;\n    return (_this$_optimisticSour = this._optimisticSource) !== null && _this$_optimisticSour !== void 0 ? _this$_optimisticSour : this._recordSource;\n  };\n  _proto._getMutableRecordSource = function _getMutableRecordSource() {\n    var _this$_optimisticSour2;\n    return (_this$_optimisticSour2 = this._optimisticSource) !== null && _this$_optimisticSour2 !== void 0 ? _this$_optimisticSour2 : this._recordSource;\n  };\n  _proto.check = function check(operation, options) {\n    var _options$handlers, _options$getSourceFor, _options$getTargetFor, _options$defaultActor;\n    var selector = operation.root;\n    var source = this._getMutableRecordSource();\n    var globalInvalidationEpoch = this._globalInvalidationEpoch;\n    var rootEntry = this._roots.get(operation.request.identifier);\n    var operationLastWrittenAt = rootEntry != null ? rootEntry.epoch : null;\n    if (globalInvalidationEpoch != null) {\n      if (operationLastWrittenAt == null || operationLastWrittenAt <= globalInvalidationEpoch) {\n        return {\n          status: 'stale'\n        };\n      }\n    }\n    var handlers = (_options$handlers = options === null || options === void 0 ? void 0 : options.handlers) !== null && _options$handlers !== void 0 ? _options$handlers : [];\n    var getSourceForActor = (_options$getSourceFor = options === null || options === void 0 ? void 0 : options.getSourceForActor) !== null && _options$getSourceFor !== void 0 ? _options$getSourceFor : function (actorIdentifier) {\n      assertInternalActorIdentifier(actorIdentifier);\n      return source;\n    };\n    var getTargetForActor = (_options$getTargetFor = options === null || options === void 0 ? void 0 : options.getTargetForActor) !== null && _options$getTargetFor !== void 0 ? _options$getTargetFor : function (actorIdentifier) {\n      assertInternalActorIdentifier(actorIdentifier);\n      return source;\n    };\n    var operationAvailability = DataChecker.check(getSourceForActor, getTargetForActor, (_options$defaultActor = options === null || options === void 0 ? void 0 : options.defaultActorIdentifier) !== null && _options$defaultActor !== void 0 ? _options$defaultActor : INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE, selector, handlers, this._operationLoader, this._getDataID, this._shouldProcessClientComponents);\n    return getAvailabilityStatus(operationAvailability, operationLastWrittenAt, rootEntry === null || rootEntry === void 0 ? void 0 : rootEntry.fetchTime, this._queryCacheExpirationTime);\n  };\n  _proto.retain = function retain(operation) {\n    var _this2 = this;\n    var id = operation.request.identifier;\n    var disposed = false;\n    var dispose = function dispose() {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      var rootEntry = _this2._roots.get(id);\n      if (rootEntry == null) {\n        return;\n      }\n      rootEntry.refCount--;\n      if (rootEntry.refCount === 0) {\n        var _queryCacheExpirationTime = _this2._queryCacheExpirationTime;\n        var rootEntryIsStale = rootEntry.fetchTime != null && _queryCacheExpirationTime != null && rootEntry.fetchTime <= Date.now() - _queryCacheExpirationTime;\n        if (rootEntryIsStale) {\n          _this2._roots[\"delete\"](id);\n          _this2.scheduleGC();\n        } else {\n          _this2._releaseBuffer.push(id);\n          if (_this2._releaseBuffer.length > _this2._gcReleaseBufferSize) {\n            var _id = _this2._releaseBuffer.shift();\n            _this2._roots[\"delete\"](_id);\n            _this2.scheduleGC();\n          }\n        }\n      }\n    };\n    var rootEntry = this._roots.get(id);\n    if (rootEntry != null) {\n      if (rootEntry.refCount === 0) {\n        this._releaseBuffer = this._releaseBuffer.filter(function (_id) {\n          return _id !== id;\n        });\n      }\n      rootEntry.refCount += 1;\n    } else {\n      this._roots.set(id, {\n        operation: operation,\n        refCount: 1,\n        epoch: null,\n        fetchTime: null\n      });\n    }\n    return {\n      dispose: dispose\n    };\n  };\n  _proto.lookup = function lookup(selector) {\n    var source = this.getSource();\n    var snapshot = RelayReader.read(source, selector, this._resolverCache);\n    if (process.env.NODE_ENV !== \"production\") {\n      deepFreeze(snapshot);\n    }\n    return snapshot;\n  };\n  _proto.notify = function notify(sourceOperation, invalidateStore) {\n    var _this3 = this;\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.notify.start',\n        sourceOperation: sourceOperation\n      });\n    }\n    this._currentWriteEpoch++;\n    if (invalidateStore === true) {\n      this._globalInvalidationEpoch = this._currentWriteEpoch;\n    }\n    if (RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {\n      this._resolverCache.invalidateDataIDs(this._updatedRecordIDs);\n    }\n    var source = this.getSource();\n    var updatedOwners = [];\n    this._storeSubscriptions.updateSubscriptions(source, this._updatedRecordIDs, updatedOwners, sourceOperation);\n    this._invalidationSubscriptions.forEach(function (subscription) {\n      _this3._updateInvalidationSubscription(subscription, invalidateStore === true);\n    });\n    if (log != null) {\n      log({\n        name: 'store.notify.complete',\n        sourceOperation: sourceOperation,\n        updatedRecordIDs: this._updatedRecordIDs,\n        invalidatedRecordIDs: this._invalidatedRecordIDs\n      });\n    }\n    this._updatedRecordIDs.clear();\n    this._invalidatedRecordIDs.clear();\n    if (sourceOperation != null) {\n      var id = sourceOperation.request.identifier;\n      var rootEntry = this._roots.get(id);\n      if (rootEntry != null) {\n        rootEntry.epoch = this._currentWriteEpoch;\n        rootEntry.fetchTime = Date.now();\n      } else if (sourceOperation.request.node.params.operationKind === 'query' && this._gcReleaseBufferSize > 0 && this._releaseBuffer.length < this._gcReleaseBufferSize) {\n        var temporaryRootEntry = {\n          operation: sourceOperation,\n          refCount: 0,\n          epoch: this._currentWriteEpoch,\n          fetchTime: Date.now()\n        };\n        this._releaseBuffer.push(id);\n        this._roots.set(id, temporaryRootEntry);\n      }\n    }\n    return updatedOwners;\n  };\n  _proto.publish = function publish(source, idsMarkedForInvalidation) {\n    var target = this._getMutableRecordSource();\n    updateTargetFromSource(target, source, this._currentWriteEpoch + 1, idsMarkedForInvalidation, this._updatedRecordIDs, this._invalidatedRecordIDs);\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.publish',\n        source: source,\n        optimistic: target === this._optimisticSource\n      });\n    }\n  };\n  _proto.subscribe = function subscribe(snapshot, callback) {\n    return this._storeSubscriptions.subscribe(snapshot, callback);\n  };\n  _proto.holdGC = function holdGC() {\n    var _this4 = this;\n    if (this._gcRun) {\n      this._gcRun = null;\n      this._shouldScheduleGC = true;\n    }\n    this._gcHoldCounter++;\n    var dispose = function dispose() {\n      if (_this4._gcHoldCounter > 0) {\n        _this4._gcHoldCounter--;\n        if (_this4._gcHoldCounter === 0 && _this4._shouldScheduleGC) {\n          _this4.scheduleGC();\n          _this4._shouldScheduleGC = false;\n        }\n      }\n    };\n    return {\n      dispose: dispose\n    };\n  };\n  _proto.toJSON = function toJSON() {\n    return 'RelayModernStore()';\n  };\n  _proto.getEpoch = function getEpoch() {\n    return this._currentWriteEpoch;\n  };\n  _proto.__getUpdatedRecordIDs = function __getUpdatedRecordIDs() {\n    return this._updatedRecordIDs;\n  };\n  _proto.lookupInvalidationState = function lookupInvalidationState(dataIDs) {\n    var _this5 = this;\n    var invalidations = new Map();\n    dataIDs.forEach(function (dataID) {\n      var _RelayModernRecord$ge;\n      var record = _this5.getSource().get(dataID);\n      invalidations.set(dataID, (_RelayModernRecord$ge = RelayModernRecord.getInvalidationEpoch(record)) !== null && _RelayModernRecord$ge !== void 0 ? _RelayModernRecord$ge : null);\n    });\n    invalidations.set('global', this._globalInvalidationEpoch);\n    return {\n      dataIDs: dataIDs,\n      invalidations: invalidations\n    };\n  };\n  _proto.checkInvalidationState = function checkInvalidationState(prevInvalidationState) {\n    var latestInvalidationState = this.lookupInvalidationState(prevInvalidationState.dataIDs);\n    var currentInvalidations = latestInvalidationState.invalidations;\n    var prevInvalidations = prevInvalidationState.invalidations;\n    if (currentInvalidations.get('global') !== prevInvalidations.get('global')) {\n      return true;\n    }\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(prevInvalidationState.dataIDs),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var dataID = _step.value;\n        if (currentInvalidations.get(dataID) !== prevInvalidations.get(dataID)) {\n          return true;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return false;\n  };\n  _proto.subscribeToInvalidationState = function subscribeToInvalidationState(invalidationState, callback) {\n    var _this6 = this;\n    var subscription = {\n      callback: callback,\n      invalidationState: invalidationState\n    };\n    var dispose = function dispose() {\n      _this6._invalidationSubscriptions[\"delete\"](subscription);\n    };\n    this._invalidationSubscriptions.add(subscription);\n    return {\n      dispose: dispose\n    };\n  };\n  _proto._updateInvalidationSubscription = function _updateInvalidationSubscription(subscription, invalidatedStore) {\n    var _this7 = this;\n    var callback = subscription.callback,\n      invalidationState = subscription.invalidationState;\n    var dataIDs = invalidationState.dataIDs;\n    var isSubscribedToInvalidatedIDs = invalidatedStore || dataIDs.some(function (dataID) {\n      return _this7._invalidatedRecordIDs.has(dataID);\n    });\n    if (!isSubscribedToInvalidatedIDs) {\n      return;\n    }\n    callback();\n  };\n  _proto.snapshot = function snapshot() {\n    !(this._optimisticSource == null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernStore: Unexpected call to snapshot() while a previous ' + 'snapshot exists.') : invariant(false) : void 0;\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.snapshot'\n      });\n    }\n    this._storeSubscriptions.snapshotSubscriptions(this.getSource());\n    if (this._gcRun) {\n      this._gcRun = null;\n      this._shouldScheduleGC = true;\n    }\n    this._optimisticSource = RelayOptimisticRecordSource.create(this.getSource());\n  };\n  _proto.restore = function restore() {\n    !(this._optimisticSource != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernStore: Unexpected call to restore(), expected a snapshot ' + 'to exist (make sure to call snapshot()).') : invariant(false) : void 0;\n    var log = this.__log;\n    if (log != null) {\n      log({\n        name: 'store.restore'\n      });\n    }\n    this._optimisticSource = null;\n    if (this._shouldScheduleGC) {\n      this.scheduleGC();\n    }\n    this._storeSubscriptions.restoreSubscriptions();\n  };\n  _proto.scheduleGC = function scheduleGC() {\n    if (this._gcHoldCounter > 0) {\n      this._shouldScheduleGC = true;\n      return;\n    }\n    if (this._gcRun) {\n      return;\n    }\n    this._gcRun = this._collect();\n    this._gcScheduler(this._gcStep);\n  };\n  _proto.__gc = function __gc() {\n    if (this._optimisticSource != null) {\n      return;\n    }\n    var gcRun = this._collect();\n    while (!gcRun.next().done) {}\n  };\n  _proto._collect = function* _collect() {\n    top: while (true) {\n      var startEpoch = this._currentWriteEpoch;\n      var references = new Set();\n      var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(this._roots.values()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var operation = _step2.value.operation;\n          var selector = operation.root;\n          RelayReferenceMarker.mark(this._recordSource, selector, references, this._operationLoader, this._shouldProcessClientComponents);\n          yield;\n          if (startEpoch !== this._currentWriteEpoch) {\n            continue top;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var log = this.__log;\n      if (log != null) {\n        log({\n          name: 'store.gc',\n          references: references\n        });\n      }\n      if (references.size === 0) {\n        this._recordSource.clear();\n      } else {\n        var storeIDs = this._recordSource.getRecordIDs();\n        for (var ii = 0; ii < storeIDs.length; ii++) {\n          var dataID = storeIDs[ii];\n          if (!references.has(dataID)) {\n            this._recordSource.remove(dataID);\n          }\n        }\n      }\n      return;\n    }\n  };\n  return RelayModernStore;\n}();\nfunction initializeRecordSource(target) {\n  if (!target.has(ROOT_ID)) {\n    var rootRecord = RelayModernRecord.create(ROOT_ID, ROOT_TYPE);\n    target.set(ROOT_ID, rootRecord);\n  }\n}\nfunction updateTargetFromSource(target, source, currentWriteEpoch, idsMarkedForInvalidation, updatedRecordIDs, invalidatedRecordIDs) {\n  if (idsMarkedForInvalidation) {\n    idsMarkedForInvalidation.forEach(function (dataID) {\n      var targetRecord = target.get(dataID);\n      var sourceRecord = source.get(dataID);\n      if (sourceRecord === null) {\n        return;\n      }\n      var nextRecord;\n      if (targetRecord != null) {\n        nextRecord = RelayModernRecord.clone(targetRecord);\n      } else {\n        nextRecord = sourceRecord != null ? RelayModernRecord.clone(sourceRecord) : null;\n      }\n      if (!nextRecord) {\n        return;\n      }\n      RelayModernRecord.setValue(nextRecord, RelayStoreUtils.INVALIDATED_AT_KEY, currentWriteEpoch);\n      invalidatedRecordIDs.add(dataID);\n      target.set(dataID, nextRecord);\n    });\n  }\n  var dataIDs = source.getRecordIDs();\n  for (var ii = 0; ii < dataIDs.length; ii++) {\n    var dataID = dataIDs[ii];\n    var sourceRecord = source.get(dataID);\n    var targetRecord = target.get(dataID);\n    if (process.env.NODE_ENV !== \"production\") {\n      if (sourceRecord) {\n        RelayModernRecord.freeze(sourceRecord);\n      }\n    }\n    if (sourceRecord && targetRecord) {\n      var nextRecord = RelayModernRecord.update(targetRecord, sourceRecord);\n      if (nextRecord !== targetRecord) {\n        if (process.env.NODE_ENV !== \"production\") {\n          RelayModernRecord.freeze(nextRecord);\n        }\n        updatedRecordIDs.add(dataID);\n        target.set(dataID, nextRecord);\n      }\n    } else if (sourceRecord === null) {\n      target[\"delete\"](dataID);\n      if (targetRecord !== null) {\n        updatedRecordIDs.add(dataID);\n      }\n    } else if (sourceRecord) {\n      target.set(dataID, sourceRecord);\n      updatedRecordIDs.add(dataID);\n    }\n  }\n}\nfunction getAvailabilityStatus(operationAvailability, operationLastWrittenAt, operationFetchTime, queryCacheExpirationTime) {\n  var mostRecentlyInvalidatedAt = operationAvailability.mostRecentlyInvalidatedAt,\n    status = operationAvailability.status;\n  if (typeof mostRecentlyInvalidatedAt === 'number') {\n    if (operationLastWrittenAt == null || mostRecentlyInvalidatedAt > operationLastWrittenAt) {\n      return {\n        status: 'stale'\n      };\n    }\n  }\n  if (status === 'missing') {\n    return {\n      status: 'missing'\n    };\n  }\n  if (operationFetchTime != null && queryCacheExpirationTime != null) {\n    var isStale = operationFetchTime <= Date.now() - queryCacheExpirationTime;\n    if (isStale) {\n      return {\n        status: 'stale'\n      };\n    }\n  }\n  return {\n    status: 'available',\n    fetchTime: operationFetchTime !== null && operationFetchTime !== void 0 ? operationFetchTime : null\n  };\n}\nmodule.exports = RelayModernStore;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}