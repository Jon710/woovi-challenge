{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\nvar RelayObservable = require('../network/RelayObservable');\nvar _require = require('../store/RelayModernOperationDescriptor'),\n  createOperationDescriptor = _require.createOperationDescriptor;\nvar handlePotentialSnapshotErrors = require('../util/handlePotentialSnapshotErrors');\nvar fetchQueryInternal = require('./fetchQueryInternal');\nvar _require2 = require('./GraphQLTag'),\n  getRequest = _require2.getRequest;\nvar invariant = require('invariant');\nfunction fetchQuery(environment, query, variables, options) {\n  var _options$fetchPolicy;\n  var queryNode = getRequest(query);\n  !(queryNode.params.operationKind === 'query') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'fetchQuery: Expected query operation') : invariant(false) : void 0;\n  var networkCacheConfig = (0, _objectSpread2[\"default\"])({\n    force: true\n  }, options === null || options === void 0 ? void 0 : options.networkCacheConfig);\n  var operation = createOperationDescriptor(queryNode, variables, networkCacheConfig);\n  var fetchPolicy = (_options$fetchPolicy = options === null || options === void 0 ? void 0 : options.fetchPolicy) !== null && _options$fetchPolicy !== void 0 ? _options$fetchPolicy : 'network-only';\n  function readData(snapshot) {\n    handlePotentialSnapshotErrors(environment, snapshot.missingRequiredFields, snapshot.relayResolverErrors);\n    return snapshot.data;\n  }\n  switch (fetchPolicy) {\n    case 'network-only':\n      {\n        return getNetworkObservable(environment, operation).map(readData);\n      }\n    case 'store-or-network':\n      {\n        if (environment.check(operation).status === 'available') {\n          return RelayObservable.from(environment.lookup(operation.fragment)).map(readData);\n        }\n        return getNetworkObservable(environment, operation).map(readData);\n      }\n    default:\n      fetchPolicy;\n      throw new Error('fetchQuery: Invalid fetchPolicy ' + fetchPolicy);\n  }\n}\nfunction getNetworkObservable(environment, operation) {\n  return fetchQueryInternal.fetchQuery(environment, operation).map(function () {\n    return environment.lookup(operation.fragment);\n  });\n}\nmodule.exports = fetchQuery;","map":{"version":3,"names":["_interopRequireDefault","require","_objectSpread2","RelayObservable","_require","createOperationDescriptor","handlePotentialSnapshotErrors","fetchQueryInternal","_require2","getRequest","invariant","fetchQuery","environment","query","variables","options","_options$fetchPolicy","queryNode","params","operationKind","process","env","NODE_ENV","networkCacheConfig","force","operation","fetchPolicy","readData","snapshot","missingRequiredFields","relayResolverErrors","data","getNetworkObservable","map","check","status","from","lookup","fragment","Error","module","exports"],"sources":["/Users/joaoluismoraes/Desktop/woovi-challenge/web/node_modules/relay-runtime/lib/query/fetchQuery.js"],"sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\nvar RelayObservable = require('../network/RelayObservable');\nvar _require = require('../store/RelayModernOperationDescriptor'),\n  createOperationDescriptor = _require.createOperationDescriptor;\nvar handlePotentialSnapshotErrors = require('../util/handlePotentialSnapshotErrors');\nvar fetchQueryInternal = require('./fetchQueryInternal');\nvar _require2 = require('./GraphQLTag'),\n  getRequest = _require2.getRequest;\nvar invariant = require('invariant');\nfunction fetchQuery(environment, query, variables, options) {\n  var _options$fetchPolicy;\n  var queryNode = getRequest(query);\n  !(queryNode.params.operationKind === 'query') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'fetchQuery: Expected query operation') : invariant(false) : void 0;\n  var networkCacheConfig = (0, _objectSpread2[\"default\"])({\n    force: true\n  }, options === null || options === void 0 ? void 0 : options.networkCacheConfig);\n  var operation = createOperationDescriptor(queryNode, variables, networkCacheConfig);\n  var fetchPolicy = (_options$fetchPolicy = options === null || options === void 0 ? void 0 : options.fetchPolicy) !== null && _options$fetchPolicy !== void 0 ? _options$fetchPolicy : 'network-only';\n  function readData(snapshot) {\n    handlePotentialSnapshotErrors(environment, snapshot.missingRequiredFields, snapshot.relayResolverErrors);\n    return snapshot.data;\n  }\n  switch (fetchPolicy) {\n    case 'network-only':\n      {\n        return getNetworkObservable(environment, operation).map(readData);\n      }\n    case 'store-or-network':\n      {\n        if (environment.check(operation).status === 'available') {\n          return RelayObservable.from(environment.lookup(operation.fragment)).map(readData);\n        }\n        return getNetworkObservable(environment, operation).map(readData);\n      }\n    default:\n      fetchPolicy;\n      throw new Error('fetchQuery: Invalid fetchPolicy ' + fetchPolicy);\n  }\n}\nfunction getNetworkObservable(environment, operation) {\n  return fetchQueryInternal.fetchQuery(environment, operation).map(function () {\n    return environment.lookup(operation.fragment);\n  });\n}\nmodule.exports = fetchQuery;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}