{"ast":null,"code":"'use strict';\n\nvar _global$ErrorUtils$ap, _global$ErrorUtils;\nvar RelayRecordSourceMutator = require('../mutations/RelayRecordSourceMutator');\nvar RelayRecordSourceProxy = require('../mutations/RelayRecordSourceProxy');\nvar RelayRecordSourceSelectorProxy = require('../mutations/RelayRecordSourceSelectorProxy');\nvar RelayReader = require('./RelayReader');\nvar RelayRecordSource = require('./RelayRecordSource');\nvar invariant = require('invariant');\nvar warning = require(\"fbjs/lib/warning\");\nvar _global = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : undefined;\nvar applyWithGuard = (_global$ErrorUtils$ap = _global === null || _global === void 0 ? void 0 : (_global$ErrorUtils = _global.ErrorUtils) === null || _global$ErrorUtils === void 0 ? void 0 : _global$ErrorUtils.applyWithGuard) !== null && _global$ErrorUtils$ap !== void 0 ? _global$ErrorUtils$ap : function (callback, context, args, onError, name) {\n  return callback.apply(context, args);\n};\nvar RelayPublishQueue = /*#__PURE__*/function () {\n  function RelayPublishQueue(store, handlerProvider, getDataID, missingFieldHandlers) {\n    this._hasStoreSnapshot = false;\n    this._handlerProvider = handlerProvider || null;\n    this._pendingBackupRebase = false;\n    this._pendingData = new Set();\n    this._pendingOptimisticUpdates = new Set();\n    this._store = store;\n    this._appliedOptimisticUpdates = new Set();\n    this._gcHold = null;\n    this._getDataID = getDataID;\n    this._missingFieldHandlers = missingFieldHandlers;\n  }\n  var _proto = RelayPublishQueue.prototype;\n  _proto.applyUpdate = function applyUpdate(updater) {\n    !(!this._appliedOptimisticUpdates.has(updater) && !this._pendingOptimisticUpdates.has(updater)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayPublishQueue: Cannot apply the same update function more than ' + 'once concurrently.') : invariant(false) : void 0;\n    this._pendingOptimisticUpdates.add(updater);\n  };\n  _proto.revertUpdate = function revertUpdate(updater) {\n    if (this._pendingOptimisticUpdates.has(updater)) {\n      this._pendingOptimisticUpdates[\"delete\"](updater);\n    } else if (this._appliedOptimisticUpdates.has(updater)) {\n      this._pendingBackupRebase = true;\n      this._appliedOptimisticUpdates[\"delete\"](updater);\n    }\n  };\n  _proto.revertAll = function revertAll() {\n    this._pendingBackupRebase = true;\n    this._pendingOptimisticUpdates.clear();\n    this._appliedOptimisticUpdates.clear();\n  };\n  _proto.commitPayload = function commitPayload(operation, payload, updater) {\n    this._pendingBackupRebase = true;\n    this._pendingData.add({\n      kind: 'payload',\n      operation: operation,\n      payload: payload,\n      updater: updater\n    });\n  };\n  _proto.commitUpdate = function commitUpdate(updater) {\n    this._pendingBackupRebase = true;\n    this._pendingData.add({\n      kind: 'updater',\n      updater: updater\n    });\n  };\n  _proto.commitSource = function commitSource(source) {\n    this._pendingBackupRebase = true;\n    this._pendingData.add({\n      kind: 'source',\n      source: source\n    });\n  };\n  _proto.run = function run(sourceOperation) {\n    var runWillClearGcHold = this._appliedOptimisticUpdates === 0 && !!this._gcHold;\n    var runIsANoop = !this._pendingBackupRebase && this._pendingOptimisticUpdates.size === 0 && !runWillClearGcHold;\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(!runIsANoop, 'RelayPublishQueue.run was called, but the call would have been a noop.') : void 0;\n      process.env.NODE_ENV !== \"production\" ? warning(this._isRunning !== true, 'A store update was detected within another store update. Please ' + \"make sure new store updates aren't being executed within an \" + 'updater function for a different update.') : void 0;\n      this._isRunning = true;\n    }\n    if (runIsANoop) {\n      if (process.env.NODE_ENV !== \"production\") {\n        this._isRunning = false;\n      }\n      return [];\n    }\n    if (this._pendingBackupRebase) {\n      if (this._hasStoreSnapshot) {\n        this._store.restore();\n        this._hasStoreSnapshot = false;\n      }\n    }\n    var invalidatedStore = this._commitData();\n    if (this._pendingOptimisticUpdates.size || this._pendingBackupRebase && this._appliedOptimisticUpdates.size) {\n      if (!this._hasStoreSnapshot) {\n        this._store.snapshot();\n        this._hasStoreSnapshot = true;\n      }\n      this._applyUpdates();\n    }\n    this._pendingBackupRebase = false;\n    if (this._appliedOptimisticUpdates.size > 0) {\n      if (!this._gcHold) {\n        this._gcHold = this._store.holdGC();\n      }\n    } else {\n      if (this._gcHold) {\n        this._gcHold.dispose();\n        this._gcHold = null;\n      }\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      this._isRunning = false;\n    }\n    return this._store.notify(sourceOperation, invalidatedStore);\n  };\n  _proto._publishSourceFromPayload = function _publishSourceFromPayload(pendingPayload) {\n    var _this = this;\n    var payload = pendingPayload.payload,\n      operation = pendingPayload.operation,\n      updater = pendingPayload.updater;\n    var source = payload.source,\n      fieldPayloads = payload.fieldPayloads;\n    var mutator = new RelayRecordSourceMutator(this._store.getSource(), source);\n    var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, this._handlerProvider, this._missingFieldHandlers);\n    if (fieldPayloads && fieldPayloads.length) {\n      fieldPayloads.forEach(function (fieldPayload) {\n        var handler = _this._handlerProvider && _this._handlerProvider(fieldPayload.handle);\n        !handler ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected a handler to be provided for ' + 'handle `%s`.', fieldPayload.handle) : invariant(false) : void 0;\n        handler.update(recordSourceProxy, fieldPayload);\n      });\n    }\n    if (updater) {\n      var selector = operation.fragment;\n      !(selector != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected a selector to be provided with updater function.') : invariant(false) : void 0;\n      var recordSourceSelectorProxy = new RelayRecordSourceSelectorProxy(mutator, recordSourceProxy, selector, this._missingFieldHandlers);\n      var selectorData = lookupSelector(source, selector);\n      updater(recordSourceSelectorProxy, selectorData);\n    }\n    var idsMarkedForInvalidation = recordSourceProxy.getIDsMarkedForInvalidation();\n    this._store.publish(source, idsMarkedForInvalidation);\n    return recordSourceProxy.isStoreMarkedForInvalidation();\n  };\n  _proto._commitData = function _commitData() {\n    var _this2 = this;\n    if (!this._pendingData.size) {\n      return false;\n    }\n    var invalidatedStore = false;\n    this._pendingData.forEach(function (data) {\n      if (data.kind === 'payload') {\n        var payloadInvalidatedStore = _this2._publishSourceFromPayload(data);\n        invalidatedStore = invalidatedStore || payloadInvalidatedStore;\n      } else if (data.kind === 'source') {\n        var source = data.source;\n        _this2._store.publish(source);\n      } else {\n        var updater = data.updater;\n        var sink = RelayRecordSource.create();\n        var mutator = new RelayRecordSourceMutator(_this2._store.getSource(), sink);\n        var recordSourceProxy = new RelayRecordSourceProxy(mutator, _this2._getDataID, _this2._handlerProvider, _this2._missingFieldHandlers);\n        applyWithGuard(updater, null, [recordSourceProxy], null, 'RelayPublishQueue:commitData');\n        invalidatedStore = invalidatedStore || recordSourceProxy.isStoreMarkedForInvalidation();\n        var idsMarkedForInvalidation = recordSourceProxy.getIDsMarkedForInvalidation();\n        _this2._store.publish(sink, idsMarkedForInvalidation);\n      }\n    });\n    this._pendingData.clear();\n    return invalidatedStore;\n  };\n  _proto._applyUpdates = function _applyUpdates() {\n    var _this3 = this;\n    var sink = RelayRecordSource.create();\n    var mutator = new RelayRecordSourceMutator(this._store.getSource(), sink);\n    var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, this._handlerProvider, this._missingFieldHandlers);\n    var processUpdate = function processUpdate(optimisticUpdate) {\n      if (optimisticUpdate.storeUpdater) {\n        var storeUpdater = optimisticUpdate.storeUpdater;\n        applyWithGuard(storeUpdater, null, [recordSourceProxy], null, 'RelayPublishQueue:applyUpdates');\n      } else {\n        var operation = optimisticUpdate.operation,\n          payload = optimisticUpdate.payload,\n          updater = optimisticUpdate.updater;\n        var source = payload.source,\n          fieldPayloads = payload.fieldPayloads;\n        if (source) {\n          recordSourceProxy.publishSource(source, fieldPayloads);\n        }\n        if (updater) {\n          var selectorData;\n          if (source) {\n            selectorData = lookupSelector(source, operation.fragment);\n          }\n          var recordSourceSelectorProxy = new RelayRecordSourceSelectorProxy(mutator, recordSourceProxy, operation.fragment, _this3._missingFieldHandlers);\n          applyWithGuard(updater, null, [recordSourceSelectorProxy, selectorData], null, 'RelayPublishQueue:applyUpdates');\n        }\n      }\n    };\n    if (this._pendingBackupRebase && this._appliedOptimisticUpdates.size) {\n      this._appliedOptimisticUpdates.forEach(processUpdate);\n    }\n    if (this._pendingOptimisticUpdates.size) {\n      this._pendingOptimisticUpdates.forEach(function (optimisticUpdate) {\n        processUpdate(optimisticUpdate);\n        _this3._appliedOptimisticUpdates.add(optimisticUpdate);\n      });\n      this._pendingOptimisticUpdates.clear();\n    }\n    this._store.publish(sink);\n  };\n  return RelayPublishQueue;\n}();\nfunction lookupSelector(source, selector) {\n  var selectorData = RelayReader.read(source, selector).data;\n  if (process.env.NODE_ENV !== \"production\") {\n    var deepFreeze = require('../util/deepFreeze');\n    if (selectorData) {\n      deepFreeze(selectorData);\n    }\n  }\n  return selectorData;\n}\nmodule.exports = RelayPublishQueue;","map":{"version":3,"names":["_global$ErrorUtils$ap","_global$ErrorUtils","RelayRecordSourceMutator","require","RelayRecordSourceProxy","RelayRecordSourceSelectorProxy","RelayReader","RelayRecordSource","invariant","warning","_global","global","window","undefined","applyWithGuard","ErrorUtils","callback","context","args","onError","name","apply","RelayPublishQueue","store","handlerProvider","getDataID","missingFieldHandlers","_hasStoreSnapshot","_handlerProvider","_pendingBackupRebase","_pendingData","Set","_pendingOptimisticUpdates","_store","_appliedOptimisticUpdates","_gcHold","_getDataID","_missingFieldHandlers","_proto","prototype","applyUpdate","updater","has","process","env","NODE_ENV","add","revertUpdate","revertAll","clear","commitPayload","operation","payload","kind","commitUpdate","commitSource","source","run","sourceOperation","runWillClearGcHold","runIsANoop","size","_isRunning","restore","invalidatedStore","_commitData","snapshot","_applyUpdates","holdGC","dispose","notify","_publishSourceFromPayload","pendingPayload","_this","fieldPayloads","mutator","getSource","recordSourceProxy","length","forEach","fieldPayload","handler","handle","update","selector","fragment","recordSourceSelectorProxy","selectorData","lookupSelector","idsMarkedForInvalidation","getIDsMarkedForInvalidation","publish","isStoreMarkedForInvalidation","_this2","data","payloadInvalidatedStore","sink","create","_this3","processUpdate","optimisticUpdate","storeUpdater","publishSource","read","deepFreeze","module","exports"],"sources":["/Users/joaoluismoraes/Desktop/woovi-challenge/web/node_modules/relay-runtime/lib/store/RelayPublishQueue.js"],"sourcesContent":["'use strict';\n\nvar _global$ErrorUtils$ap, _global$ErrorUtils;\nvar RelayRecordSourceMutator = require('../mutations/RelayRecordSourceMutator');\nvar RelayRecordSourceProxy = require('../mutations/RelayRecordSourceProxy');\nvar RelayRecordSourceSelectorProxy = require('../mutations/RelayRecordSourceSelectorProxy');\nvar RelayReader = require('./RelayReader');\nvar RelayRecordSource = require('./RelayRecordSource');\nvar invariant = require('invariant');\nvar warning = require(\"fbjs/lib/warning\");\nvar _global = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : undefined;\nvar applyWithGuard = (_global$ErrorUtils$ap = _global === null || _global === void 0 ? void 0 : (_global$ErrorUtils = _global.ErrorUtils) === null || _global$ErrorUtils === void 0 ? void 0 : _global$ErrorUtils.applyWithGuard) !== null && _global$ErrorUtils$ap !== void 0 ? _global$ErrorUtils$ap : function (callback, context, args, onError, name) {\n  return callback.apply(context, args);\n};\nvar RelayPublishQueue = /*#__PURE__*/function () {\n  function RelayPublishQueue(store, handlerProvider, getDataID, missingFieldHandlers) {\n    this._hasStoreSnapshot = false;\n    this._handlerProvider = handlerProvider || null;\n    this._pendingBackupRebase = false;\n    this._pendingData = new Set();\n    this._pendingOptimisticUpdates = new Set();\n    this._store = store;\n    this._appliedOptimisticUpdates = new Set();\n    this._gcHold = null;\n    this._getDataID = getDataID;\n    this._missingFieldHandlers = missingFieldHandlers;\n  }\n  var _proto = RelayPublishQueue.prototype;\n  _proto.applyUpdate = function applyUpdate(updater) {\n    !(!this._appliedOptimisticUpdates.has(updater) && !this._pendingOptimisticUpdates.has(updater)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayPublishQueue: Cannot apply the same update function more than ' + 'once concurrently.') : invariant(false) : void 0;\n    this._pendingOptimisticUpdates.add(updater);\n  };\n  _proto.revertUpdate = function revertUpdate(updater) {\n    if (this._pendingOptimisticUpdates.has(updater)) {\n      this._pendingOptimisticUpdates[\"delete\"](updater);\n    } else if (this._appliedOptimisticUpdates.has(updater)) {\n      this._pendingBackupRebase = true;\n      this._appliedOptimisticUpdates[\"delete\"](updater);\n    }\n  };\n  _proto.revertAll = function revertAll() {\n    this._pendingBackupRebase = true;\n    this._pendingOptimisticUpdates.clear();\n    this._appliedOptimisticUpdates.clear();\n  };\n  _proto.commitPayload = function commitPayload(operation, payload, updater) {\n    this._pendingBackupRebase = true;\n    this._pendingData.add({\n      kind: 'payload',\n      operation: operation,\n      payload: payload,\n      updater: updater\n    });\n  };\n  _proto.commitUpdate = function commitUpdate(updater) {\n    this._pendingBackupRebase = true;\n    this._pendingData.add({\n      kind: 'updater',\n      updater: updater\n    });\n  };\n  _proto.commitSource = function commitSource(source) {\n    this._pendingBackupRebase = true;\n    this._pendingData.add({\n      kind: 'source',\n      source: source\n    });\n  };\n  _proto.run = function run(sourceOperation) {\n    var runWillClearGcHold = this._appliedOptimisticUpdates === 0 && !!this._gcHold;\n    var runIsANoop = !this._pendingBackupRebase && this._pendingOptimisticUpdates.size === 0 && !runWillClearGcHold;\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(!runIsANoop, 'RelayPublishQueue.run was called, but the call would have been a noop.') : void 0;\n      process.env.NODE_ENV !== \"production\" ? warning(this._isRunning !== true, 'A store update was detected within another store update. Please ' + \"make sure new store updates aren't being executed within an \" + 'updater function for a different update.') : void 0;\n      this._isRunning = true;\n    }\n    if (runIsANoop) {\n      if (process.env.NODE_ENV !== \"production\") {\n        this._isRunning = false;\n      }\n      return [];\n    }\n    if (this._pendingBackupRebase) {\n      if (this._hasStoreSnapshot) {\n        this._store.restore();\n        this._hasStoreSnapshot = false;\n      }\n    }\n    var invalidatedStore = this._commitData();\n    if (this._pendingOptimisticUpdates.size || this._pendingBackupRebase && this._appliedOptimisticUpdates.size) {\n      if (!this._hasStoreSnapshot) {\n        this._store.snapshot();\n        this._hasStoreSnapshot = true;\n      }\n      this._applyUpdates();\n    }\n    this._pendingBackupRebase = false;\n    if (this._appliedOptimisticUpdates.size > 0) {\n      if (!this._gcHold) {\n        this._gcHold = this._store.holdGC();\n      }\n    } else {\n      if (this._gcHold) {\n        this._gcHold.dispose();\n        this._gcHold = null;\n      }\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      this._isRunning = false;\n    }\n    return this._store.notify(sourceOperation, invalidatedStore);\n  };\n  _proto._publishSourceFromPayload = function _publishSourceFromPayload(pendingPayload) {\n    var _this = this;\n    var payload = pendingPayload.payload,\n      operation = pendingPayload.operation,\n      updater = pendingPayload.updater;\n    var source = payload.source,\n      fieldPayloads = payload.fieldPayloads;\n    var mutator = new RelayRecordSourceMutator(this._store.getSource(), source);\n    var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, this._handlerProvider, this._missingFieldHandlers);\n    if (fieldPayloads && fieldPayloads.length) {\n      fieldPayloads.forEach(function (fieldPayload) {\n        var handler = _this._handlerProvider && _this._handlerProvider(fieldPayload.handle);\n        !handler ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected a handler to be provided for ' + 'handle `%s`.', fieldPayload.handle) : invariant(false) : void 0;\n        handler.update(recordSourceProxy, fieldPayload);\n      });\n    }\n    if (updater) {\n      var selector = operation.fragment;\n      !(selector != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected a selector to be provided with updater function.') : invariant(false) : void 0;\n      var recordSourceSelectorProxy = new RelayRecordSourceSelectorProxy(mutator, recordSourceProxy, selector, this._missingFieldHandlers);\n      var selectorData = lookupSelector(source, selector);\n      updater(recordSourceSelectorProxy, selectorData);\n    }\n    var idsMarkedForInvalidation = recordSourceProxy.getIDsMarkedForInvalidation();\n    this._store.publish(source, idsMarkedForInvalidation);\n    return recordSourceProxy.isStoreMarkedForInvalidation();\n  };\n  _proto._commitData = function _commitData() {\n    var _this2 = this;\n    if (!this._pendingData.size) {\n      return false;\n    }\n    var invalidatedStore = false;\n    this._pendingData.forEach(function (data) {\n      if (data.kind === 'payload') {\n        var payloadInvalidatedStore = _this2._publishSourceFromPayload(data);\n        invalidatedStore = invalidatedStore || payloadInvalidatedStore;\n      } else if (data.kind === 'source') {\n        var source = data.source;\n        _this2._store.publish(source);\n      } else {\n        var updater = data.updater;\n        var sink = RelayRecordSource.create();\n        var mutator = new RelayRecordSourceMutator(_this2._store.getSource(), sink);\n        var recordSourceProxy = new RelayRecordSourceProxy(mutator, _this2._getDataID, _this2._handlerProvider, _this2._missingFieldHandlers);\n        applyWithGuard(updater, null, [recordSourceProxy], null, 'RelayPublishQueue:commitData');\n        invalidatedStore = invalidatedStore || recordSourceProxy.isStoreMarkedForInvalidation();\n        var idsMarkedForInvalidation = recordSourceProxy.getIDsMarkedForInvalidation();\n        _this2._store.publish(sink, idsMarkedForInvalidation);\n      }\n    });\n    this._pendingData.clear();\n    return invalidatedStore;\n  };\n  _proto._applyUpdates = function _applyUpdates() {\n    var _this3 = this;\n    var sink = RelayRecordSource.create();\n    var mutator = new RelayRecordSourceMutator(this._store.getSource(), sink);\n    var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, this._handlerProvider, this._missingFieldHandlers);\n    var processUpdate = function processUpdate(optimisticUpdate) {\n      if (optimisticUpdate.storeUpdater) {\n        var storeUpdater = optimisticUpdate.storeUpdater;\n        applyWithGuard(storeUpdater, null, [recordSourceProxy], null, 'RelayPublishQueue:applyUpdates');\n      } else {\n        var operation = optimisticUpdate.operation,\n          payload = optimisticUpdate.payload,\n          updater = optimisticUpdate.updater;\n        var source = payload.source,\n          fieldPayloads = payload.fieldPayloads;\n        if (source) {\n          recordSourceProxy.publishSource(source, fieldPayloads);\n        }\n        if (updater) {\n          var selectorData;\n          if (source) {\n            selectorData = lookupSelector(source, operation.fragment);\n          }\n          var recordSourceSelectorProxy = new RelayRecordSourceSelectorProxy(mutator, recordSourceProxy, operation.fragment, _this3._missingFieldHandlers);\n          applyWithGuard(updater, null, [recordSourceSelectorProxy, selectorData], null, 'RelayPublishQueue:applyUpdates');\n        }\n      }\n    };\n    if (this._pendingBackupRebase && this._appliedOptimisticUpdates.size) {\n      this._appliedOptimisticUpdates.forEach(processUpdate);\n    }\n    if (this._pendingOptimisticUpdates.size) {\n      this._pendingOptimisticUpdates.forEach(function (optimisticUpdate) {\n        processUpdate(optimisticUpdate);\n        _this3._appliedOptimisticUpdates.add(optimisticUpdate);\n      });\n      this._pendingOptimisticUpdates.clear();\n    }\n    this._store.publish(sink);\n  };\n  return RelayPublishQueue;\n}();\nfunction lookupSelector(source, selector) {\n  var selectorData = RelayReader.read(source, selector).data;\n  if (process.env.NODE_ENV !== \"production\") {\n    var deepFreeze = require('../util/deepFreeze');\n    if (selectorData) {\n      deepFreeze(selectorData);\n    }\n  }\n  return selectorData;\n}\nmodule.exports = RelayPublishQueue;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}