{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _require = require('../multi-actor-environment/ActorUtils'),\n  ACTOR_IDENTIFIER_FIELD_NAME = _require.ACTOR_IDENTIFIER_FIELD_NAME,\n  getActorIdentifierFromPayload = _require.getActorIdentifierFromPayload;\nvar _require2 = require('../util/RelayConcreteNode'),\n  ACTOR_CHANGE = _require2.ACTOR_CHANGE,\n  CLIENT_COMPONENT = _require2.CLIENT_COMPONENT,\n  CLIENT_EDGE_TO_CLIENT_OBJECT = _require2.CLIENT_EDGE_TO_CLIENT_OBJECT,\n  CLIENT_EXTENSION = _require2.CLIENT_EXTENSION,\n  CONDITION = _require2.CONDITION,\n  DEFER = _require2.DEFER,\n  FRAGMENT_SPREAD = _require2.FRAGMENT_SPREAD,\n  INLINE_FRAGMENT = _require2.INLINE_FRAGMENT,\n  LINKED_FIELD = _require2.LINKED_FIELD,\n  LINKED_HANDLE = _require2.LINKED_HANDLE,\n  MODULE_IMPORT = _require2.MODULE_IMPORT,\n  RELAY_LIVE_RESOLVER = _require2.RELAY_LIVE_RESOLVER,\n  RELAY_RESOLVER = _require2.RELAY_RESOLVER,\n  SCALAR_FIELD = _require2.SCALAR_FIELD,\n  SCALAR_HANDLE = _require2.SCALAR_HANDLE,\n  STREAM = _require2.STREAM,\n  TYPE_DISCRIMINATOR = _require2.TYPE_DISCRIMINATOR;\nvar _require3 = require('./ClientID'),\n  generateClientID = _require3.generateClientID,\n  isClientID = _require3.isClientID;\nvar _require4 = require('./RelayConcreteVariables'),\n  getLocalVariables = _require4.getLocalVariables;\nvar _require5 = require('./RelayErrorTrie'),\n  buildErrorTrie = _require5.buildErrorTrie,\n  getErrorsByKey = _require5.getErrorsByKey,\n  getNestedErrorTrieByKey = _require5.getNestedErrorTrieByKey;\nvar RelayModernRecord = require('./RelayModernRecord');\nvar _require6 = require('./RelayModernSelector'),\n  createNormalizationSelector = _require6.createNormalizationSelector;\nvar _require7 = require('./RelayStoreUtils'),\n  ROOT_ID = _require7.ROOT_ID,\n  TYPENAME_KEY = _require7.TYPENAME_KEY,\n  getArgumentValues = _require7.getArgumentValues,\n  getHandleStorageKey = _require7.getHandleStorageKey,\n  getModuleComponentKey = _require7.getModuleComponentKey,\n  getModuleOperationKey = _require7.getModuleOperationKey,\n  getStorageKey = _require7.getStorageKey;\nvar _require8 = require('./TypeID'),\n  TYPE_SCHEMA_TYPE = _require8.TYPE_SCHEMA_TYPE,\n  generateTypeID = _require8.generateTypeID;\nvar areEqual = require(\"fbjs/lib/areEqual\");\nvar invariant = require('invariant');\nvar warning = require(\"fbjs/lib/warning\");\nfunction normalize(recordSource, selector, response, options, errors) {\n  var dataID = selector.dataID,\n    node = selector.node,\n    variables = selector.variables;\n  var normalizer = new RelayResponseNormalizer(recordSource, variables, options);\n  return normalizer.normalizeResponse(node, dataID, response, errors);\n}\nvar RelayResponseNormalizer = /*#__PURE__*/function () {\n  function RelayResponseNormalizer(recordSource, variables, options) {\n    this._actorIdentifier = options.actorIdentifier;\n    this._getDataId = options.getDataID;\n    this._handleFieldPayloads = [];\n    this._treatMissingFieldsAsNull = options.treatMissingFieldsAsNull;\n    this._incrementalPlaceholders = [];\n    this._isClientExtension = false;\n    this._isUnmatchedAbstractType = false;\n    this._followupPayloads = [];\n    this._path = options.path ? (0, _toConsumableArray2[\"default\"])(options.path) : [];\n    this._recordSource = recordSource;\n    this._variables = variables;\n    this._shouldProcessClientComponents = options.shouldProcessClientComponents;\n  }\n  var _proto = RelayResponseNormalizer.prototype;\n  _proto.normalizeResponse = function normalizeResponse(node, dataID, data, errors) {\n    var record = this._recordSource.get(dataID);\n    !record ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected root record `%s` to exist.', dataID) : invariant(false) : void 0;\n    this._assignClientAbstractTypes(node);\n    this._errorTrie = buildErrorTrie(errors);\n    this._traverseSelections(node, record, data);\n    return {\n      errors: errors,\n      fieldPayloads: this._handleFieldPayloads,\n      incrementalPlaceholders: this._incrementalPlaceholders,\n      followupPayloads: this._followupPayloads,\n      source: this._recordSource,\n      isFinal: false\n    };\n  };\n  _proto._assignClientAbstractTypes = function _assignClientAbstractTypes(node) {\n    var clientAbstractTypes = node.clientAbstractTypes;\n    if (clientAbstractTypes != null) {\n      for (var _i = 0, _Object$keys = Object.keys(clientAbstractTypes); _i < _Object$keys.length; _i++) {\n        var abstractType = _Object$keys[_i];\n        var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(clientAbstractTypes[abstractType]),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var concreteType = _step.value;\n            var typeID = generateTypeID(concreteType);\n            var typeRecord = this._recordSource.get(typeID);\n            if (typeRecord == null) {\n              typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);\n              this._recordSource.set(typeID, typeRecord);\n            }\n            RelayModernRecord.setValue(typeRecord, abstractType, true);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  };\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n  _proto._getRecordType = function _getRecordType(data) {\n    var typeName = data[TYPENAME_KEY];\n    !(typeName != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected a typename for record `%s`.', JSON.stringify(data, null, 2)) : invariant(false) : void 0;\n    return typeName;\n  };\n  _proto._traverseSelections = function _traverseSelections(node, record, data) {\n    for (var i = 0; i < node.selections.length; i++) {\n      var selection = node.selections[i];\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n        case LINKED_FIELD:\n          this._normalizeField(selection, record, data);\n          break;\n        case CONDITION:\n          var conditionValue = Boolean(this._getVariableValue(selection.condition));\n          if (conditionValue === selection.passingValue) {\n            this._traverseSelections(selection, record, data);\n          }\n          break;\n        case FRAGMENT_SPREAD:\n          {\n            var prevVariables = this._variables;\n            this._variables = getLocalVariables(this._variables, selection.fragment.argumentDefinitions, selection.args);\n            this._traverseSelections(selection.fragment, record, data);\n            this._variables = prevVariables;\n            break;\n          }\n        case INLINE_FRAGMENT:\n          {\n            var abstractKey = selection.abstractKey;\n            if (abstractKey == null) {\n              var typeName = RelayModernRecord.getType(record);\n              if (typeName === selection.type) {\n                this._traverseSelections(selection, record, data);\n              }\n            } else {\n              var implementsInterface = data.hasOwnProperty(abstractKey);\n              var _typeName = RelayModernRecord.getType(record);\n              var typeID = generateTypeID(_typeName);\n              var typeRecord = this._recordSource.get(typeID);\n              if (typeRecord == null) {\n                typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);\n                this._recordSource.set(typeID, typeRecord);\n              }\n              RelayModernRecord.setValue(typeRecord, abstractKey, implementsInterface);\n              if (implementsInterface) {\n                this._traverseSelections(selection, record, data);\n              }\n            }\n            break;\n          }\n        case TYPE_DISCRIMINATOR:\n          {\n            var _abstractKey = selection.abstractKey;\n            var _implementsInterface = data.hasOwnProperty(_abstractKey);\n            var _typeName2 = RelayModernRecord.getType(record);\n            var _typeID = generateTypeID(_typeName2);\n            var _typeRecord = this._recordSource.get(_typeID);\n            if (_typeRecord == null) {\n              _typeRecord = RelayModernRecord.create(_typeID, TYPE_SCHEMA_TYPE);\n              this._recordSource.set(_typeID, _typeRecord);\n            }\n            RelayModernRecord.setValue(_typeRecord, _abstractKey, _implementsInterface);\n            break;\n          }\n        case LINKED_HANDLE:\n        case SCALAR_HANDLE:\n          var args = selection.args ? getArgumentValues(selection.args, this._variables) : {};\n          var fieldKey = getStorageKey(selection, this._variables);\n          var handleKey = getHandleStorageKey(selection, this._variables);\n          this._handleFieldPayloads.push({\n            args: args,\n            dataID: RelayModernRecord.getDataID(record),\n            fieldKey: fieldKey,\n            handle: selection.handle,\n            handleKey: handleKey,\n            handleArgs: selection.handleArgs ? getArgumentValues(selection.handleArgs, this._variables) : {}\n          });\n          break;\n        case MODULE_IMPORT:\n          this._normalizeModuleImport(selection, record, data);\n          break;\n        case DEFER:\n          this._normalizeDefer(selection, record, data);\n          break;\n        case STREAM:\n          this._normalizeStream(selection, record, data);\n          break;\n        case CLIENT_EXTENSION:\n          var isClientExtension = this._isClientExtension;\n          this._isClientExtension = true;\n          this._traverseSelections(selection, record, data);\n          this._isClientExtension = isClientExtension;\n          break;\n        case CLIENT_COMPONENT:\n          if (this._shouldProcessClientComponents === false) {\n            break;\n          }\n          this._traverseSelections(selection.fragment, record, data);\n          break;\n        case ACTOR_CHANGE:\n          this._normalizeActorChange(selection, record, data);\n          break;\n        case RELAY_RESOLVER:\n          this._normalizeResolver(selection, record, data);\n          break;\n        case RELAY_LIVE_RESOLVER:\n          this._normalizeResolver(selection, record, data);\n          break;\n        case CLIENT_EDGE_TO_CLIENT_OBJECT:\n          this._normalizeResolver(selection.backingField, record, data);\n          break;\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n  };\n  _proto._normalizeResolver = function _normalizeResolver(resolver, record, data) {\n    if (resolver.fragment != null) {\n      this._traverseSelections(resolver.fragment, record, data);\n    }\n  };\n  _proto._normalizeDefer = function _normalizeDefer(defer, record, data) {\n    var isDeferred = defer[\"if\"] === null || this._getVariableValue(defer[\"if\"]);\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isDeferred === 'boolean', 'RelayResponseNormalizer: Expected value for @defer `if` argument to ' + 'be a boolean, got `%s`.', isDeferred) : void 0;\n    }\n    if (isDeferred === false) {\n      this._traverseSelections(defer, record, data);\n    } else {\n      this._incrementalPlaceholders.push({\n        kind: 'defer',\n        data: data,\n        label: defer.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        selector: createNormalizationSelector(defer, RelayModernRecord.getDataID(record), this._variables),\n        typeName: RelayModernRecord.getType(record),\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n  _proto._normalizeStream = function _normalizeStream(stream, record, data) {\n    this._traverseSelections(stream, record, data);\n    var isStreamed = stream[\"if\"] === null || this._getVariableValue(stream[\"if\"]);\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isStreamed === 'boolean', 'RelayResponseNormalizer: Expected value for @stream `if` argument ' + 'to be a boolean, got `%s`.', isStreamed) : void 0;\n    }\n    if (isStreamed === true) {\n      this._incrementalPlaceholders.push({\n        kind: 'stream',\n        label: stream.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        parentID: RelayModernRecord.getDataID(record),\n        node: stream,\n        variables: this._variables,\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n  _proto._normalizeModuleImport = function _normalizeModuleImport(moduleImport, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for @module to be an object.') : invariant(false) : void 0;\n    var typeName = RelayModernRecord.getType(record);\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var componentReference = moduleImport.componentModuleProvider || data[componentKey];\n    RelayModernRecord.setValue(record, componentKey, componentReference !== null && componentReference !== void 0 ? componentReference : null);\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = moduleImport.operationModuleProvider || data[operationKey];\n    RelayModernRecord.setValue(record, operationKey, operationReference !== null && operationReference !== void 0 ? operationReference : null);\n    if (operationReference != null) {\n      this._followupPayloads.push({\n        kind: 'ModuleImportPayload',\n        args: moduleImport.args,\n        data: data,\n        dataID: RelayModernRecord.getDataID(record),\n        operationReference: operationReference,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        typeName: typeName,\n        variables: this._variables,\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n  _proto._normalizeField = function _normalizeField(selection, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'writeField(): Expected data for field `%s` to be an object.', selection.name) : invariant(false) : void 0;\n    var responseKey = selection.alias || selection.name;\n    var storageKey = getStorageKey(selection, this._variables);\n    var fieldValue = data[responseKey];\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;\n        if (isOptionalField) {\n          return;\n        } else if (!this._treatMissingFieldsAsNull) {\n          if (process.env.NODE_ENV !== \"production\") {\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n          }\n          return;\n        }\n      }\n      if (process.env.NODE_ENV !== \"production\") {\n        if (selection.kind === SCALAR_FIELD) {\n          this._validateConflictingFieldsWithIdenticalId(record, storageKey, null);\n        }\n      }\n      RelayModernRecord.setValue(record, storageKey, null);\n      var errorTrie = this._errorTrie;\n      if (errorTrie != null) {\n        var errors = getErrorsByKey(errorTrie, responseKey);\n        if (errors != null) {\n          RelayModernRecord.setErrors(record, storageKey, errors);\n        }\n      }\n      return;\n    }\n    if (selection.kind === SCALAR_FIELD) {\n      if (process.env.NODE_ENV !== \"production\") {\n        this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);\n      }\n      RelayModernRecord.setValue(record, storageKey, fieldValue);\n    } else if (selection.kind === LINKED_FIELD) {\n      this._path.push(responseKey);\n      var oldErrorTrie = this._errorTrie;\n      this._errorTrie = oldErrorTrie == null ? null : getNestedErrorTrieByKey(oldErrorTrie, responseKey);\n      if (selection.plural) {\n        this._normalizePluralLink(selection, record, storageKey, fieldValue);\n      } else {\n        this._normalizeLink(selection, record, storageKey, fieldValue);\n      }\n      this._errorTrie = oldErrorTrie;\n      this._path.pop();\n    } else {\n      selection;\n      !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s` during normalization.', selection.kind) : invariant(false) : void 0;\n    }\n  };\n  _proto._normalizeActorChange = function _normalizeActorChange(selection, record, data) {\n    var _field$concreteType;\n    var field = selection.linkedField;\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '_normalizeActorChange(): Expected data for field `%s` to be an object.', field.name) : invariant(false) : void 0;\n    var responseKey = field.alias || field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var fieldValue = data[responseKey];\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;\n        if (isOptionalField) {\n          return;\n        } else if (!this._treatMissingFieldsAsNull) {\n          if (process.env.NODE_ENV !== \"production\") {\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n          }\n          return;\n        }\n      }\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n    var actorIdentifier = getActorIdentifierFromPayload(fieldValue);\n    if (actorIdentifier == null) {\n      if (process.env.NODE_ENV !== \"production\") {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload. Payload is `%s`.', ACTOR_IDENTIFIER_FIELD_NAME, JSON.stringify(fieldValue, null, 2)) : void 0;\n      }\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n    var typeName = (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : this._getRecordType(fieldValue);\n    var nextID = this._getDataId(fieldValue, typeName) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : invariant(false) : void 0;\n    RelayModernRecord.setActorLinkedRecordID(record, storageKey, actorIdentifier, nextID);\n    this._followupPayloads.push({\n      kind: 'ActorPayload',\n      data: fieldValue,\n      dataID: nextID,\n      path: [].concat((0, _toConsumableArray2[\"default\"])(this._path), [responseKey]),\n      typeName: typeName,\n      variables: this._variables,\n      node: field,\n      actorIdentifier: actorIdentifier\n    });\n  };\n  _proto._normalizeLink = function _normalizeLink(field, record, storageKey, fieldValue) {\n    var _field$concreteType2;\n    !(typeof fieldValue === 'object' && fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an object.', storageKey) : invariant(false) : void 0;\n    var nextID = this._getDataId(fieldValue, (_field$concreteType2 = field.concreteType) !== null && _field$concreteType2 !== void 0 ? _field$concreteType2 : this._getRecordType(fieldValue)) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : invariant(false) : void 0;\n    if (process.env.NODE_ENV !== \"production\") {\n      this._validateConflictingLinkedFieldsWithIdenticalId(RelayModernRecord.getLinkedRecordID(record, storageKey), nextID, storageKey);\n    }\n    RelayModernRecord.setLinkedRecordID(record, storageKey, nextID);\n    var nextRecord = this._recordSource.get(nextID);\n    if (!nextRecord) {\n      var typeName = field.concreteType || this._getRecordType(fieldValue);\n      nextRecord = RelayModernRecord.create(nextID, typeName);\n      this._recordSource.set(nextID, nextRecord);\n    } else if (process.env.NODE_ENV !== \"production\") {\n      this._validateRecordType(nextRecord, field, fieldValue);\n    }\n    this._traverseSelections(field, nextRecord, fieldValue);\n  };\n  _proto._normalizePluralLink = function _normalizePluralLink(field, record, storageKey, fieldValue) {\n    var _this = this;\n    !Array.isArray(fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an array ' + 'of objects.', storageKey) : invariant(false) : void 0;\n    var prevIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    var nextIDs = [];\n    fieldValue.forEach(function (item, nextIndex) {\n      var _field$concreteType3;\n      if (item == null) {\n        nextIDs.push(item);\n        return;\n      }\n      _this._path.push(String(nextIndex));\n      var oldErrorTrie = _this._errorTrie;\n      _this._errorTrie = oldErrorTrie == null ? null : getNestedErrorTrieByKey(oldErrorTrie, nextIndex);\n      !(typeof item === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected elements for field `%s` to be ' + 'objects.', storageKey) : invariant(false) : void 0;\n      var nextID = _this._getDataId(item, (_field$concreteType3 = field.concreteType) !== null && _field$concreteType3 !== void 0 ? _field$concreteType3 : _this._getRecordType(item)) || prevIDs && prevIDs[nextIndex] || generateClientID(RelayModernRecord.getDataID(record), storageKey, nextIndex);\n      !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : invariant(false) : void 0;\n      nextIDs.push(nextID);\n      var nextRecord = _this._recordSource.get(nextID);\n      if (!nextRecord) {\n        var typeName = field.concreteType || _this._getRecordType(item);\n        nextRecord = RelayModernRecord.create(nextID, typeName);\n        _this._recordSource.set(nextID, nextRecord);\n      } else if (process.env.NODE_ENV !== \"production\") {\n        _this._validateRecordType(nextRecord, field, item);\n      }\n      if (process.env.NODE_ENV !== \"production\") {\n        if (prevIDs) {\n          _this._validateConflictingLinkedFieldsWithIdenticalId(prevIDs[nextIndex], nextID, storageKey);\n        }\n      }\n      _this._traverseSelections(field, nextRecord, item);\n      _this._errorTrie = oldErrorTrie;\n      _this._path.pop();\n    });\n    RelayModernRecord.setLinkedRecordIDs(record, storageKey, nextIDs);\n  };\n  _proto._validateRecordType = function _validateRecordType(record, field, payload) {\n    var _field$concreteType4;\n    var typeName = (_field$concreteType4 = field.concreteType) !== null && _field$concreteType4 !== void 0 ? _field$concreteType4 : this._getRecordType(payload);\n    var dataID = RelayModernRecord.getDataID(record);\n    process.env.NODE_ENV !== \"production\" ? warning(isClientID(dataID) && dataID !== ROOT_ID || RelayModernRecord.getType(record) === typeName, 'RelayResponseNormalizer: Invalid record `%s`. Expected %s to be ' + 'consistent, but the record was assigned conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', dataID, TYPENAME_KEY, RelayModernRecord.getType(record), typeName) : void 0;\n  };\n  _proto._validateConflictingFieldsWithIdenticalId = function _validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue) {\n    if (process.env.NODE_ENV !== \"production\") {\n      var dataID = RelayModernRecord.getDataID(record);\n      var previousValue = RelayModernRecord.getValue(record, storageKey);\n      process.env.NODE_ENV !== \"production\" ? warning(storageKey === TYPENAME_KEY || previousValue === undefined || areEqual(previousValue, fieldValue), 'RelayResponseNormalizer: Invalid record. The record contains two ' + 'instances of the same id: `%s` with conflicting field, %s and its values: %s and %s. ' + 'If two fields are different but share ' + 'the same id, one field will overwrite the other.', dataID, storageKey, previousValue, fieldValue) : void 0;\n    }\n  };\n  _proto._validateConflictingLinkedFieldsWithIdenticalId = function _validateConflictingLinkedFieldsWithIdenticalId(prevID, nextID, storageKey) {\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(prevID === undefined || prevID === nextID, 'RelayResponseNormalizer: Invalid record. The record contains ' + 'references to the conflicting field, %s and its id values: %s and %s. ' + 'We need to make sure that the record the field points ' + 'to remains consistent or one field will overwrite the other.', storageKey, prevID, nextID) : void 0;\n    }\n  };\n  return RelayResponseNormalizer;\n}();\nmodule.exports = {\n  normalize: normalize\n};","map":{"version":3,"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","_toConsumableArray2","_require","ACTOR_IDENTIFIER_FIELD_NAME","getActorIdentifierFromPayload","_require2","ACTOR_CHANGE","CLIENT_COMPONENT","CLIENT_EDGE_TO_CLIENT_OBJECT","CLIENT_EXTENSION","CONDITION","DEFER","FRAGMENT_SPREAD","INLINE_FRAGMENT","LINKED_FIELD","LINKED_HANDLE","MODULE_IMPORT","RELAY_LIVE_RESOLVER","RELAY_RESOLVER","SCALAR_FIELD","SCALAR_HANDLE","STREAM","TYPE_DISCRIMINATOR","_require3","generateClientID","isClientID","_require4","getLocalVariables","_require5","buildErrorTrie","getErrorsByKey","getNestedErrorTrieByKey","RelayModernRecord","_require6","createNormalizationSelector","_require7","ROOT_ID","TYPENAME_KEY","getArgumentValues","getHandleStorageKey","getModuleComponentKey","getModuleOperationKey","getStorageKey","_require8","TYPE_SCHEMA_TYPE","generateTypeID","areEqual","invariant","warning","normalize","recordSource","selector","response","options","errors","dataID","node","variables","normalizer","RelayResponseNormalizer","normalizeResponse","_actorIdentifier","actorIdentifier","_getDataId","getDataID","_handleFieldPayloads","_treatMissingFieldsAsNull","treatMissingFieldsAsNull","_incrementalPlaceholders","_isClientExtension","_isUnmatchedAbstractType","_followupPayloads","_path","path","_recordSource","_variables","_shouldProcessClientComponents","shouldProcessClientComponents","_proto","prototype","data","record","get","process","env","NODE_ENV","_assignClientAbstractTypes","_errorTrie","_traverseSelections","fieldPayloads","incrementalPlaceholders","followupPayloads","source","isFinal","clientAbstractTypes","_i","_Object$keys","Object","keys","length","abstractType","_iterator","_step","s","n","done","concreteType","value","typeID","typeRecord","create","set","setValue","err","e","f","_getVariableValue","name","hasOwnProperty","_getRecordType","typeName","JSON","stringify","i","selections","selection","kind","_normalizeField","conditionValue","Boolean","condition","passingValue","prevVariables","fragment","argumentDefinitions","args","abstractKey","getType","type","implementsInterface","_typeName","_abstractKey","_implementsInterface","_typeName2","_typeID","_typeRecord","fieldKey","handleKey","push","handle","handleArgs","_normalizeModuleImport","_normalizeDefer","_normalizeStream","isClientExtension","_normalizeActorChange","_normalizeResolver","backingField","resolver","defer","isDeferred","label","stream","isStreamed","parentID","moduleImport","componentKey","documentName","componentReference","componentModuleProvider","operationKey","operationReference","operationModuleProvider","responseKey","alias","storageKey","fieldValue","undefined","isOptionalField","_validateConflictingFieldsWithIdenticalId","errorTrie","setErrors","oldErrorTrie","plural","_normalizePluralLink","_normalizeLink","pop","_field$concreteType","field","linkedField","nextID","getLinkedRecordID","setActorLinkedRecordID","concat","_field$concreteType2","_validateConflictingLinkedFieldsWithIdenticalId","setLinkedRecordID","nextRecord","_validateRecordType","_this","Array","isArray","prevIDs","getLinkedRecordIDs","nextIDs","forEach","item","nextIndex","_field$concreteType3","String","setLinkedRecordIDs","payload","_field$concreteType4","previousValue","getValue","prevID","module","exports"],"sources":["/Users/joaoluismoraes/Desktop/woovi-challenge/web/node_modules/relay-runtime/lib/store/RelayResponseNormalizer.js"],"sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _require = require('../multi-actor-environment/ActorUtils'),\n  ACTOR_IDENTIFIER_FIELD_NAME = _require.ACTOR_IDENTIFIER_FIELD_NAME,\n  getActorIdentifierFromPayload = _require.getActorIdentifierFromPayload;\nvar _require2 = require('../util/RelayConcreteNode'),\n  ACTOR_CHANGE = _require2.ACTOR_CHANGE,\n  CLIENT_COMPONENT = _require2.CLIENT_COMPONENT,\n  CLIENT_EDGE_TO_CLIENT_OBJECT = _require2.CLIENT_EDGE_TO_CLIENT_OBJECT,\n  CLIENT_EXTENSION = _require2.CLIENT_EXTENSION,\n  CONDITION = _require2.CONDITION,\n  DEFER = _require2.DEFER,\n  FRAGMENT_SPREAD = _require2.FRAGMENT_SPREAD,\n  INLINE_FRAGMENT = _require2.INLINE_FRAGMENT,\n  LINKED_FIELD = _require2.LINKED_FIELD,\n  LINKED_HANDLE = _require2.LINKED_HANDLE,\n  MODULE_IMPORT = _require2.MODULE_IMPORT,\n  RELAY_LIVE_RESOLVER = _require2.RELAY_LIVE_RESOLVER,\n  RELAY_RESOLVER = _require2.RELAY_RESOLVER,\n  SCALAR_FIELD = _require2.SCALAR_FIELD,\n  SCALAR_HANDLE = _require2.SCALAR_HANDLE,\n  STREAM = _require2.STREAM,\n  TYPE_DISCRIMINATOR = _require2.TYPE_DISCRIMINATOR;\nvar _require3 = require('./ClientID'),\n  generateClientID = _require3.generateClientID,\n  isClientID = _require3.isClientID;\nvar _require4 = require('./RelayConcreteVariables'),\n  getLocalVariables = _require4.getLocalVariables;\nvar _require5 = require('./RelayErrorTrie'),\n  buildErrorTrie = _require5.buildErrorTrie,\n  getErrorsByKey = _require5.getErrorsByKey,\n  getNestedErrorTrieByKey = _require5.getNestedErrorTrieByKey;\nvar RelayModernRecord = require('./RelayModernRecord');\nvar _require6 = require('./RelayModernSelector'),\n  createNormalizationSelector = _require6.createNormalizationSelector;\nvar _require7 = require('./RelayStoreUtils'),\n  ROOT_ID = _require7.ROOT_ID,\n  TYPENAME_KEY = _require7.TYPENAME_KEY,\n  getArgumentValues = _require7.getArgumentValues,\n  getHandleStorageKey = _require7.getHandleStorageKey,\n  getModuleComponentKey = _require7.getModuleComponentKey,\n  getModuleOperationKey = _require7.getModuleOperationKey,\n  getStorageKey = _require7.getStorageKey;\nvar _require8 = require('./TypeID'),\n  TYPE_SCHEMA_TYPE = _require8.TYPE_SCHEMA_TYPE,\n  generateTypeID = _require8.generateTypeID;\nvar areEqual = require(\"fbjs/lib/areEqual\");\nvar invariant = require('invariant');\nvar warning = require(\"fbjs/lib/warning\");\nfunction normalize(recordSource, selector, response, options, errors) {\n  var dataID = selector.dataID,\n    node = selector.node,\n    variables = selector.variables;\n  var normalizer = new RelayResponseNormalizer(recordSource, variables, options);\n  return normalizer.normalizeResponse(node, dataID, response, errors);\n}\nvar RelayResponseNormalizer = /*#__PURE__*/function () {\n  function RelayResponseNormalizer(recordSource, variables, options) {\n    this._actorIdentifier = options.actorIdentifier;\n    this._getDataId = options.getDataID;\n    this._handleFieldPayloads = [];\n    this._treatMissingFieldsAsNull = options.treatMissingFieldsAsNull;\n    this._incrementalPlaceholders = [];\n    this._isClientExtension = false;\n    this._isUnmatchedAbstractType = false;\n    this._followupPayloads = [];\n    this._path = options.path ? (0, _toConsumableArray2[\"default\"])(options.path) : [];\n    this._recordSource = recordSource;\n    this._variables = variables;\n    this._shouldProcessClientComponents = options.shouldProcessClientComponents;\n  }\n  var _proto = RelayResponseNormalizer.prototype;\n  _proto.normalizeResponse = function normalizeResponse(node, dataID, data, errors) {\n    var record = this._recordSource.get(dataID);\n    !record ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected root record `%s` to exist.', dataID) : invariant(false) : void 0;\n    this._assignClientAbstractTypes(node);\n    this._errorTrie = buildErrorTrie(errors);\n    this._traverseSelections(node, record, data);\n    return {\n      errors: errors,\n      fieldPayloads: this._handleFieldPayloads,\n      incrementalPlaceholders: this._incrementalPlaceholders,\n      followupPayloads: this._followupPayloads,\n      source: this._recordSource,\n      isFinal: false\n    };\n  };\n  _proto._assignClientAbstractTypes = function _assignClientAbstractTypes(node) {\n    var clientAbstractTypes = node.clientAbstractTypes;\n    if (clientAbstractTypes != null) {\n      for (var _i = 0, _Object$keys = Object.keys(clientAbstractTypes); _i < _Object$keys.length; _i++) {\n        var abstractType = _Object$keys[_i];\n        var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(clientAbstractTypes[abstractType]),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var concreteType = _step.value;\n            var typeID = generateTypeID(concreteType);\n            var typeRecord = this._recordSource.get(typeID);\n            if (typeRecord == null) {\n              typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);\n              this._recordSource.set(typeID, typeRecord);\n            }\n            RelayModernRecord.setValue(typeRecord, abstractType, true);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  };\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n  _proto._getRecordType = function _getRecordType(data) {\n    var typeName = data[TYPENAME_KEY];\n    !(typeName != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected a typename for record `%s`.', JSON.stringify(data, null, 2)) : invariant(false) : void 0;\n    return typeName;\n  };\n  _proto._traverseSelections = function _traverseSelections(node, record, data) {\n    for (var i = 0; i < node.selections.length; i++) {\n      var selection = node.selections[i];\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n        case LINKED_FIELD:\n          this._normalizeField(selection, record, data);\n          break;\n        case CONDITION:\n          var conditionValue = Boolean(this._getVariableValue(selection.condition));\n          if (conditionValue === selection.passingValue) {\n            this._traverseSelections(selection, record, data);\n          }\n          break;\n        case FRAGMENT_SPREAD:\n          {\n            var prevVariables = this._variables;\n            this._variables = getLocalVariables(this._variables, selection.fragment.argumentDefinitions, selection.args);\n            this._traverseSelections(selection.fragment, record, data);\n            this._variables = prevVariables;\n            break;\n          }\n        case INLINE_FRAGMENT:\n          {\n            var abstractKey = selection.abstractKey;\n            if (abstractKey == null) {\n              var typeName = RelayModernRecord.getType(record);\n              if (typeName === selection.type) {\n                this._traverseSelections(selection, record, data);\n              }\n            } else {\n              var implementsInterface = data.hasOwnProperty(abstractKey);\n              var _typeName = RelayModernRecord.getType(record);\n              var typeID = generateTypeID(_typeName);\n              var typeRecord = this._recordSource.get(typeID);\n              if (typeRecord == null) {\n                typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);\n                this._recordSource.set(typeID, typeRecord);\n              }\n              RelayModernRecord.setValue(typeRecord, abstractKey, implementsInterface);\n              if (implementsInterface) {\n                this._traverseSelections(selection, record, data);\n              }\n            }\n            break;\n          }\n        case TYPE_DISCRIMINATOR:\n          {\n            var _abstractKey = selection.abstractKey;\n            var _implementsInterface = data.hasOwnProperty(_abstractKey);\n            var _typeName2 = RelayModernRecord.getType(record);\n            var _typeID = generateTypeID(_typeName2);\n            var _typeRecord = this._recordSource.get(_typeID);\n            if (_typeRecord == null) {\n              _typeRecord = RelayModernRecord.create(_typeID, TYPE_SCHEMA_TYPE);\n              this._recordSource.set(_typeID, _typeRecord);\n            }\n            RelayModernRecord.setValue(_typeRecord, _abstractKey, _implementsInterface);\n            break;\n          }\n        case LINKED_HANDLE:\n        case SCALAR_HANDLE:\n          var args = selection.args ? getArgumentValues(selection.args, this._variables) : {};\n          var fieldKey = getStorageKey(selection, this._variables);\n          var handleKey = getHandleStorageKey(selection, this._variables);\n          this._handleFieldPayloads.push({\n            args: args,\n            dataID: RelayModernRecord.getDataID(record),\n            fieldKey: fieldKey,\n            handle: selection.handle,\n            handleKey: handleKey,\n            handleArgs: selection.handleArgs ? getArgumentValues(selection.handleArgs, this._variables) : {}\n          });\n          break;\n        case MODULE_IMPORT:\n          this._normalizeModuleImport(selection, record, data);\n          break;\n        case DEFER:\n          this._normalizeDefer(selection, record, data);\n          break;\n        case STREAM:\n          this._normalizeStream(selection, record, data);\n          break;\n        case CLIENT_EXTENSION:\n          var isClientExtension = this._isClientExtension;\n          this._isClientExtension = true;\n          this._traverseSelections(selection, record, data);\n          this._isClientExtension = isClientExtension;\n          break;\n        case CLIENT_COMPONENT:\n          if (this._shouldProcessClientComponents === false) {\n            break;\n          }\n          this._traverseSelections(selection.fragment, record, data);\n          break;\n        case ACTOR_CHANGE:\n          this._normalizeActorChange(selection, record, data);\n          break;\n        case RELAY_RESOLVER:\n          this._normalizeResolver(selection, record, data);\n          break;\n        case RELAY_LIVE_RESOLVER:\n          this._normalizeResolver(selection, record, data);\n          break;\n        case CLIENT_EDGE_TO_CLIENT_OBJECT:\n          this._normalizeResolver(selection.backingField, record, data);\n          break;\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n  };\n  _proto._normalizeResolver = function _normalizeResolver(resolver, record, data) {\n    if (resolver.fragment != null) {\n      this._traverseSelections(resolver.fragment, record, data);\n    }\n  };\n  _proto._normalizeDefer = function _normalizeDefer(defer, record, data) {\n    var isDeferred = defer[\"if\"] === null || this._getVariableValue(defer[\"if\"]);\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isDeferred === 'boolean', 'RelayResponseNormalizer: Expected value for @defer `if` argument to ' + 'be a boolean, got `%s`.', isDeferred) : void 0;\n    }\n    if (isDeferred === false) {\n      this._traverseSelections(defer, record, data);\n    } else {\n      this._incrementalPlaceholders.push({\n        kind: 'defer',\n        data: data,\n        label: defer.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        selector: createNormalizationSelector(defer, RelayModernRecord.getDataID(record), this._variables),\n        typeName: RelayModernRecord.getType(record),\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n  _proto._normalizeStream = function _normalizeStream(stream, record, data) {\n    this._traverseSelections(stream, record, data);\n    var isStreamed = stream[\"if\"] === null || this._getVariableValue(stream[\"if\"]);\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isStreamed === 'boolean', 'RelayResponseNormalizer: Expected value for @stream `if` argument ' + 'to be a boolean, got `%s`.', isStreamed) : void 0;\n    }\n    if (isStreamed === true) {\n      this._incrementalPlaceholders.push({\n        kind: 'stream',\n        label: stream.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        parentID: RelayModernRecord.getDataID(record),\n        node: stream,\n        variables: this._variables,\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n  _proto._normalizeModuleImport = function _normalizeModuleImport(moduleImport, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for @module to be an object.') : invariant(false) : void 0;\n    var typeName = RelayModernRecord.getType(record);\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var componentReference = moduleImport.componentModuleProvider || data[componentKey];\n    RelayModernRecord.setValue(record, componentKey, componentReference !== null && componentReference !== void 0 ? componentReference : null);\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = moduleImport.operationModuleProvider || data[operationKey];\n    RelayModernRecord.setValue(record, operationKey, operationReference !== null && operationReference !== void 0 ? operationReference : null);\n    if (operationReference != null) {\n      this._followupPayloads.push({\n        kind: 'ModuleImportPayload',\n        args: moduleImport.args,\n        data: data,\n        dataID: RelayModernRecord.getDataID(record),\n        operationReference: operationReference,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        typeName: typeName,\n        variables: this._variables,\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n  _proto._normalizeField = function _normalizeField(selection, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'writeField(): Expected data for field `%s` to be an object.', selection.name) : invariant(false) : void 0;\n    var responseKey = selection.alias || selection.name;\n    var storageKey = getStorageKey(selection, this._variables);\n    var fieldValue = data[responseKey];\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;\n        if (isOptionalField) {\n          return;\n        } else if (!this._treatMissingFieldsAsNull) {\n          if (process.env.NODE_ENV !== \"production\") {\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n          }\n          return;\n        }\n      }\n      if (process.env.NODE_ENV !== \"production\") {\n        if (selection.kind === SCALAR_FIELD) {\n          this._validateConflictingFieldsWithIdenticalId(record, storageKey, null);\n        }\n      }\n      RelayModernRecord.setValue(record, storageKey, null);\n      var errorTrie = this._errorTrie;\n      if (errorTrie != null) {\n        var errors = getErrorsByKey(errorTrie, responseKey);\n        if (errors != null) {\n          RelayModernRecord.setErrors(record, storageKey, errors);\n        }\n      }\n      return;\n    }\n    if (selection.kind === SCALAR_FIELD) {\n      if (process.env.NODE_ENV !== \"production\") {\n        this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);\n      }\n      RelayModernRecord.setValue(record, storageKey, fieldValue);\n    } else if (selection.kind === LINKED_FIELD) {\n      this._path.push(responseKey);\n      var oldErrorTrie = this._errorTrie;\n      this._errorTrie = oldErrorTrie == null ? null : getNestedErrorTrieByKey(oldErrorTrie, responseKey);\n      if (selection.plural) {\n        this._normalizePluralLink(selection, record, storageKey, fieldValue);\n      } else {\n        this._normalizeLink(selection, record, storageKey, fieldValue);\n      }\n      this._errorTrie = oldErrorTrie;\n      this._path.pop();\n    } else {\n      selection;\n      !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s` during normalization.', selection.kind) : invariant(false) : void 0;\n    }\n  };\n  _proto._normalizeActorChange = function _normalizeActorChange(selection, record, data) {\n    var _field$concreteType;\n    var field = selection.linkedField;\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '_normalizeActorChange(): Expected data for field `%s` to be an object.', field.name) : invariant(false) : void 0;\n    var responseKey = field.alias || field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var fieldValue = data[responseKey];\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;\n        if (isOptionalField) {\n          return;\n        } else if (!this._treatMissingFieldsAsNull) {\n          if (process.env.NODE_ENV !== \"production\") {\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n          }\n          return;\n        }\n      }\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n    var actorIdentifier = getActorIdentifierFromPayload(fieldValue);\n    if (actorIdentifier == null) {\n      if (process.env.NODE_ENV !== \"production\") {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload. Payload is `%s`.', ACTOR_IDENTIFIER_FIELD_NAME, JSON.stringify(fieldValue, null, 2)) : void 0;\n      }\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n    var typeName = (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : this._getRecordType(fieldValue);\n    var nextID = this._getDataId(fieldValue, typeName) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : invariant(false) : void 0;\n    RelayModernRecord.setActorLinkedRecordID(record, storageKey, actorIdentifier, nextID);\n    this._followupPayloads.push({\n      kind: 'ActorPayload',\n      data: fieldValue,\n      dataID: nextID,\n      path: [].concat((0, _toConsumableArray2[\"default\"])(this._path), [responseKey]),\n      typeName: typeName,\n      variables: this._variables,\n      node: field,\n      actorIdentifier: actorIdentifier\n    });\n  };\n  _proto._normalizeLink = function _normalizeLink(field, record, storageKey, fieldValue) {\n    var _field$concreteType2;\n    !(typeof fieldValue === 'object' && fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an object.', storageKey) : invariant(false) : void 0;\n    var nextID = this._getDataId(fieldValue, (_field$concreteType2 = field.concreteType) !== null && _field$concreteType2 !== void 0 ? _field$concreteType2 : this._getRecordType(fieldValue)) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : invariant(false) : void 0;\n    if (process.env.NODE_ENV !== \"production\") {\n      this._validateConflictingLinkedFieldsWithIdenticalId(RelayModernRecord.getLinkedRecordID(record, storageKey), nextID, storageKey);\n    }\n    RelayModernRecord.setLinkedRecordID(record, storageKey, nextID);\n    var nextRecord = this._recordSource.get(nextID);\n    if (!nextRecord) {\n      var typeName = field.concreteType || this._getRecordType(fieldValue);\n      nextRecord = RelayModernRecord.create(nextID, typeName);\n      this._recordSource.set(nextID, nextRecord);\n    } else if (process.env.NODE_ENV !== \"production\") {\n      this._validateRecordType(nextRecord, field, fieldValue);\n    }\n    this._traverseSelections(field, nextRecord, fieldValue);\n  };\n  _proto._normalizePluralLink = function _normalizePluralLink(field, record, storageKey, fieldValue) {\n    var _this = this;\n    !Array.isArray(fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an array ' + 'of objects.', storageKey) : invariant(false) : void 0;\n    var prevIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    var nextIDs = [];\n    fieldValue.forEach(function (item, nextIndex) {\n      var _field$concreteType3;\n      if (item == null) {\n        nextIDs.push(item);\n        return;\n      }\n      _this._path.push(String(nextIndex));\n      var oldErrorTrie = _this._errorTrie;\n      _this._errorTrie = oldErrorTrie == null ? null : getNestedErrorTrieByKey(oldErrorTrie, nextIndex);\n      !(typeof item === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected elements for field `%s` to be ' + 'objects.', storageKey) : invariant(false) : void 0;\n      var nextID = _this._getDataId(item, (_field$concreteType3 = field.concreteType) !== null && _field$concreteType3 !== void 0 ? _field$concreteType3 : _this._getRecordType(item)) || prevIDs && prevIDs[nextIndex] || generateClientID(RelayModernRecord.getDataID(record), storageKey, nextIndex);\n      !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : invariant(false) : void 0;\n      nextIDs.push(nextID);\n      var nextRecord = _this._recordSource.get(nextID);\n      if (!nextRecord) {\n        var typeName = field.concreteType || _this._getRecordType(item);\n        nextRecord = RelayModernRecord.create(nextID, typeName);\n        _this._recordSource.set(nextID, nextRecord);\n      } else if (process.env.NODE_ENV !== \"production\") {\n        _this._validateRecordType(nextRecord, field, item);\n      }\n      if (process.env.NODE_ENV !== \"production\") {\n        if (prevIDs) {\n          _this._validateConflictingLinkedFieldsWithIdenticalId(prevIDs[nextIndex], nextID, storageKey);\n        }\n      }\n      _this._traverseSelections(field, nextRecord, item);\n      _this._errorTrie = oldErrorTrie;\n      _this._path.pop();\n    });\n    RelayModernRecord.setLinkedRecordIDs(record, storageKey, nextIDs);\n  };\n  _proto._validateRecordType = function _validateRecordType(record, field, payload) {\n    var _field$concreteType4;\n    var typeName = (_field$concreteType4 = field.concreteType) !== null && _field$concreteType4 !== void 0 ? _field$concreteType4 : this._getRecordType(payload);\n    var dataID = RelayModernRecord.getDataID(record);\n    process.env.NODE_ENV !== \"production\" ? warning(isClientID(dataID) && dataID !== ROOT_ID || RelayModernRecord.getType(record) === typeName, 'RelayResponseNormalizer: Invalid record `%s`. Expected %s to be ' + 'consistent, but the record was assigned conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', dataID, TYPENAME_KEY, RelayModernRecord.getType(record), typeName) : void 0;\n  };\n  _proto._validateConflictingFieldsWithIdenticalId = function _validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue) {\n    if (process.env.NODE_ENV !== \"production\") {\n      var dataID = RelayModernRecord.getDataID(record);\n      var previousValue = RelayModernRecord.getValue(record, storageKey);\n      process.env.NODE_ENV !== \"production\" ? warning(storageKey === TYPENAME_KEY || previousValue === undefined || areEqual(previousValue, fieldValue), 'RelayResponseNormalizer: Invalid record. The record contains two ' + 'instances of the same id: `%s` with conflicting field, %s and its values: %s and %s. ' + 'If two fields are different but share ' + 'the same id, one field will overwrite the other.', dataID, storageKey, previousValue, fieldValue) : void 0;\n    }\n  };\n  _proto._validateConflictingLinkedFieldsWithIdenticalId = function _validateConflictingLinkedFieldsWithIdenticalId(prevID, nextID, storageKey) {\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(prevID === undefined || prevID === nextID, 'RelayResponseNormalizer: Invalid record. The record contains ' + 'references to the conflicting field, %s and its id values: %s and %s. ' + 'We need to make sure that the record the field points ' + 'to remains consistent or one field will overwrite the other.', storageKey, prevID, nextID) : void 0;\n    }\n  };\n  return RelayResponseNormalizer;\n}();\nmodule.exports = {\n  normalize: normalize\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}