{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar ConnectionHandler = require('./ConnectionHandler');\nvar ConnectionInterface = require('./ConnectionInterface');\nvar invariant = require('invariant');\nvar warning = require(\"fbjs/lib/warning\");\nvar DeleteRecordHandler = {\n  update: function update(store, payload) {\n    var record = store.get(payload.dataID);\n    if (record != null) {\n      var idOrIds = record.getValue(payload.fieldKey);\n      if (typeof idOrIds === 'string') {\n        store[\"delete\"](idOrIds);\n      } else if (Array.isArray(idOrIds)) {\n        idOrIds.forEach(function (id) {\n          if (typeof id === 'string') {\n            store[\"delete\"](id);\n          }\n        });\n      }\n    }\n  }\n};\nvar DeleteEdgeHandler = {\n  update: function update(store, payload) {\n    var record = store.get(payload.dataID);\n    if (record == null) {\n      return;\n    }\n    var connections = payload.handleArgs.connections;\n    !(connections != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : invariant(false) : void 0;\n    var idOrIds = record.getValue(payload.fieldKey);\n    var idList = Array.isArray(idOrIds) ? idOrIds : [idOrIds];\n    idList.forEach(function (id) {\n      if (typeof id === 'string') {\n        var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(connections),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var connectionID = _step.value;\n            var connection = store.get(connectionID);\n            if (connection == null) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, \"[Relay] The connection with id `%s` doesn't exist.\", connectionID) : void 0;\n              continue;\n            }\n            ConnectionHandler.deleteNode(connection, id);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    });\n  }\n};\nvar AppendEdgeHandler = {\n  update: edgeUpdater(ConnectionHandler.insertEdgeAfter)\n};\nvar PrependEdgeHandler = {\n  update: edgeUpdater(ConnectionHandler.insertEdgeBefore)\n};\nvar AppendNodeHandler = {\n  update: nodeUpdater(ConnectionHandler.insertEdgeAfter)\n};\nvar PrependNodeHandler = {\n  update: nodeUpdater(ConnectionHandler.insertEdgeBefore)\n};\nfunction edgeUpdater(insertFn) {\n  return function (store, payload) {\n    var _serverEdges;\n    var record = store.get(payload.dataID);\n    if (record == null) {\n      return;\n    }\n    var connections = payload.handleArgs.connections;\n    !(connections != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : invariant(false) : void 0;\n    var singleServerEdge, serverEdges;\n    try {\n      singleServerEdge = record.getLinkedRecord(payload.fieldKey);\n    } catch (_unused) {}\n    if (!singleServerEdge) {\n      try {\n        serverEdges = record.getLinkedRecords(payload.fieldKey);\n      } catch (_unused2) {}\n    }\n    if (singleServerEdge == null && serverEdges == null) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'MutationHandlers: Expected the server edge to be non-null.') : void 0;\n      return;\n    }\n    var _ConnectionInterface$ = ConnectionInterface.get(),\n      NODE = _ConnectionInterface$.NODE,\n      EDGES = _ConnectionInterface$.EDGES;\n    var serverEdgeList = (_serverEdges = serverEdges) !== null && _serverEdges !== void 0 ? _serverEdges : [singleServerEdge];\n    var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(serverEdgeList),\n      _step2;\n    try {\n      var _loop = function _loop() {\n        var serverEdge = _step2.value;\n        if (serverEdge == null) {\n          return \"continue\";\n        }\n        var serverNode = serverEdge.getLinkedRecord('node');\n        if (!serverNode) {\n          return \"continue\";\n        }\n        var serverNodeId = serverNode.getDataID();\n        var _iterator3 = (0, _createForOfIteratorHelper2[\"default\"])(connections),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var connectionID = _step3.value;\n            var connection = store.get(connectionID);\n            if (connection == null) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, \"[Relay] The connection with id `%s` doesn't exist.\", connectionID) : void 0;\n              continue;\n            }\n            var nodeAlreadyExistsInConnection = (_connection$getLinked = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked === void 0 ? void 0 : _connection$getLinked.some(function (edge) {\n              var _edge$getLinkedRecord;\n              return (edge === null || edge === void 0 ? void 0 : (_edge$getLinkedRecord = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord === void 0 ? void 0 : _edge$getLinkedRecord.getDataID()) === serverNodeId;\n            });\n            if (nodeAlreadyExistsInConnection) {\n              continue;\n            }\n            var clientEdge = ConnectionHandler.buildConnectionEdge(store, connection, serverEdge);\n            !(clientEdge != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Failed to build the edge.') : invariant(false) : void 0;\n            insertFn(connection, clientEdge);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      };\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _connection$getLinked;\n        var _ret = _loop();\n        if (_ret === \"continue\") continue;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  };\n}\nfunction nodeUpdater(insertFn) {\n  return function (store, payload) {\n    var _serverNodes;\n    var record = store.get(payload.dataID);\n    if (record == null) {\n      return;\n    }\n    var _payload$handleArgs = payload.handleArgs,\n      connections = _payload$handleArgs.connections,\n      edgeTypeName = _payload$handleArgs.edgeTypeName;\n    !(connections != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : invariant(false) : void 0;\n    !(edgeTypeName != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected edge typename to be specified.') : invariant(false) : void 0;\n    var singleServerNode;\n    var serverNodes;\n    try {\n      singleServerNode = record.getLinkedRecord(payload.fieldKey);\n    } catch (_unused3) {}\n    if (!singleServerNode) {\n      try {\n        serverNodes = record.getLinkedRecords(payload.fieldKey);\n      } catch (_unused4) {}\n    }\n    if (singleServerNode == null && serverNodes == null) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'MutationHandlers: Expected target node to exist.') : void 0;\n      return;\n    }\n    var _ConnectionInterface$2 = ConnectionInterface.get(),\n      NODE = _ConnectionInterface$2.NODE,\n      EDGES = _ConnectionInterface$2.EDGES;\n    var serverNodeList = (_serverNodes = serverNodes) !== null && _serverNodes !== void 0 ? _serverNodes : [singleServerNode];\n    var _iterator4 = (0, _createForOfIteratorHelper2[\"default\"])(serverNodeList),\n      _step4;\n    try {\n      var _loop2 = function _loop2() {\n        var serverNode = _step4.value;\n        if (serverNode == null) {\n          return \"continue\";\n        }\n        var serverNodeId = serverNode.getDataID();\n        var _iterator5 = (0, _createForOfIteratorHelper2[\"default\"])(connections),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var connectionID = _step5.value;\n            var connection = store.get(connectionID);\n            if (connection == null) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, \"[Relay] The connection with id `%s` doesn't exist.\", connectionID) : void 0;\n              continue;\n            }\n            var nodeAlreadyExistsInConnection = (_connection$getLinked2 = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked2 === void 0 ? void 0 : _connection$getLinked2.some(function (edge) {\n              var _edge$getLinkedRecord2;\n              return (edge === null || edge === void 0 ? void 0 : (_edge$getLinkedRecord2 = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord2 === void 0 ? void 0 : _edge$getLinkedRecord2.getDataID()) === serverNodeId;\n            });\n            if (nodeAlreadyExistsInConnection) {\n              continue;\n            }\n            var clientEdge = ConnectionHandler.createEdge(store, connection, serverNode, edgeTypeName);\n            !(clientEdge != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Failed to build the edge.') : invariant(false) : void 0;\n            insertFn(connection, clientEdge);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      };\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _connection$getLinked2;\n        var _ret2 = _loop2();\n        if (_ret2 === \"continue\") continue;\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  };\n}\nmodule.exports = {\n  AppendEdgeHandler: AppendEdgeHandler,\n  DeleteRecordHandler: DeleteRecordHandler,\n  PrependEdgeHandler: PrependEdgeHandler,\n  AppendNodeHandler: AppendNodeHandler,\n  PrependNodeHandler: PrependNodeHandler,\n  DeleteEdgeHandler: DeleteEdgeHandler\n};","map":{"version":3,"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","ConnectionHandler","ConnectionInterface","invariant","warning","DeleteRecordHandler","update","store","payload","record","get","dataID","idOrIds","getValue","fieldKey","Array","isArray","forEach","id","DeleteEdgeHandler","connections","handleArgs","process","env","NODE_ENV","idList","_iterator","_step","s","n","done","connectionID","value","connection","deleteNode","err","e","f","AppendEdgeHandler","edgeUpdater","insertEdgeAfter","PrependEdgeHandler","insertEdgeBefore","AppendNodeHandler","nodeUpdater","PrependNodeHandler","insertFn","_serverEdges","singleServerEdge","serverEdges","getLinkedRecord","_unused","getLinkedRecords","_unused2","_ConnectionInterface$","NODE","EDGES","serverEdgeList","_iterator2","_step2","_loop","serverEdge","serverNode","serverNodeId","getDataID","_iterator3","_step3","nodeAlreadyExistsInConnection","_connection$getLinked","some","edge","_edge$getLinkedRecord","clientEdge","buildConnectionEdge","_ret","_serverNodes","_payload$handleArgs","edgeTypeName","singleServerNode","serverNodes","_unused3","_unused4","_ConnectionInterface$2","serverNodeList","_iterator4","_step4","_loop2","_iterator5","_step5","_connection$getLinked2","_edge$getLinkedRecord2","createEdge","_ret2","module","exports"],"sources":["/Users/joaoluismoraes/Desktop/woovi-challenge/web/node_modules/relay-runtime/lib/handlers/connection/MutationHandlers.js"],"sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar ConnectionHandler = require('./ConnectionHandler');\nvar ConnectionInterface = require('./ConnectionInterface');\nvar invariant = require('invariant');\nvar warning = require(\"fbjs/lib/warning\");\nvar DeleteRecordHandler = {\n  update: function update(store, payload) {\n    var record = store.get(payload.dataID);\n    if (record != null) {\n      var idOrIds = record.getValue(payload.fieldKey);\n      if (typeof idOrIds === 'string') {\n        store[\"delete\"](idOrIds);\n      } else if (Array.isArray(idOrIds)) {\n        idOrIds.forEach(function (id) {\n          if (typeof id === 'string') {\n            store[\"delete\"](id);\n          }\n        });\n      }\n    }\n  }\n};\nvar DeleteEdgeHandler = {\n  update: function update(store, payload) {\n    var record = store.get(payload.dataID);\n    if (record == null) {\n      return;\n    }\n    var connections = payload.handleArgs.connections;\n    !(connections != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : invariant(false) : void 0;\n    var idOrIds = record.getValue(payload.fieldKey);\n    var idList = Array.isArray(idOrIds) ? idOrIds : [idOrIds];\n    idList.forEach(function (id) {\n      if (typeof id === 'string') {\n        var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(connections),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var connectionID = _step.value;\n            var connection = store.get(connectionID);\n            if (connection == null) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, \"[Relay] The connection with id `%s` doesn't exist.\", connectionID) : void 0;\n              continue;\n            }\n            ConnectionHandler.deleteNode(connection, id);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    });\n  }\n};\nvar AppendEdgeHandler = {\n  update: edgeUpdater(ConnectionHandler.insertEdgeAfter)\n};\nvar PrependEdgeHandler = {\n  update: edgeUpdater(ConnectionHandler.insertEdgeBefore)\n};\nvar AppendNodeHandler = {\n  update: nodeUpdater(ConnectionHandler.insertEdgeAfter)\n};\nvar PrependNodeHandler = {\n  update: nodeUpdater(ConnectionHandler.insertEdgeBefore)\n};\nfunction edgeUpdater(insertFn) {\n  return function (store, payload) {\n    var _serverEdges;\n    var record = store.get(payload.dataID);\n    if (record == null) {\n      return;\n    }\n    var connections = payload.handleArgs.connections;\n    !(connections != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : invariant(false) : void 0;\n    var singleServerEdge, serverEdges;\n    try {\n      singleServerEdge = record.getLinkedRecord(payload.fieldKey);\n    } catch (_unused) {}\n    if (!singleServerEdge) {\n      try {\n        serverEdges = record.getLinkedRecords(payload.fieldKey);\n      } catch (_unused2) {}\n    }\n    if (singleServerEdge == null && serverEdges == null) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'MutationHandlers: Expected the server edge to be non-null.') : void 0;\n      return;\n    }\n    var _ConnectionInterface$ = ConnectionInterface.get(),\n      NODE = _ConnectionInterface$.NODE,\n      EDGES = _ConnectionInterface$.EDGES;\n    var serverEdgeList = (_serverEdges = serverEdges) !== null && _serverEdges !== void 0 ? _serverEdges : [singleServerEdge];\n    var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(serverEdgeList),\n      _step2;\n    try {\n      var _loop = function _loop() {\n        var serverEdge = _step2.value;\n        if (serverEdge == null) {\n          return \"continue\";\n        }\n        var serverNode = serverEdge.getLinkedRecord('node');\n        if (!serverNode) {\n          return \"continue\";\n        }\n        var serverNodeId = serverNode.getDataID();\n        var _iterator3 = (0, _createForOfIteratorHelper2[\"default\"])(connections),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var connectionID = _step3.value;\n            var connection = store.get(connectionID);\n            if (connection == null) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, \"[Relay] The connection with id `%s` doesn't exist.\", connectionID) : void 0;\n              continue;\n            }\n            var nodeAlreadyExistsInConnection = (_connection$getLinked = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked === void 0 ? void 0 : _connection$getLinked.some(function (edge) {\n              var _edge$getLinkedRecord;\n              return (edge === null || edge === void 0 ? void 0 : (_edge$getLinkedRecord = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord === void 0 ? void 0 : _edge$getLinkedRecord.getDataID()) === serverNodeId;\n            });\n            if (nodeAlreadyExistsInConnection) {\n              continue;\n            }\n            var clientEdge = ConnectionHandler.buildConnectionEdge(store, connection, serverEdge);\n            !(clientEdge != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Failed to build the edge.') : invariant(false) : void 0;\n            insertFn(connection, clientEdge);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      };\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _connection$getLinked;\n        var _ret = _loop();\n        if (_ret === \"continue\") continue;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  };\n}\nfunction nodeUpdater(insertFn) {\n  return function (store, payload) {\n    var _serverNodes;\n    var record = store.get(payload.dataID);\n    if (record == null) {\n      return;\n    }\n    var _payload$handleArgs = payload.handleArgs,\n      connections = _payload$handleArgs.connections,\n      edgeTypeName = _payload$handleArgs.edgeTypeName;\n    !(connections != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : invariant(false) : void 0;\n    !(edgeTypeName != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected edge typename to be specified.') : invariant(false) : void 0;\n    var singleServerNode;\n    var serverNodes;\n    try {\n      singleServerNode = record.getLinkedRecord(payload.fieldKey);\n    } catch (_unused3) {}\n    if (!singleServerNode) {\n      try {\n        serverNodes = record.getLinkedRecords(payload.fieldKey);\n      } catch (_unused4) {}\n    }\n    if (singleServerNode == null && serverNodes == null) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'MutationHandlers: Expected target node to exist.') : void 0;\n      return;\n    }\n    var _ConnectionInterface$2 = ConnectionInterface.get(),\n      NODE = _ConnectionInterface$2.NODE,\n      EDGES = _ConnectionInterface$2.EDGES;\n    var serverNodeList = (_serverNodes = serverNodes) !== null && _serverNodes !== void 0 ? _serverNodes : [singleServerNode];\n    var _iterator4 = (0, _createForOfIteratorHelper2[\"default\"])(serverNodeList),\n      _step4;\n    try {\n      var _loop2 = function _loop2() {\n        var serverNode = _step4.value;\n        if (serverNode == null) {\n          return \"continue\";\n        }\n        var serverNodeId = serverNode.getDataID();\n        var _iterator5 = (0, _createForOfIteratorHelper2[\"default\"])(connections),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var connectionID = _step5.value;\n            var connection = store.get(connectionID);\n            if (connection == null) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, \"[Relay] The connection with id `%s` doesn't exist.\", connectionID) : void 0;\n              continue;\n            }\n            var nodeAlreadyExistsInConnection = (_connection$getLinked2 = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked2 === void 0 ? void 0 : _connection$getLinked2.some(function (edge) {\n              var _edge$getLinkedRecord2;\n              return (edge === null || edge === void 0 ? void 0 : (_edge$getLinkedRecord2 = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord2 === void 0 ? void 0 : _edge$getLinkedRecord2.getDataID()) === serverNodeId;\n            });\n            if (nodeAlreadyExistsInConnection) {\n              continue;\n            }\n            var clientEdge = ConnectionHandler.createEdge(store, connection, serverNode, edgeTypeName);\n            !(clientEdge != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Failed to build the edge.') : invariant(false) : void 0;\n            insertFn(connection, clientEdge);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      };\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _connection$getLinked2;\n        var _ret2 = _loop2();\n        if (_ret2 === \"continue\") continue;\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  };\n}\nmodule.exports = {\n  AppendEdgeHandler: AppendEdgeHandler,\n  DeleteRecordHandler: DeleteRecordHandler,\n  PrependEdgeHandler: PrependEdgeHandler,\n  AppendNodeHandler: AppendNodeHandler,\n  PrependNodeHandler: PrependNodeHandler,\n  DeleteEdgeHandler: DeleteEdgeHandler\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}