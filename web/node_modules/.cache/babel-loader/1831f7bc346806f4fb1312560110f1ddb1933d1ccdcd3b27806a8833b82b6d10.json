{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar getOperation = require('../util/getOperation');\nvar RelayConcreteNode = require('../util/RelayConcreteNode');\nvar cloneRelayHandleSourceField = require('./cloneRelayHandleSourceField');\nvar getOutputTypeRecordIDs = require('./experimental-live-resolvers/getOutputTypeRecordIDs');\nvar _require = require('./RelayConcreteVariables'),\n  getLocalVariables = _require.getLocalVariables;\nvar RelayModernRecord = require('./RelayModernRecord');\nvar RelayStoreUtils = require('./RelayStoreUtils');\nvar _require2 = require('./TypeID'),\n  generateTypeID = _require2.generateTypeID;\nvar invariant = require('invariant');\nvar ACTOR_CHANGE = RelayConcreteNode.ACTOR_CHANGE,\n  CONDITION = RelayConcreteNode.CONDITION,\n  CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT,\n  CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION,\n  DEFER = RelayConcreteNode.DEFER,\n  FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD,\n  INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT,\n  LINKED_FIELD = RelayConcreteNode.LINKED_FIELD,\n  MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT,\n  LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE,\n  SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD,\n  SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE,\n  STREAM = RelayConcreteNode.STREAM,\n  TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR,\n  RELAY_RESOLVER = RelayConcreteNode.RELAY_RESOLVER,\n  RELAY_LIVE_RESOLVER = RelayConcreteNode.RELAY_LIVE_RESOLVER,\n  CLIENT_EDGE_TO_CLIENT_OBJECT = RelayConcreteNode.CLIENT_EDGE_TO_CLIENT_OBJECT;\nvar getStorageKey = RelayStoreUtils.getStorageKey,\n  getModuleOperationKey = RelayStoreUtils.getModuleOperationKey;\nfunction mark(recordSource, selector, references, operationLoader, shouldProcessClientComponents) {\n  var dataID = selector.dataID,\n    node = selector.node,\n    variables = selector.variables;\n  var marker = new RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents);\n  marker.mark(node, dataID);\n}\nvar RelayReferenceMarker = /*#__PURE__*/function () {\n  function RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents) {\n    this._operationLoader = operationLoader !== null && operationLoader !== void 0 ? operationLoader : null;\n    this._operationName = null;\n    this._recordSource = recordSource;\n    this._references = references;\n    this._variables = variables;\n    this._shouldProcessClientComponents = shouldProcessClientComponents;\n  }\n  var _proto = RelayReferenceMarker.prototype;\n  _proto.mark = function mark(node, dataID) {\n    if (node.kind === 'Operation' || node.kind === 'SplitOperation') {\n      this._operationName = node.name;\n    }\n    this._traverse(node, dataID);\n  };\n  _proto._traverse = function _traverse(node, dataID) {\n    this._references.add(dataID);\n    var record = this._recordSource.get(dataID);\n    if (record == null) {\n      return;\n    }\n    this._traverseSelections(node.selections, record);\n  };\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n  _proto._traverseSelections = function _traverseSelections(selections, record) {\n    var _this = this;\n    selections.forEach(function (selection) {\n      switch (selection.kind) {\n        case ACTOR_CHANGE:\n          _this._traverseLink(selection.linkedField, record);\n          break;\n        case LINKED_FIELD:\n          if (selection.plural) {\n            _this._traversePluralLink(selection, record);\n          } else {\n            _this._traverseLink(selection, record);\n          }\n          break;\n        case CONDITION:\n          var conditionValue = Boolean(_this._getVariableValue(selection.condition));\n          if (conditionValue === selection.passingValue) {\n            _this._traverseSelections(selection.selections, record);\n          }\n          break;\n        case INLINE_FRAGMENT:\n          if (selection.abstractKey == null) {\n            var typeName = RelayModernRecord.getType(record);\n            if (typeName != null && typeName === selection.type || typeName === RelayStoreUtils.ROOT_TYPE) {\n              _this._traverseSelections(selection.selections, record);\n            }\n          } else {\n            var _typeName = RelayModernRecord.getType(record);\n            var typeID = generateTypeID(_typeName);\n            _this._references.add(typeID);\n            _this._traverseSelections(selection.selections, record);\n          }\n          break;\n        case FRAGMENT_SPREAD:\n          var prevVariables = _this._variables;\n          _this._variables = getLocalVariables(_this._variables, selection.fragment.argumentDefinitions, selection.args);\n          _this._traverseSelections(selection.fragment.selections, record);\n          _this._variables = prevVariables;\n          break;\n        case LINKED_HANDLE:\n          var handleField = cloneRelayHandleSourceField(selection, selections, _this._variables);\n          if (handleField.plural) {\n            _this._traversePluralLink(handleField, record);\n          } else {\n            _this._traverseLink(handleField, record);\n          }\n          break;\n        case DEFER:\n        case STREAM:\n          _this._traverseSelections(selection.selections, record);\n          break;\n        case SCALAR_FIELD:\n        case SCALAR_HANDLE:\n          break;\n        case TYPE_DISCRIMINATOR:\n          {\n            var _typeName2 = RelayModernRecord.getType(record);\n            var _typeID = generateTypeID(_typeName2);\n            _this._references.add(_typeID);\n            break;\n          }\n        case MODULE_IMPORT:\n          _this._traverseModuleImport(selection, record);\n          break;\n        case CLIENT_EXTENSION:\n          _this._traverseSelections(selection.selections, record);\n          break;\n        case CLIENT_COMPONENT:\n          if (_this._shouldProcessClientComponents === false) {\n            break;\n          }\n          _this._traverseSelections(selection.fragment.selections, record);\n          break;\n        case RELAY_RESOLVER:\n          _this._traverseResolverField(selection, record);\n          break;\n        case RELAY_LIVE_RESOLVER:\n          _this._traverseResolverField(selection, record);\n          break;\n        case CLIENT_EDGE_TO_CLIENT_OBJECT:\n          _this._traverseClientEdgeToClientObject(selection, record);\n          break;\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Unknown AST node `%s`.', selection) : invariant(false) : void 0;\n      }\n    });\n  };\n  _proto._traverseClientEdgeToClientObject = function _traverseClientEdgeToClientObject(field, record) {\n    var dataID = this._traverseResolverField(field.backingField, record);\n    if (dataID == null) {\n      return;\n    }\n    var resolverRecord = this._recordSource.get(dataID);\n    if (resolverRecord == null) {\n      return;\n    }\n    if (field.backingField.isOutputType) {\n      var outputTypeRecordIDs = getOutputTypeRecordIDs(resolverRecord);\n      if (outputTypeRecordIDs != null) {\n        var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(outputTypeRecordIDs),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _dataID = _step.value;\n            this._references.add(_dataID);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    } else {\n      var linkedField = field.linkedField;\n      var concreteType = linkedField.concreteType;\n      if (concreteType == null) {\n        return;\n      }\n      if (linkedField.plural) {\n        var dataIDs = RelayModernRecord.getResolverLinkedRecordIDs(resolverRecord, concreteType);\n        if (dataIDs != null) {\n          var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(dataIDs),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _dataID2 = _step2.value;\n              if (_dataID2 != null) {\n                this._traverse(linkedField, _dataID2);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } else {\n        var _dataID3 = RelayModernRecord.getResolverLinkedRecordID(resolverRecord, concreteType);\n        if (_dataID3 != null) {\n          this._traverse(linkedField, _dataID3);\n        }\n      }\n    }\n  };\n  _proto._traverseResolverField = function _traverseResolverField(field, record) {\n    var storageKey = getStorageKey(field, this._variables);\n    var dataID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n    if (dataID != null) {\n      this._references.add(dataID);\n    }\n    var fragment = field.fragment;\n    if (fragment != null) {\n      this._traverseSelections([fragment], record);\n    }\n    return dataID;\n  };\n  _proto._traverseModuleImport = function _traverseModuleImport(moduleImport, record) {\n    var _this$_operationName;\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Expected an operationLoader to be configured when using `@module`. ' + 'Could not load fragment `%s` in operation `%s`.', moduleImport.fragmentName, (_this$_operationName = this._operationName) !== null && _this$_operationName !== void 0 ? _this$_operationName : '(unknown)') : invariant(false) : void 0;\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = RelayModernRecord.getValue(record, operationKey);\n    if (operationReference == null) {\n      return;\n    }\n    var normalizationRootNode = operationLoader.get(operationReference);\n    if (normalizationRootNode != null) {\n      var operation = getOperation(normalizationRootNode);\n      var prevVariables = this._variables;\n      this._variables = getLocalVariables(this._variables, operation.argumentDefinitions, moduleImport.args);\n      this._traverseSelections(operation.selections, record);\n      this._variables = prevVariables;\n    }\n  };\n  _proto._traverseLink = function _traverseLink(field, record) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n    if (linkedID == null) {\n      return;\n    }\n    this._traverse(field, linkedID);\n  };\n  _proto._traversePluralLink = function _traversePluralLink(field, record) {\n    var _this2 = this;\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    if (linkedIDs == null) {\n      return;\n    }\n    linkedIDs.forEach(function (linkedID) {\n      if (linkedID != null) {\n        _this2._traverse(field, linkedID);\n      }\n    });\n  };\n  return RelayReferenceMarker;\n}();\nmodule.exports = {\n  mark: mark\n};","map":{"version":3,"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","getOperation","RelayConcreteNode","cloneRelayHandleSourceField","getOutputTypeRecordIDs","_require","getLocalVariables","RelayModernRecord","RelayStoreUtils","_require2","generateTypeID","invariant","ACTOR_CHANGE","CONDITION","CLIENT_COMPONENT","CLIENT_EXTENSION","DEFER","FRAGMENT_SPREAD","INLINE_FRAGMENT","LINKED_FIELD","MODULE_IMPORT","LINKED_HANDLE","SCALAR_FIELD","SCALAR_HANDLE","STREAM","TYPE_DISCRIMINATOR","RELAY_RESOLVER","RELAY_LIVE_RESOLVER","CLIENT_EDGE_TO_CLIENT_OBJECT","getStorageKey","getModuleOperationKey","mark","recordSource","selector","references","operationLoader","shouldProcessClientComponents","dataID","node","variables","marker","RelayReferenceMarker","_operationLoader","_operationName","_recordSource","_references","_variables","_shouldProcessClientComponents","_proto","prototype","kind","name","_traverse","add","record","get","_traverseSelections","selections","_getVariableValue","hasOwnProperty","process","env","NODE_ENV","_this","forEach","selection","_traverseLink","linkedField","plural","_traversePluralLink","conditionValue","Boolean","condition","passingValue","abstractKey","typeName","getType","type","ROOT_TYPE","_typeName","typeID","prevVariables","fragment","argumentDefinitions","args","handleField","_typeName2","_typeID","_traverseModuleImport","_traverseResolverField","_traverseClientEdgeToClientObject","field","backingField","resolverRecord","isOutputType","outputTypeRecordIDs","_iterator","_step","s","n","done","_dataID","value","err","e","f","concreteType","dataIDs","getResolverLinkedRecordIDs","_iterator2","_step2","_dataID2","_dataID3","getResolverLinkedRecordID","storageKey","getLinkedRecordID","moduleImport","_this$_operationName","fragmentName","operationKey","documentName","operationReference","getValue","normalizationRootNode","operation","linkedID","_this2","linkedIDs","getLinkedRecordIDs","module","exports"],"sources":["/Users/joaoluismoraes/Desktop/woovi-challenge/web/node_modules/relay-runtime/lib/store/RelayReferenceMarker.js"],"sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar getOperation = require('../util/getOperation');\nvar RelayConcreteNode = require('../util/RelayConcreteNode');\nvar cloneRelayHandleSourceField = require('./cloneRelayHandleSourceField');\nvar getOutputTypeRecordIDs = require('./experimental-live-resolvers/getOutputTypeRecordIDs');\nvar _require = require('./RelayConcreteVariables'),\n  getLocalVariables = _require.getLocalVariables;\nvar RelayModernRecord = require('./RelayModernRecord');\nvar RelayStoreUtils = require('./RelayStoreUtils');\nvar _require2 = require('./TypeID'),\n  generateTypeID = _require2.generateTypeID;\nvar invariant = require('invariant');\nvar ACTOR_CHANGE = RelayConcreteNode.ACTOR_CHANGE,\n  CONDITION = RelayConcreteNode.CONDITION,\n  CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT,\n  CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION,\n  DEFER = RelayConcreteNode.DEFER,\n  FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD,\n  INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT,\n  LINKED_FIELD = RelayConcreteNode.LINKED_FIELD,\n  MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT,\n  LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE,\n  SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD,\n  SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE,\n  STREAM = RelayConcreteNode.STREAM,\n  TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR,\n  RELAY_RESOLVER = RelayConcreteNode.RELAY_RESOLVER,\n  RELAY_LIVE_RESOLVER = RelayConcreteNode.RELAY_LIVE_RESOLVER,\n  CLIENT_EDGE_TO_CLIENT_OBJECT = RelayConcreteNode.CLIENT_EDGE_TO_CLIENT_OBJECT;\nvar getStorageKey = RelayStoreUtils.getStorageKey,\n  getModuleOperationKey = RelayStoreUtils.getModuleOperationKey;\nfunction mark(recordSource, selector, references, operationLoader, shouldProcessClientComponents) {\n  var dataID = selector.dataID,\n    node = selector.node,\n    variables = selector.variables;\n  var marker = new RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents);\n  marker.mark(node, dataID);\n}\nvar RelayReferenceMarker = /*#__PURE__*/function () {\n  function RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents) {\n    this._operationLoader = operationLoader !== null && operationLoader !== void 0 ? operationLoader : null;\n    this._operationName = null;\n    this._recordSource = recordSource;\n    this._references = references;\n    this._variables = variables;\n    this._shouldProcessClientComponents = shouldProcessClientComponents;\n  }\n  var _proto = RelayReferenceMarker.prototype;\n  _proto.mark = function mark(node, dataID) {\n    if (node.kind === 'Operation' || node.kind === 'SplitOperation') {\n      this._operationName = node.name;\n    }\n    this._traverse(node, dataID);\n  };\n  _proto._traverse = function _traverse(node, dataID) {\n    this._references.add(dataID);\n    var record = this._recordSource.get(dataID);\n    if (record == null) {\n      return;\n    }\n    this._traverseSelections(node.selections, record);\n  };\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n  _proto._traverseSelections = function _traverseSelections(selections, record) {\n    var _this = this;\n    selections.forEach(function (selection) {\n      switch (selection.kind) {\n        case ACTOR_CHANGE:\n          _this._traverseLink(selection.linkedField, record);\n          break;\n        case LINKED_FIELD:\n          if (selection.plural) {\n            _this._traversePluralLink(selection, record);\n          } else {\n            _this._traverseLink(selection, record);\n          }\n          break;\n        case CONDITION:\n          var conditionValue = Boolean(_this._getVariableValue(selection.condition));\n          if (conditionValue === selection.passingValue) {\n            _this._traverseSelections(selection.selections, record);\n          }\n          break;\n        case INLINE_FRAGMENT:\n          if (selection.abstractKey == null) {\n            var typeName = RelayModernRecord.getType(record);\n            if (typeName != null && typeName === selection.type || typeName === RelayStoreUtils.ROOT_TYPE) {\n              _this._traverseSelections(selection.selections, record);\n            }\n          } else {\n            var _typeName = RelayModernRecord.getType(record);\n            var typeID = generateTypeID(_typeName);\n            _this._references.add(typeID);\n            _this._traverseSelections(selection.selections, record);\n          }\n          break;\n        case FRAGMENT_SPREAD:\n          var prevVariables = _this._variables;\n          _this._variables = getLocalVariables(_this._variables, selection.fragment.argumentDefinitions, selection.args);\n          _this._traverseSelections(selection.fragment.selections, record);\n          _this._variables = prevVariables;\n          break;\n        case LINKED_HANDLE:\n          var handleField = cloneRelayHandleSourceField(selection, selections, _this._variables);\n          if (handleField.plural) {\n            _this._traversePluralLink(handleField, record);\n          } else {\n            _this._traverseLink(handleField, record);\n          }\n          break;\n        case DEFER:\n        case STREAM:\n          _this._traverseSelections(selection.selections, record);\n          break;\n        case SCALAR_FIELD:\n        case SCALAR_HANDLE:\n          break;\n        case TYPE_DISCRIMINATOR:\n          {\n            var _typeName2 = RelayModernRecord.getType(record);\n            var _typeID = generateTypeID(_typeName2);\n            _this._references.add(_typeID);\n            break;\n          }\n        case MODULE_IMPORT:\n          _this._traverseModuleImport(selection, record);\n          break;\n        case CLIENT_EXTENSION:\n          _this._traverseSelections(selection.selections, record);\n          break;\n        case CLIENT_COMPONENT:\n          if (_this._shouldProcessClientComponents === false) {\n            break;\n          }\n          _this._traverseSelections(selection.fragment.selections, record);\n          break;\n        case RELAY_RESOLVER:\n          _this._traverseResolverField(selection, record);\n          break;\n        case RELAY_LIVE_RESOLVER:\n          _this._traverseResolverField(selection, record);\n          break;\n        case CLIENT_EDGE_TO_CLIENT_OBJECT:\n          _this._traverseClientEdgeToClientObject(selection, record);\n          break;\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Unknown AST node `%s`.', selection) : invariant(false) : void 0;\n      }\n    });\n  };\n  _proto._traverseClientEdgeToClientObject = function _traverseClientEdgeToClientObject(field, record) {\n    var dataID = this._traverseResolverField(field.backingField, record);\n    if (dataID == null) {\n      return;\n    }\n    var resolverRecord = this._recordSource.get(dataID);\n    if (resolverRecord == null) {\n      return;\n    }\n    if (field.backingField.isOutputType) {\n      var outputTypeRecordIDs = getOutputTypeRecordIDs(resolverRecord);\n      if (outputTypeRecordIDs != null) {\n        var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(outputTypeRecordIDs),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _dataID = _step.value;\n            this._references.add(_dataID);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    } else {\n      var linkedField = field.linkedField;\n      var concreteType = linkedField.concreteType;\n      if (concreteType == null) {\n        return;\n      }\n      if (linkedField.plural) {\n        var dataIDs = RelayModernRecord.getResolverLinkedRecordIDs(resolverRecord, concreteType);\n        if (dataIDs != null) {\n          var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(dataIDs),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _dataID2 = _step2.value;\n              if (_dataID2 != null) {\n                this._traverse(linkedField, _dataID2);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } else {\n        var _dataID3 = RelayModernRecord.getResolverLinkedRecordID(resolverRecord, concreteType);\n        if (_dataID3 != null) {\n          this._traverse(linkedField, _dataID3);\n        }\n      }\n    }\n  };\n  _proto._traverseResolverField = function _traverseResolverField(field, record) {\n    var storageKey = getStorageKey(field, this._variables);\n    var dataID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n    if (dataID != null) {\n      this._references.add(dataID);\n    }\n    var fragment = field.fragment;\n    if (fragment != null) {\n      this._traverseSelections([fragment], record);\n    }\n    return dataID;\n  };\n  _proto._traverseModuleImport = function _traverseModuleImport(moduleImport, record) {\n    var _this$_operationName;\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Expected an operationLoader to be configured when using `@module`. ' + 'Could not load fragment `%s` in operation `%s`.', moduleImport.fragmentName, (_this$_operationName = this._operationName) !== null && _this$_operationName !== void 0 ? _this$_operationName : '(unknown)') : invariant(false) : void 0;\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = RelayModernRecord.getValue(record, operationKey);\n    if (operationReference == null) {\n      return;\n    }\n    var normalizationRootNode = operationLoader.get(operationReference);\n    if (normalizationRootNode != null) {\n      var operation = getOperation(normalizationRootNode);\n      var prevVariables = this._variables;\n      this._variables = getLocalVariables(this._variables, operation.argumentDefinitions, moduleImport.args);\n      this._traverseSelections(operation.selections, record);\n      this._variables = prevVariables;\n    }\n  };\n  _proto._traverseLink = function _traverseLink(field, record) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n    if (linkedID == null) {\n      return;\n    }\n    this._traverse(field, linkedID);\n  };\n  _proto._traversePluralLink = function _traversePluralLink(field, record) {\n    var _this2 = this;\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    if (linkedIDs == null) {\n      return;\n    }\n    linkedIDs.forEach(function (linkedID) {\n      if (linkedID != null) {\n        _this2._traverse(field, linkedID);\n      }\n    });\n  };\n  return RelayReferenceMarker;\n}();\nmodule.exports = {\n  mark: mark\n};"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAA8C,CAAC,CAAC,SAAS,CAAC;AAC/F,IAAIC,2BAA2B,GAAGF,sBAAsB,CAACC,OAAO,CAAC,kDAAkD,CAAC,CAAC;AACrH,IAAIE,YAAY,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AAClD,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,2BAA2B,CAAC;AAC5D,IAAII,2BAA2B,GAAGJ,OAAO,CAAC,+BAA+B,CAAC;AAC1E,IAAIK,sBAAsB,GAAGL,OAAO,CAAC,sDAAsD,CAAC;AAC5F,IAAIM,QAAQ,GAAGN,OAAO,CAAC,0BAA0B,CAAC;EAChDO,iBAAiB,GAAGD,QAAQ,CAACC,iBAAiB;AAChD,IAAIC,iBAAiB,GAAGR,OAAO,CAAC,qBAAqB,CAAC;AACtD,IAAIS,eAAe,GAAGT,OAAO,CAAC,mBAAmB,CAAC;AAClD,IAAIU,SAAS,GAAGV,OAAO,CAAC,UAAU,CAAC;EACjCW,cAAc,GAAGD,SAAS,CAACC,cAAc;AAC3C,IAAIC,SAAS,GAAGZ,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIa,YAAY,GAAGV,iBAAiB,CAACU,YAAY;EAC/CC,SAAS,GAAGX,iBAAiB,CAACW,SAAS;EACvCC,gBAAgB,GAAGZ,iBAAiB,CAACY,gBAAgB;EACrDC,gBAAgB,GAAGb,iBAAiB,CAACa,gBAAgB;EACrDC,KAAK,GAAGd,iBAAiB,CAACc,KAAK;EAC/BC,eAAe,GAAGf,iBAAiB,CAACe,eAAe;EACnDC,eAAe,GAAGhB,iBAAiB,CAACgB,eAAe;EACnDC,YAAY,GAAGjB,iBAAiB,CAACiB,YAAY;EAC7CC,aAAa,GAAGlB,iBAAiB,CAACkB,aAAa;EAC/CC,aAAa,GAAGnB,iBAAiB,CAACmB,aAAa;EAC/CC,YAAY,GAAGpB,iBAAiB,CAACoB,YAAY;EAC7CC,aAAa,GAAGrB,iBAAiB,CAACqB,aAAa;EAC/CC,MAAM,GAAGtB,iBAAiB,CAACsB,MAAM;EACjCC,kBAAkB,GAAGvB,iBAAiB,CAACuB,kBAAkB;EACzDC,cAAc,GAAGxB,iBAAiB,CAACwB,cAAc;EACjDC,mBAAmB,GAAGzB,iBAAiB,CAACyB,mBAAmB;EAC3DC,4BAA4B,GAAG1B,iBAAiB,CAAC0B,4BAA4B;AAC/E,IAAIC,aAAa,GAAGrB,eAAe,CAACqB,aAAa;EAC/CC,qBAAqB,GAAGtB,eAAe,CAACsB,qBAAqB;AAC/D,SAASC,IAAIA,CAACC,YAAY,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,eAAe,EAAEC,6BAA6B,EAAE;EAChG,IAAIC,MAAM,GAAGJ,QAAQ,CAACI,MAAM;IAC1BC,IAAI,GAAGL,QAAQ,CAACK,IAAI;IACpBC,SAAS,GAAGN,QAAQ,CAACM,SAAS;EAChC,IAAIC,MAAM,GAAG,IAAIC,oBAAoB,CAACT,YAAY,EAAEO,SAAS,EAAEL,UAAU,EAAEC,eAAe,EAAEC,6BAA6B,CAAC;EAC1HI,MAAM,CAACT,IAAI,CAACO,IAAI,EAAED,MAAM,CAAC;AAC3B;AACA,IAAII,oBAAoB,GAAG,aAAa,YAAY;EAClD,SAASA,oBAAoBA,CAACT,YAAY,EAAEO,SAAS,EAAEL,UAAU,EAAEC,eAAe,EAAEC,6BAA6B,EAAE;IACjH,IAAI,CAACM,gBAAgB,GAAGP,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,KAAK,CAAC,GAAGA,eAAe,GAAG,IAAI;IACvG,IAAI,CAACQ,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,aAAa,GAAGZ,YAAY;IACjC,IAAI,CAACa,WAAW,GAAGX,UAAU;IAC7B,IAAI,CAACY,UAAU,GAAGP,SAAS;IAC3B,IAAI,CAACQ,8BAA8B,GAAGX,6BAA6B;EACrE;EACA,IAAIY,MAAM,GAAGP,oBAAoB,CAACQ,SAAS;EAC3CD,MAAM,CAACjB,IAAI,GAAG,SAASA,IAAIA,CAACO,IAAI,EAAED,MAAM,EAAE;IACxC,IAAIC,IAAI,CAACY,IAAI,KAAK,WAAW,IAAIZ,IAAI,CAACY,IAAI,KAAK,gBAAgB,EAAE;MAC/D,IAAI,CAACP,cAAc,GAAGL,IAAI,CAACa,IAAI;IACjC;IACA,IAAI,CAACC,SAAS,CAACd,IAAI,EAAED,MAAM,CAAC;EAC9B,CAAC;EACDW,MAAM,CAACI,SAAS,GAAG,SAASA,SAASA,CAACd,IAAI,EAAED,MAAM,EAAE;IAClD,IAAI,CAACQ,WAAW,CAACQ,GAAG,CAAChB,MAAM,CAAC;IAC5B,IAAIiB,MAAM,GAAG,IAAI,CAACV,aAAa,CAACW,GAAG,CAAClB,MAAM,CAAC;IAC3C,IAAIiB,MAAM,IAAI,IAAI,EAAE;MAClB;IACF;IACA,IAAI,CAACE,mBAAmB,CAAClB,IAAI,CAACmB,UAAU,EAAEH,MAAM,CAAC;EACnD,CAAC;EACDN,MAAM,CAACU,iBAAiB,GAAG,SAASA,iBAAiBA,CAACP,IAAI,EAAE;IAC1D,CAAC,IAAI,CAACL,UAAU,CAACa,cAAc,CAACR,IAAI,CAAC,GAAGS,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGnD,SAAS,CAAC,KAAK,EAAE,kDAAkD,EAAEwC,IAAI,CAAC,GAAGxC,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;IACtL,OAAO,IAAI,CAACmC,UAAU,CAACK,IAAI,CAAC;EAC9B,CAAC;EACDH,MAAM,CAACQ,mBAAmB,GAAG,SAASA,mBAAmBA,CAACC,UAAU,EAAEH,MAAM,EAAE;IAC5E,IAAIS,KAAK,GAAG,IAAI;IAChBN,UAAU,CAACO,OAAO,CAAC,UAAUC,SAAS,EAAE;MACtC,QAAQA,SAAS,CAACf,IAAI;QACpB,KAAKtC,YAAY;UACfmD,KAAK,CAACG,aAAa,CAACD,SAAS,CAACE,WAAW,EAAEb,MAAM,CAAC;UAClD;QACF,KAAKnC,YAAY;UACf,IAAI8C,SAAS,CAACG,MAAM,EAAE;YACpBL,KAAK,CAACM,mBAAmB,CAACJ,SAAS,EAAEX,MAAM,CAAC;UAC9C,CAAC,MAAM;YACLS,KAAK,CAACG,aAAa,CAACD,SAAS,EAAEX,MAAM,CAAC;UACxC;UACA;QACF,KAAKzC,SAAS;UACZ,IAAIyD,cAAc,GAAGC,OAAO,CAACR,KAAK,CAACL,iBAAiB,CAACO,SAAS,CAACO,SAAS,CAAC,CAAC;UAC1E,IAAIF,cAAc,KAAKL,SAAS,CAACQ,YAAY,EAAE;YAC7CV,KAAK,CAACP,mBAAmB,CAACS,SAAS,CAACR,UAAU,EAAEH,MAAM,CAAC;UACzD;UACA;QACF,KAAKpC,eAAe;UAClB,IAAI+C,SAAS,CAACS,WAAW,IAAI,IAAI,EAAE;YACjC,IAAIC,QAAQ,GAAGpE,iBAAiB,CAACqE,OAAO,CAACtB,MAAM,CAAC;YAChD,IAAIqB,QAAQ,IAAI,IAAI,IAAIA,QAAQ,KAAKV,SAAS,CAACY,IAAI,IAAIF,QAAQ,KAAKnE,eAAe,CAACsE,SAAS,EAAE;cAC7Ff,KAAK,CAACP,mBAAmB,CAACS,SAAS,CAACR,UAAU,EAAEH,MAAM,CAAC;YACzD;UACF,CAAC,MAAM;YACL,IAAIyB,SAAS,GAAGxE,iBAAiB,CAACqE,OAAO,CAACtB,MAAM,CAAC;YACjD,IAAI0B,MAAM,GAAGtE,cAAc,CAACqE,SAAS,CAAC;YACtChB,KAAK,CAAClB,WAAW,CAACQ,GAAG,CAAC2B,MAAM,CAAC;YAC7BjB,KAAK,CAACP,mBAAmB,CAACS,SAAS,CAACR,UAAU,EAAEH,MAAM,CAAC;UACzD;UACA;QACF,KAAKrC,eAAe;UAClB,IAAIgE,aAAa,GAAGlB,KAAK,CAACjB,UAAU;UACpCiB,KAAK,CAACjB,UAAU,GAAGxC,iBAAiB,CAACyD,KAAK,CAACjB,UAAU,EAAEmB,SAAS,CAACiB,QAAQ,CAACC,mBAAmB,EAAElB,SAAS,CAACmB,IAAI,CAAC;UAC9GrB,KAAK,CAACP,mBAAmB,CAACS,SAAS,CAACiB,QAAQ,CAACzB,UAAU,EAAEH,MAAM,CAAC;UAChES,KAAK,CAACjB,UAAU,GAAGmC,aAAa;UAChC;QACF,KAAK5D,aAAa;UAChB,IAAIgE,WAAW,GAAGlF,2BAA2B,CAAC8D,SAAS,EAAER,UAAU,EAAEM,KAAK,CAACjB,UAAU,CAAC;UACtF,IAAIuC,WAAW,CAACjB,MAAM,EAAE;YACtBL,KAAK,CAACM,mBAAmB,CAACgB,WAAW,EAAE/B,MAAM,CAAC;UAChD,CAAC,MAAM;YACLS,KAAK,CAACG,aAAa,CAACmB,WAAW,EAAE/B,MAAM,CAAC;UAC1C;UACA;QACF,KAAKtC,KAAK;QACV,KAAKQ,MAAM;UACTuC,KAAK,CAACP,mBAAmB,CAACS,SAAS,CAACR,UAAU,EAAEH,MAAM,CAAC;UACvD;QACF,KAAKhC,YAAY;QACjB,KAAKC,aAAa;UAChB;QACF,KAAKE,kBAAkB;UACrB;YACE,IAAI6D,UAAU,GAAG/E,iBAAiB,CAACqE,OAAO,CAACtB,MAAM,CAAC;YAClD,IAAIiC,OAAO,GAAG7E,cAAc,CAAC4E,UAAU,CAAC;YACxCvB,KAAK,CAAClB,WAAW,CAACQ,GAAG,CAACkC,OAAO,CAAC;YAC9B;UACF;QACF,KAAKnE,aAAa;UAChB2C,KAAK,CAACyB,qBAAqB,CAACvB,SAAS,EAAEX,MAAM,CAAC;UAC9C;QACF,KAAKvC,gBAAgB;UACnBgD,KAAK,CAACP,mBAAmB,CAACS,SAAS,CAACR,UAAU,EAAEH,MAAM,CAAC;UACvD;QACF,KAAKxC,gBAAgB;UACnB,IAAIiD,KAAK,CAAChB,8BAA8B,KAAK,KAAK,EAAE;YAClD;UACF;UACAgB,KAAK,CAACP,mBAAmB,CAACS,SAAS,CAACiB,QAAQ,CAACzB,UAAU,EAAEH,MAAM,CAAC;UAChE;QACF,KAAK5B,cAAc;UACjBqC,KAAK,CAAC0B,sBAAsB,CAACxB,SAAS,EAAEX,MAAM,CAAC;UAC/C;QACF,KAAK3B,mBAAmB;UACtBoC,KAAK,CAAC0B,sBAAsB,CAACxB,SAAS,EAAEX,MAAM,CAAC;UAC/C;QACF,KAAK1B,4BAA4B;UAC/BmC,KAAK,CAAC2B,iCAAiC,CAACzB,SAAS,EAAEX,MAAM,CAAC;UAC1D;QACF;UACEW,SAAS;UACT,CAAC,KAAK,GAAGL,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGnD,SAAS,CAAC,KAAK,EAAE,8CAA8C,EAAEsD,SAAS,CAAC,GAAGtD,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;MAC5J;IACF,CAAC,CAAC;EACJ,CAAC;EACDqC,MAAM,CAAC0C,iCAAiC,GAAG,SAASA,iCAAiCA,CAACC,KAAK,EAAErC,MAAM,EAAE;IACnG,IAAIjB,MAAM,GAAG,IAAI,CAACoD,sBAAsB,CAACE,KAAK,CAACC,YAAY,EAAEtC,MAAM,CAAC;IACpE,IAAIjB,MAAM,IAAI,IAAI,EAAE;MAClB;IACF;IACA,IAAIwD,cAAc,GAAG,IAAI,CAACjD,aAAa,CAACW,GAAG,CAAClB,MAAM,CAAC;IACnD,IAAIwD,cAAc,IAAI,IAAI,EAAE;MAC1B;IACF;IACA,IAAIF,KAAK,CAACC,YAAY,CAACE,YAAY,EAAE;MACnC,IAAIC,mBAAmB,GAAG3F,sBAAsB,CAACyF,cAAc,CAAC;MAChE,IAAIE,mBAAmB,IAAI,IAAI,EAAE;QAC/B,IAAIC,SAAS,GAAG,CAAC,CAAC,EAAEhG,2BAA2B,CAAC,SAAS,CAAC,EAAE+F,mBAAmB,CAAC;UAC9EE,KAAK;QACP,IAAI;UACF,KAAKD,SAAS,CAACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAACD,KAAK,GAAGD,SAAS,CAACG,CAAC,CAAC,CAAC,EAAEC,IAAI,GAAG;YAClD,IAAIC,OAAO,GAAGJ,KAAK,CAACK,KAAK;YACzB,IAAI,CAACzD,WAAW,CAACQ,GAAG,CAACgD,OAAO,CAAC;UAC/B;QACF,CAAC,CAAC,OAAOE,GAAG,EAAE;UACZP,SAAS,CAACQ,CAAC,CAACD,GAAG,CAAC;QAClB,CAAC,SAAS;UACRP,SAAS,CAACS,CAAC,CAAC,CAAC;QACf;MACF;IACF,CAAC,MAAM;MACL,IAAItC,WAAW,GAAGwB,KAAK,CAACxB,WAAW;MACnC,IAAIuC,YAAY,GAAGvC,WAAW,CAACuC,YAAY;MAC3C,IAAIA,YAAY,IAAI,IAAI,EAAE;QACxB;MACF;MACA,IAAIvC,WAAW,CAACC,MAAM,EAAE;QACtB,IAAIuC,OAAO,GAAGpG,iBAAiB,CAACqG,0BAA0B,CAACf,cAAc,EAAEa,YAAY,CAAC;QACxF,IAAIC,OAAO,IAAI,IAAI,EAAE;UACnB,IAAIE,UAAU,GAAG,CAAC,CAAC,EAAE7G,2BAA2B,CAAC,SAAS,CAAC,EAAE2G,OAAO,CAAC;YACnEG,MAAM;UACR,IAAI;YACF,KAAKD,UAAU,CAACX,CAAC,CAAC,CAAC,EAAE,CAAC,CAACY,MAAM,GAAGD,UAAU,CAACV,CAAC,CAAC,CAAC,EAAEC,IAAI,GAAG;cACrD,IAAIW,QAAQ,GAAGD,MAAM,CAACR,KAAK;cAC3B,IAAIS,QAAQ,IAAI,IAAI,EAAE;gBACpB,IAAI,CAAC3D,SAAS,CAACe,WAAW,EAAE4C,QAAQ,CAAC;cACvC;YACF;UACF,CAAC,CAAC,OAAOR,GAAG,EAAE;YACZM,UAAU,CAACL,CAAC,CAACD,GAAG,CAAC;UACnB,CAAC,SAAS;YACRM,UAAU,CAACJ,CAAC,CAAC,CAAC;UAChB;QACF;MACF,CAAC,MAAM;QACL,IAAIO,QAAQ,GAAGzG,iBAAiB,CAAC0G,yBAAyB,CAACpB,cAAc,EAAEa,YAAY,CAAC;QACxF,IAAIM,QAAQ,IAAI,IAAI,EAAE;UACpB,IAAI,CAAC5D,SAAS,CAACe,WAAW,EAAE6C,QAAQ,CAAC;QACvC;MACF;IACF;EACF,CAAC;EACDhE,MAAM,CAACyC,sBAAsB,GAAG,SAASA,sBAAsBA,CAACE,KAAK,EAAErC,MAAM,EAAE;IAC7E,IAAI4D,UAAU,GAAGrF,aAAa,CAAC8D,KAAK,EAAE,IAAI,CAAC7C,UAAU,CAAC;IACtD,IAAIT,MAAM,GAAG9B,iBAAiB,CAAC4G,iBAAiB,CAAC7D,MAAM,EAAE4D,UAAU,CAAC;IACpE,IAAI7E,MAAM,IAAI,IAAI,EAAE;MAClB,IAAI,CAACQ,WAAW,CAACQ,GAAG,CAAChB,MAAM,CAAC;IAC9B;IACA,IAAI6C,QAAQ,GAAGS,KAAK,CAACT,QAAQ;IAC7B,IAAIA,QAAQ,IAAI,IAAI,EAAE;MACpB,IAAI,CAAC1B,mBAAmB,CAAC,CAAC0B,QAAQ,CAAC,EAAE5B,MAAM,CAAC;IAC9C;IACA,OAAOjB,MAAM;EACf,CAAC;EACDW,MAAM,CAACwC,qBAAqB,GAAG,SAASA,qBAAqBA,CAAC4B,YAAY,EAAE9D,MAAM,EAAE;IAClF,IAAI+D,oBAAoB;IACxB,IAAIlF,eAAe,GAAG,IAAI,CAACO,gBAAgB;IAC3C,EAAEP,eAAe,KAAK,IAAI,CAAC,GAAGyB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGnD,SAAS,CAAC,KAAK,EAAE,2FAA2F,GAAG,iDAAiD,EAAEyG,YAAY,CAACE,YAAY,EAAE,CAACD,oBAAoB,GAAG,IAAI,CAAC1E,cAAc,MAAM,IAAI,IAAI0E,oBAAoB,KAAK,KAAK,CAAC,GAAGA,oBAAoB,GAAG,WAAW,CAAC,GAAG1G,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;IAC7Z,IAAI4G,YAAY,GAAGzF,qBAAqB,CAACsF,YAAY,CAACI,YAAY,CAAC;IACnE,IAAIC,kBAAkB,GAAGlH,iBAAiB,CAACmH,QAAQ,CAACpE,MAAM,EAAEiE,YAAY,CAAC;IACzE,IAAIE,kBAAkB,IAAI,IAAI,EAAE;MAC9B;IACF;IACA,IAAIE,qBAAqB,GAAGxF,eAAe,CAACoB,GAAG,CAACkE,kBAAkB,CAAC;IACnE,IAAIE,qBAAqB,IAAI,IAAI,EAAE;MACjC,IAAIC,SAAS,GAAG3H,YAAY,CAAC0H,qBAAqB,CAAC;MACnD,IAAI1C,aAAa,GAAG,IAAI,CAACnC,UAAU;MACnC,IAAI,CAACA,UAAU,GAAGxC,iBAAiB,CAAC,IAAI,CAACwC,UAAU,EAAE8E,SAAS,CAACzC,mBAAmB,EAAEiC,YAAY,CAAChC,IAAI,CAAC;MACtG,IAAI,CAAC5B,mBAAmB,CAACoE,SAAS,CAACnE,UAAU,EAAEH,MAAM,CAAC;MACtD,IAAI,CAACR,UAAU,GAAGmC,aAAa;IACjC;EACF,CAAC;EACDjC,MAAM,CAACkB,aAAa,GAAG,SAASA,aAAaA,CAACyB,KAAK,EAAErC,MAAM,EAAE;IAC3D,IAAI4D,UAAU,GAAGrF,aAAa,CAAC8D,KAAK,EAAE,IAAI,CAAC7C,UAAU,CAAC;IACtD,IAAI+E,QAAQ,GAAGtH,iBAAiB,CAAC4G,iBAAiB,CAAC7D,MAAM,EAAE4D,UAAU,CAAC;IACtE,IAAIW,QAAQ,IAAI,IAAI,EAAE;MACpB;IACF;IACA,IAAI,CAACzE,SAAS,CAACuC,KAAK,EAAEkC,QAAQ,CAAC;EACjC,CAAC;EACD7E,MAAM,CAACqB,mBAAmB,GAAG,SAASA,mBAAmBA,CAACsB,KAAK,EAAErC,MAAM,EAAE;IACvE,IAAIwE,MAAM,GAAG,IAAI;IACjB,IAAIZ,UAAU,GAAGrF,aAAa,CAAC8D,KAAK,EAAE,IAAI,CAAC7C,UAAU,CAAC;IACtD,IAAIiF,SAAS,GAAGxH,iBAAiB,CAACyH,kBAAkB,CAAC1E,MAAM,EAAE4D,UAAU,CAAC;IACxE,IAAIa,SAAS,IAAI,IAAI,EAAE;MACrB;IACF;IACAA,SAAS,CAAC/D,OAAO,CAAC,UAAU6D,QAAQ,EAAE;MACpC,IAAIA,QAAQ,IAAI,IAAI,EAAE;QACpBC,MAAM,CAAC1E,SAAS,CAACuC,KAAK,EAAEkC,QAAQ,CAAC;MACnC;IACF,CAAC,CAAC;EACJ,CAAC;EACD,OAAOpF,oBAAoB;AAC7B,CAAC,CAAC,CAAC;AACHwF,MAAM,CAACC,OAAO,GAAG;EACfnG,IAAI,EAAEA;AACR,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}