{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar RelayRecordSourceMutator = require('../mutations/RelayRecordSourceMutator');\nvar RelayRecordSourceProxy = require('../mutations/RelayRecordSourceProxy');\nvar getOperation = require('../util/getOperation');\nvar RelayConcreteNode = require('../util/RelayConcreteNode');\nvar _require = require('./ClientID'),\n  isClientID = _require.isClientID;\nvar cloneRelayHandleSourceField = require('./cloneRelayHandleSourceField');\nvar cloneRelayScalarHandleSourceField = require('./cloneRelayScalarHandleSourceField');\nvar _require2 = require('./RelayConcreteVariables'),\n  getLocalVariables = _require2.getLocalVariables;\nvar RelayModernRecord = require('./RelayModernRecord');\nvar _require3 = require('./RelayRecordState'),\n  EXISTENT = _require3.EXISTENT,\n  UNKNOWN = _require3.UNKNOWN;\nvar RelayStoreUtils = require('./RelayStoreUtils');\nvar _require4 = require('./TypeID'),\n  TYPE_SCHEMA_TYPE = _require4.TYPE_SCHEMA_TYPE,\n  generateTypeID = _require4.generateTypeID;\nvar invariant = require('invariant');\nvar ACTOR_CHANGE = RelayConcreteNode.ACTOR_CHANGE,\n  CONDITION = RelayConcreteNode.CONDITION,\n  CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT,\n  CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION,\n  CLIENT_EDGE_TO_CLIENT_OBJECT = RelayConcreteNode.CLIENT_EDGE_TO_CLIENT_OBJECT,\n  DEFER = RelayConcreteNode.DEFER,\n  FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD,\n  INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT,\n  LINKED_FIELD = RelayConcreteNode.LINKED_FIELD,\n  LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE,\n  MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT,\n  RELAY_RESOLVER = RelayConcreteNode.RELAY_RESOLVER,\n  RELAY_LIVE_RESOLVER = RelayConcreteNode.RELAY_LIVE_RESOLVER,\n  SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD,\n  SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE,\n  STREAM = RelayConcreteNode.STREAM,\n  TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR;\nvar getModuleOperationKey = RelayStoreUtils.getModuleOperationKey,\n  getStorageKey = RelayStoreUtils.getStorageKey,\n  getArgumentValues = RelayStoreUtils.getArgumentValues;\nfunction check(getSourceForActor, getTargetForActor, defaultActorIdentifier, selector, handlers, operationLoader, getDataID, shouldProcessClientComponents) {\n  var dataID = selector.dataID,\n    node = selector.node,\n    variables = selector.variables;\n  var checker = new DataChecker(getSourceForActor, getTargetForActor, defaultActorIdentifier, variables, handlers, operationLoader, getDataID, shouldProcessClientComponents);\n  return checker.check(node, dataID);\n}\nvar DataChecker = /*#__PURE__*/function () {\n  function DataChecker(getSourceForActor, getTargetForActor, defaultActorIdentifier, variables, handlers, operationLoader, getDataID, shouldProcessClientComponents) {\n    this._getSourceForActor = getSourceForActor;\n    this._getTargetForActor = getTargetForActor;\n    this._getDataID = getDataID;\n    this._source = getSourceForActor(defaultActorIdentifier);\n    this._mutatorRecordSourceProxyCache = new Map();\n    var _this$_getMutatorAndR = this._getMutatorAndRecordProxyForActor(defaultActorIdentifier),\n      mutator = _this$_getMutatorAndR[0],\n      recordSourceProxy = _this$_getMutatorAndR[1];\n    this._mostRecentlyInvalidatedAt = null;\n    this._handlers = handlers;\n    this._mutator = mutator;\n    this._operationLoader = operationLoader !== null && operationLoader !== void 0 ? operationLoader : null;\n    this._recordSourceProxy = recordSourceProxy;\n    this._recordWasMissing = false;\n    this._variables = variables;\n    this._shouldProcessClientComponents = shouldProcessClientComponents;\n  }\n  var _proto = DataChecker.prototype;\n  _proto._getMutatorAndRecordProxyForActor = function _getMutatorAndRecordProxyForActor(actorIdentifier) {\n    var tuple = this._mutatorRecordSourceProxyCache.get(actorIdentifier);\n    if (tuple == null) {\n      var target = this._getTargetForActor(actorIdentifier);\n      var mutator = new RelayRecordSourceMutator(this._getSourceForActor(actorIdentifier), target);\n      var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, undefined, this._handlers);\n      tuple = [mutator, recordSourceProxy];\n      this._mutatorRecordSourceProxyCache.set(actorIdentifier, tuple);\n    }\n    return tuple;\n  };\n  _proto.check = function check(node, dataID) {\n    this._assignClientAbstractTypes(node);\n    this._traverse(node, dataID);\n    return this._recordWasMissing === true ? {\n      status: 'missing',\n      mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt\n    } : {\n      status: 'available',\n      mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt\n    };\n  };\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayAsyncLoader(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n  _proto._handleMissing = function _handleMissing() {\n    this._recordWasMissing = true;\n  };\n  _proto._handleMissingScalarField = function _handleMissingScalarField(field, dataID) {\n    if (field.name === 'id' && field.alias == null && isClientID(dataID)) {\n      return undefined;\n    }\n    var args = field.args != undefined ? getArgumentValues(field.args, this._variables) : {};\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(this._handlers),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var handler = _step.value;\n        if (handler.kind === 'scalar') {\n          var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);\n          if (newValue !== undefined) {\n            return newValue;\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    this._handleMissing();\n  };\n  _proto._handleMissingLinkField = function _handleMissingLinkField(field, dataID) {\n    var args = field.args != undefined ? getArgumentValues(field.args, this._variables) : {};\n    var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(this._handlers),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var handler = _step2.value;\n        if (handler.kind === 'linked') {\n          var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);\n          if (newValue !== undefined && (newValue === null || this._mutator.getStatus(newValue) === EXISTENT)) {\n            return newValue;\n          }\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    this._handleMissing();\n  };\n  _proto._handleMissingPluralLinkField = function _handleMissingPluralLinkField(field, dataID) {\n    var _this = this;\n    var args = field.args != undefined ? getArgumentValues(field.args, this._variables) : {};\n    var _iterator3 = (0, _createForOfIteratorHelper2[\"default\"])(this._handlers),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var handler = _step3.value;\n        if (handler.kind === 'pluralLinked') {\n          var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);\n          if (newValue != null) {\n            var allItemsKnown = newValue.every(function (linkedID) {\n              return linkedID != null && _this._mutator.getStatus(linkedID) === EXISTENT;\n            });\n            if (allItemsKnown) {\n              return newValue;\n            }\n          } else if (newValue === null) {\n            return null;\n          }\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    this._handleMissing();\n  };\n  _proto._traverse = function _traverse(node, dataID) {\n    var status = this._mutator.getStatus(dataID);\n    if (status === UNKNOWN) {\n      this._handleMissing();\n    }\n    if (status === EXISTENT) {\n      var record = this._source.get(dataID);\n      var invalidatedAt = RelayModernRecord.getInvalidationEpoch(record);\n      if (invalidatedAt != null) {\n        this._mostRecentlyInvalidatedAt = this._mostRecentlyInvalidatedAt != null ? Math.max(this._mostRecentlyInvalidatedAt, invalidatedAt) : invalidatedAt;\n      }\n      this._traverseSelections(node.selections, dataID);\n    }\n  };\n  _proto._traverseSelections = function _traverseSelections(selections, dataID) {\n    var _this2 = this;\n    selections.forEach(function (selection) {\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n          _this2._checkScalar(selection, dataID);\n          break;\n        case LINKED_FIELD:\n          if (selection.plural) {\n            _this2._checkPluralLink(selection, dataID);\n          } else {\n            _this2._checkLink(selection, dataID);\n          }\n          break;\n        case ACTOR_CHANGE:\n          _this2._checkActorChange(selection.linkedField, dataID);\n          break;\n        case CONDITION:\n          var conditionValue = Boolean(_this2._getVariableValue(selection.condition));\n          if (conditionValue === selection.passingValue) {\n            _this2._traverseSelections(selection.selections, dataID);\n          }\n          break;\n        case INLINE_FRAGMENT:\n          {\n            var _abstractKey = selection.abstractKey;\n            if (_abstractKey == null) {\n              var typeName = _this2._mutator.getType(dataID);\n              if (typeName === selection.type) {\n                _this2._traverseSelections(selection.selections, dataID);\n              }\n            } else {\n              var _recordType = _this2._mutator.getType(dataID);\n              !(_recordType != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DataChecker: Expected record `%s` to have a known type', dataID) : invariant(false) : void 0;\n              var _typeID = generateTypeID(_recordType);\n              var _implementsInterface = _this2._mutator.getValue(_typeID, _abstractKey);\n              if (_implementsInterface === true) {\n                _this2._traverseSelections(selection.selections, dataID);\n              } else if (_implementsInterface == null) {\n                _this2._handleMissing();\n              }\n            }\n            break;\n          }\n        case LINKED_HANDLE:\n          {\n            var handleField = cloneRelayHandleSourceField(selection, selections, _this2._variables);\n            if (handleField.plural) {\n              _this2._checkPluralLink(handleField, dataID);\n            } else {\n              _this2._checkLink(handleField, dataID);\n            }\n            break;\n          }\n        case SCALAR_HANDLE:\n          {\n            var _handleField = cloneRelayScalarHandleSourceField(selection, selections, _this2._variables);\n            _this2._checkScalar(_handleField, dataID);\n            break;\n          }\n        case MODULE_IMPORT:\n          _this2._checkModuleImport(selection, dataID);\n          break;\n        case DEFER:\n        case STREAM:\n          _this2._traverseSelections(selection.selections, dataID);\n          break;\n        case FRAGMENT_SPREAD:\n          var prevVariables = _this2._variables;\n          _this2._variables = getLocalVariables(_this2._variables, selection.fragment.argumentDefinitions, selection.args);\n          _this2._traverseSelections(selection.fragment.selections, dataID);\n          _this2._variables = prevVariables;\n          break;\n        case CLIENT_EXTENSION:\n          var recordWasMissing = _this2._recordWasMissing;\n          _this2._traverseSelections(selection.selections, dataID);\n          _this2._recordWasMissing = recordWasMissing;\n          break;\n        case TYPE_DISCRIMINATOR:\n          var abstractKey = selection.abstractKey;\n          var recordType = _this2._mutator.getType(dataID);\n          !(recordType != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DataChecker: Expected record `%s` to have a known type', dataID) : invariant(false) : void 0;\n          var typeID = generateTypeID(recordType);\n          var implementsInterface = _this2._mutator.getValue(typeID, abstractKey);\n          if (implementsInterface == null) {\n            _this2._handleMissing();\n          }\n          break;\n        case CLIENT_COMPONENT:\n          if (_this2._shouldProcessClientComponents === false) {\n            break;\n          }\n          _this2._traverseSelections(selection.fragment.selections, dataID);\n          break;\n        case RELAY_RESOLVER:\n          _this2._checkResolver(selection, dataID);\n          break;\n        case RELAY_LIVE_RESOLVER:\n          _this2._checkResolver(selection, dataID);\n          break;\n        case CLIENT_EDGE_TO_CLIENT_OBJECT:\n          _this2._checkResolver(selection.backingField, dataID);\n          break;\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayAsyncLoader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    });\n  };\n  _proto._checkResolver = function _checkResolver(resolver, dataID) {\n    if (resolver.fragment) {\n      this._traverseSelections([resolver.fragment], dataID);\n    }\n  };\n  _proto._checkModuleImport = function _checkModuleImport(moduleImport, dataID) {\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DataChecker: Expected an operationLoader to be configured when using `@module`.') : invariant(false) : void 0;\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = this._mutator.getValue(dataID, operationKey);\n    if (operationReference == null) {\n      if (operationReference === undefined) {\n        this._handleMissing();\n      }\n      return;\n    }\n    var normalizationRootNode = operationLoader.get(operationReference);\n    if (normalizationRootNode != null) {\n      var operation = getOperation(normalizationRootNode);\n      var prevVariables = this._variables;\n      this._variables = getLocalVariables(this._variables, operation.argumentDefinitions, moduleImport.args);\n      this._traverse(operation, dataID);\n      this._variables = prevVariables;\n    } else {\n      this._handleMissing();\n    }\n  };\n  _proto._checkScalar = function _checkScalar(field, dataID) {\n    var storageKey = getStorageKey(field, this._variables);\n    var fieldValue = this._mutator.getValue(dataID, storageKey);\n    if (fieldValue === undefined) {\n      fieldValue = this._handleMissingScalarField(field, dataID);\n      if (fieldValue !== undefined) {\n        this._mutator.setValue(dataID, storageKey, fieldValue);\n      }\n    }\n  };\n  _proto._checkLink = function _checkLink(field, dataID) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = this._mutator.getLinkedRecordID(dataID, storageKey);\n    if (linkedID === undefined) {\n      linkedID = this._handleMissingLinkField(field, dataID);\n      if (linkedID != null) {\n        this._mutator.setLinkedRecordID(dataID, storageKey, linkedID);\n      } else if (linkedID === null) {\n        this._mutator.setValue(dataID, storageKey, null);\n      }\n    }\n    if (linkedID != null) {\n      this._traverse(field, linkedID);\n    }\n  };\n  _proto._checkPluralLink = function _checkPluralLink(field, dataID) {\n    var _this3 = this;\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = this._mutator.getLinkedRecordIDs(dataID, storageKey);\n    if (linkedIDs === undefined) {\n      linkedIDs = this._handleMissingPluralLinkField(field, dataID);\n      if (linkedIDs != null) {\n        this._mutator.setLinkedRecordIDs(dataID, storageKey, linkedIDs);\n      } else if (linkedIDs === null) {\n        this._mutator.setValue(dataID, storageKey, null);\n      }\n    }\n    if (linkedIDs) {\n      linkedIDs.forEach(function (linkedID) {\n        if (linkedID != null) {\n          _this3._traverse(field, linkedID);\n        }\n      });\n    }\n  };\n  _proto._checkActorChange = function _checkActorChange(field, dataID) {\n    var storageKey = getStorageKey(field, this._variables);\n    var record = this._source.get(dataID);\n    var tuple = record != null ? RelayModernRecord.getActorLinkedRecordID(record, storageKey) : record;\n    if (tuple == null) {\n      if (tuple === undefined) {\n        this._handleMissing();\n      }\n    } else {\n      var actorIdentifier = tuple[0],\n        linkedID = tuple[1];\n      var prevSource = this._source;\n      var prevMutator = this._mutator;\n      var prevRecordSourceProxy = this._recordSourceProxy;\n      var _this$_getMutatorAndR2 = this._getMutatorAndRecordProxyForActor(actorIdentifier),\n        mutator = _this$_getMutatorAndR2[0],\n        recordSourceProxy = _this$_getMutatorAndR2[1];\n      this._source = this._getSourceForActor(actorIdentifier);\n      this._mutator = mutator;\n      this._recordSourceProxy = recordSourceProxy;\n      this._assignClientAbstractTypes(field);\n      this._traverse(field, linkedID);\n      this._source = prevSource;\n      this._mutator = prevMutator;\n      this._recordSourceProxy = prevRecordSourceProxy;\n    }\n  };\n  _proto._assignClientAbstractTypes = function _assignClientAbstractTypes(node) {\n    var clientAbstractTypes = node.clientAbstractTypes;\n    if (clientAbstractTypes != null) {\n      for (var _i = 0, _Object$keys = Object.keys(clientAbstractTypes); _i < _Object$keys.length; _i++) {\n        var abstractType = _Object$keys[_i];\n        var _iterator4 = (0, _createForOfIteratorHelper2[\"default\"])(clientAbstractTypes[abstractType]),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var concreteType = _step4.value;\n            var typeID = generateTypeID(concreteType);\n            if (this._source.get(typeID) == null) {\n              this._mutator.create(typeID, TYPE_SCHEMA_TYPE);\n            }\n            if (this._mutator.getValue(typeID, abstractType) == null) {\n              this._mutator.setValue(typeID, abstractType, true);\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n    }\n  };\n  return DataChecker;\n}();\nmodule.exports = {\n  check: check\n};","map":{"version":3,"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","RelayRecordSourceMutator","RelayRecordSourceProxy","getOperation","RelayConcreteNode","_require","isClientID","cloneRelayHandleSourceField","cloneRelayScalarHandleSourceField","_require2","getLocalVariables","RelayModernRecord","_require3","EXISTENT","UNKNOWN","RelayStoreUtils","_require4","TYPE_SCHEMA_TYPE","generateTypeID","invariant","ACTOR_CHANGE","CONDITION","CLIENT_COMPONENT","CLIENT_EXTENSION","CLIENT_EDGE_TO_CLIENT_OBJECT","DEFER","FRAGMENT_SPREAD","INLINE_FRAGMENT","LINKED_FIELD","LINKED_HANDLE","MODULE_IMPORT","RELAY_RESOLVER","RELAY_LIVE_RESOLVER","SCALAR_FIELD","SCALAR_HANDLE","STREAM","TYPE_DISCRIMINATOR","getModuleOperationKey","getStorageKey","getArgumentValues","check","getSourceForActor","getTargetForActor","defaultActorIdentifier","selector","handlers","operationLoader","getDataID","shouldProcessClientComponents","dataID","node","variables","checker","DataChecker","_getSourceForActor","_getTargetForActor","_getDataID","_source","_mutatorRecordSourceProxyCache","Map","_this$_getMutatorAndR","_getMutatorAndRecordProxyForActor","mutator","recordSourceProxy","_mostRecentlyInvalidatedAt","_handlers","_mutator","_operationLoader","_recordSourceProxy","_recordWasMissing","_variables","_shouldProcessClientComponents","_proto","prototype","actorIdentifier","tuple","get","target","undefined","set","_assignClientAbstractTypes","_traverse","status","mostRecentlyInvalidatedAt","_getVariableValue","name","hasOwnProperty","process","env","NODE_ENV","_handleMissing","_handleMissingScalarField","field","alias","args","_iterator","_step","s","n","done","handler","value","kind","newValue","handle","err","e","f","_handleMissingLinkField","_iterator2","_step2","getStatus","_handleMissingPluralLinkField","_this","_iterator3","_step3","allItemsKnown","every","linkedID","record","invalidatedAt","getInvalidationEpoch","Math","max","_traverseSelections","selections","_this2","forEach","selection","_checkScalar","plural","_checkPluralLink","_checkLink","_checkActorChange","linkedField","conditionValue","Boolean","condition","passingValue","_abstractKey","abstractKey","typeName","getType","type","_recordType","_typeID","_implementsInterface","getValue","handleField","_handleField","_checkModuleImport","prevVariables","fragment","argumentDefinitions","recordWasMissing","recordType","typeID","implementsInterface","_checkResolver","backingField","resolver","moduleImport","operationKey","documentName","operationReference","normalizationRootNode","operation","storageKey","fieldValue","setValue","getLinkedRecordID","setLinkedRecordID","_this3","linkedIDs","getLinkedRecordIDs","setLinkedRecordIDs","getActorLinkedRecordID","prevSource","prevMutator","prevRecordSourceProxy","_this$_getMutatorAndR2","clientAbstractTypes","_i","_Object$keys","Object","keys","length","abstractType","_iterator4","_step4","concreteType","create","module","exports"],"sources":["/Users/joaoluismoraes/Desktop/woovi-challenge/web/node_modules/relay-runtime/lib/store/DataChecker.js"],"sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\nvar RelayRecordSourceMutator = require('../mutations/RelayRecordSourceMutator');\nvar RelayRecordSourceProxy = require('../mutations/RelayRecordSourceProxy');\nvar getOperation = require('../util/getOperation');\nvar RelayConcreteNode = require('../util/RelayConcreteNode');\nvar _require = require('./ClientID'),\n  isClientID = _require.isClientID;\nvar cloneRelayHandleSourceField = require('./cloneRelayHandleSourceField');\nvar cloneRelayScalarHandleSourceField = require('./cloneRelayScalarHandleSourceField');\nvar _require2 = require('./RelayConcreteVariables'),\n  getLocalVariables = _require2.getLocalVariables;\nvar RelayModernRecord = require('./RelayModernRecord');\nvar _require3 = require('./RelayRecordState'),\n  EXISTENT = _require3.EXISTENT,\n  UNKNOWN = _require3.UNKNOWN;\nvar RelayStoreUtils = require('./RelayStoreUtils');\nvar _require4 = require('./TypeID'),\n  TYPE_SCHEMA_TYPE = _require4.TYPE_SCHEMA_TYPE,\n  generateTypeID = _require4.generateTypeID;\nvar invariant = require('invariant');\nvar ACTOR_CHANGE = RelayConcreteNode.ACTOR_CHANGE,\n  CONDITION = RelayConcreteNode.CONDITION,\n  CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT,\n  CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION,\n  CLIENT_EDGE_TO_CLIENT_OBJECT = RelayConcreteNode.CLIENT_EDGE_TO_CLIENT_OBJECT,\n  DEFER = RelayConcreteNode.DEFER,\n  FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD,\n  INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT,\n  LINKED_FIELD = RelayConcreteNode.LINKED_FIELD,\n  LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE,\n  MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT,\n  RELAY_RESOLVER = RelayConcreteNode.RELAY_RESOLVER,\n  RELAY_LIVE_RESOLVER = RelayConcreteNode.RELAY_LIVE_RESOLVER,\n  SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD,\n  SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE,\n  STREAM = RelayConcreteNode.STREAM,\n  TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR;\nvar getModuleOperationKey = RelayStoreUtils.getModuleOperationKey,\n  getStorageKey = RelayStoreUtils.getStorageKey,\n  getArgumentValues = RelayStoreUtils.getArgumentValues;\nfunction check(getSourceForActor, getTargetForActor, defaultActorIdentifier, selector, handlers, operationLoader, getDataID, shouldProcessClientComponents) {\n  var dataID = selector.dataID,\n    node = selector.node,\n    variables = selector.variables;\n  var checker = new DataChecker(getSourceForActor, getTargetForActor, defaultActorIdentifier, variables, handlers, operationLoader, getDataID, shouldProcessClientComponents);\n  return checker.check(node, dataID);\n}\nvar DataChecker = /*#__PURE__*/function () {\n  function DataChecker(getSourceForActor, getTargetForActor, defaultActorIdentifier, variables, handlers, operationLoader, getDataID, shouldProcessClientComponents) {\n    this._getSourceForActor = getSourceForActor;\n    this._getTargetForActor = getTargetForActor;\n    this._getDataID = getDataID;\n    this._source = getSourceForActor(defaultActorIdentifier);\n    this._mutatorRecordSourceProxyCache = new Map();\n    var _this$_getMutatorAndR = this._getMutatorAndRecordProxyForActor(defaultActorIdentifier),\n      mutator = _this$_getMutatorAndR[0],\n      recordSourceProxy = _this$_getMutatorAndR[1];\n    this._mostRecentlyInvalidatedAt = null;\n    this._handlers = handlers;\n    this._mutator = mutator;\n    this._operationLoader = operationLoader !== null && operationLoader !== void 0 ? operationLoader : null;\n    this._recordSourceProxy = recordSourceProxy;\n    this._recordWasMissing = false;\n    this._variables = variables;\n    this._shouldProcessClientComponents = shouldProcessClientComponents;\n  }\n  var _proto = DataChecker.prototype;\n  _proto._getMutatorAndRecordProxyForActor = function _getMutatorAndRecordProxyForActor(actorIdentifier) {\n    var tuple = this._mutatorRecordSourceProxyCache.get(actorIdentifier);\n    if (tuple == null) {\n      var target = this._getTargetForActor(actorIdentifier);\n      var mutator = new RelayRecordSourceMutator(this._getSourceForActor(actorIdentifier), target);\n      var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, undefined, this._handlers);\n      tuple = [mutator, recordSourceProxy];\n      this._mutatorRecordSourceProxyCache.set(actorIdentifier, tuple);\n    }\n    return tuple;\n  };\n  _proto.check = function check(node, dataID) {\n    this._assignClientAbstractTypes(node);\n    this._traverse(node, dataID);\n    return this._recordWasMissing === true ? {\n      status: 'missing',\n      mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt\n    } : {\n      status: 'available',\n      mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt\n    };\n  };\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayAsyncLoader(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n  _proto._handleMissing = function _handleMissing() {\n    this._recordWasMissing = true;\n  };\n  _proto._handleMissingScalarField = function _handleMissingScalarField(field, dataID) {\n    if (field.name === 'id' && field.alias == null && isClientID(dataID)) {\n      return undefined;\n    }\n    var args = field.args != undefined ? getArgumentValues(field.args, this._variables) : {};\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(this._handlers),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var handler = _step.value;\n        if (handler.kind === 'scalar') {\n          var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);\n          if (newValue !== undefined) {\n            return newValue;\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    this._handleMissing();\n  };\n  _proto._handleMissingLinkField = function _handleMissingLinkField(field, dataID) {\n    var args = field.args != undefined ? getArgumentValues(field.args, this._variables) : {};\n    var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(this._handlers),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var handler = _step2.value;\n        if (handler.kind === 'linked') {\n          var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);\n          if (newValue !== undefined && (newValue === null || this._mutator.getStatus(newValue) === EXISTENT)) {\n            return newValue;\n          }\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    this._handleMissing();\n  };\n  _proto._handleMissingPluralLinkField = function _handleMissingPluralLinkField(field, dataID) {\n    var _this = this;\n    var args = field.args != undefined ? getArgumentValues(field.args, this._variables) : {};\n    var _iterator3 = (0, _createForOfIteratorHelper2[\"default\"])(this._handlers),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var handler = _step3.value;\n        if (handler.kind === 'pluralLinked') {\n          var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);\n          if (newValue != null) {\n            var allItemsKnown = newValue.every(function (linkedID) {\n              return linkedID != null && _this._mutator.getStatus(linkedID) === EXISTENT;\n            });\n            if (allItemsKnown) {\n              return newValue;\n            }\n          } else if (newValue === null) {\n            return null;\n          }\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    this._handleMissing();\n  };\n  _proto._traverse = function _traverse(node, dataID) {\n    var status = this._mutator.getStatus(dataID);\n    if (status === UNKNOWN) {\n      this._handleMissing();\n    }\n    if (status === EXISTENT) {\n      var record = this._source.get(dataID);\n      var invalidatedAt = RelayModernRecord.getInvalidationEpoch(record);\n      if (invalidatedAt != null) {\n        this._mostRecentlyInvalidatedAt = this._mostRecentlyInvalidatedAt != null ? Math.max(this._mostRecentlyInvalidatedAt, invalidatedAt) : invalidatedAt;\n      }\n      this._traverseSelections(node.selections, dataID);\n    }\n  };\n  _proto._traverseSelections = function _traverseSelections(selections, dataID) {\n    var _this2 = this;\n    selections.forEach(function (selection) {\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n          _this2._checkScalar(selection, dataID);\n          break;\n        case LINKED_FIELD:\n          if (selection.plural) {\n            _this2._checkPluralLink(selection, dataID);\n          } else {\n            _this2._checkLink(selection, dataID);\n          }\n          break;\n        case ACTOR_CHANGE:\n          _this2._checkActorChange(selection.linkedField, dataID);\n          break;\n        case CONDITION:\n          var conditionValue = Boolean(_this2._getVariableValue(selection.condition));\n          if (conditionValue === selection.passingValue) {\n            _this2._traverseSelections(selection.selections, dataID);\n          }\n          break;\n        case INLINE_FRAGMENT:\n          {\n            var _abstractKey = selection.abstractKey;\n            if (_abstractKey == null) {\n              var typeName = _this2._mutator.getType(dataID);\n              if (typeName === selection.type) {\n                _this2._traverseSelections(selection.selections, dataID);\n              }\n            } else {\n              var _recordType = _this2._mutator.getType(dataID);\n              !(_recordType != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DataChecker: Expected record `%s` to have a known type', dataID) : invariant(false) : void 0;\n              var _typeID = generateTypeID(_recordType);\n              var _implementsInterface = _this2._mutator.getValue(_typeID, _abstractKey);\n              if (_implementsInterface === true) {\n                _this2._traverseSelections(selection.selections, dataID);\n              } else if (_implementsInterface == null) {\n                _this2._handleMissing();\n              }\n            }\n            break;\n          }\n        case LINKED_HANDLE:\n          {\n            var handleField = cloneRelayHandleSourceField(selection, selections, _this2._variables);\n            if (handleField.plural) {\n              _this2._checkPluralLink(handleField, dataID);\n            } else {\n              _this2._checkLink(handleField, dataID);\n            }\n            break;\n          }\n        case SCALAR_HANDLE:\n          {\n            var _handleField = cloneRelayScalarHandleSourceField(selection, selections, _this2._variables);\n            _this2._checkScalar(_handleField, dataID);\n            break;\n          }\n        case MODULE_IMPORT:\n          _this2._checkModuleImport(selection, dataID);\n          break;\n        case DEFER:\n        case STREAM:\n          _this2._traverseSelections(selection.selections, dataID);\n          break;\n        case FRAGMENT_SPREAD:\n          var prevVariables = _this2._variables;\n          _this2._variables = getLocalVariables(_this2._variables, selection.fragment.argumentDefinitions, selection.args);\n          _this2._traverseSelections(selection.fragment.selections, dataID);\n          _this2._variables = prevVariables;\n          break;\n        case CLIENT_EXTENSION:\n          var recordWasMissing = _this2._recordWasMissing;\n          _this2._traverseSelections(selection.selections, dataID);\n          _this2._recordWasMissing = recordWasMissing;\n          break;\n        case TYPE_DISCRIMINATOR:\n          var abstractKey = selection.abstractKey;\n          var recordType = _this2._mutator.getType(dataID);\n          !(recordType != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DataChecker: Expected record `%s` to have a known type', dataID) : invariant(false) : void 0;\n          var typeID = generateTypeID(recordType);\n          var implementsInterface = _this2._mutator.getValue(typeID, abstractKey);\n          if (implementsInterface == null) {\n            _this2._handleMissing();\n          }\n          break;\n        case CLIENT_COMPONENT:\n          if (_this2._shouldProcessClientComponents === false) {\n            break;\n          }\n          _this2._traverseSelections(selection.fragment.selections, dataID);\n          break;\n        case RELAY_RESOLVER:\n          _this2._checkResolver(selection, dataID);\n          break;\n        case RELAY_LIVE_RESOLVER:\n          _this2._checkResolver(selection, dataID);\n          break;\n        case CLIENT_EDGE_TO_CLIENT_OBJECT:\n          _this2._checkResolver(selection.backingField, dataID);\n          break;\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayAsyncLoader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    });\n  };\n  _proto._checkResolver = function _checkResolver(resolver, dataID) {\n    if (resolver.fragment) {\n      this._traverseSelections([resolver.fragment], dataID);\n    }\n  };\n  _proto._checkModuleImport = function _checkModuleImport(moduleImport, dataID) {\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DataChecker: Expected an operationLoader to be configured when using `@module`.') : invariant(false) : void 0;\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = this._mutator.getValue(dataID, operationKey);\n    if (operationReference == null) {\n      if (operationReference === undefined) {\n        this._handleMissing();\n      }\n      return;\n    }\n    var normalizationRootNode = operationLoader.get(operationReference);\n    if (normalizationRootNode != null) {\n      var operation = getOperation(normalizationRootNode);\n      var prevVariables = this._variables;\n      this._variables = getLocalVariables(this._variables, operation.argumentDefinitions, moduleImport.args);\n      this._traverse(operation, dataID);\n      this._variables = prevVariables;\n    } else {\n      this._handleMissing();\n    }\n  };\n  _proto._checkScalar = function _checkScalar(field, dataID) {\n    var storageKey = getStorageKey(field, this._variables);\n    var fieldValue = this._mutator.getValue(dataID, storageKey);\n    if (fieldValue === undefined) {\n      fieldValue = this._handleMissingScalarField(field, dataID);\n      if (fieldValue !== undefined) {\n        this._mutator.setValue(dataID, storageKey, fieldValue);\n      }\n    }\n  };\n  _proto._checkLink = function _checkLink(field, dataID) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = this._mutator.getLinkedRecordID(dataID, storageKey);\n    if (linkedID === undefined) {\n      linkedID = this._handleMissingLinkField(field, dataID);\n      if (linkedID != null) {\n        this._mutator.setLinkedRecordID(dataID, storageKey, linkedID);\n      } else if (linkedID === null) {\n        this._mutator.setValue(dataID, storageKey, null);\n      }\n    }\n    if (linkedID != null) {\n      this._traverse(field, linkedID);\n    }\n  };\n  _proto._checkPluralLink = function _checkPluralLink(field, dataID) {\n    var _this3 = this;\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = this._mutator.getLinkedRecordIDs(dataID, storageKey);\n    if (linkedIDs === undefined) {\n      linkedIDs = this._handleMissingPluralLinkField(field, dataID);\n      if (linkedIDs != null) {\n        this._mutator.setLinkedRecordIDs(dataID, storageKey, linkedIDs);\n      } else if (linkedIDs === null) {\n        this._mutator.setValue(dataID, storageKey, null);\n      }\n    }\n    if (linkedIDs) {\n      linkedIDs.forEach(function (linkedID) {\n        if (linkedID != null) {\n          _this3._traverse(field, linkedID);\n        }\n      });\n    }\n  };\n  _proto._checkActorChange = function _checkActorChange(field, dataID) {\n    var storageKey = getStorageKey(field, this._variables);\n    var record = this._source.get(dataID);\n    var tuple = record != null ? RelayModernRecord.getActorLinkedRecordID(record, storageKey) : record;\n    if (tuple == null) {\n      if (tuple === undefined) {\n        this._handleMissing();\n      }\n    } else {\n      var actorIdentifier = tuple[0],\n        linkedID = tuple[1];\n      var prevSource = this._source;\n      var prevMutator = this._mutator;\n      var prevRecordSourceProxy = this._recordSourceProxy;\n      var _this$_getMutatorAndR2 = this._getMutatorAndRecordProxyForActor(actorIdentifier),\n        mutator = _this$_getMutatorAndR2[0],\n        recordSourceProxy = _this$_getMutatorAndR2[1];\n      this._source = this._getSourceForActor(actorIdentifier);\n      this._mutator = mutator;\n      this._recordSourceProxy = recordSourceProxy;\n      this._assignClientAbstractTypes(field);\n      this._traverse(field, linkedID);\n      this._source = prevSource;\n      this._mutator = prevMutator;\n      this._recordSourceProxy = prevRecordSourceProxy;\n    }\n  };\n  _proto._assignClientAbstractTypes = function _assignClientAbstractTypes(node) {\n    var clientAbstractTypes = node.clientAbstractTypes;\n    if (clientAbstractTypes != null) {\n      for (var _i = 0, _Object$keys = Object.keys(clientAbstractTypes); _i < _Object$keys.length; _i++) {\n        var abstractType = _Object$keys[_i];\n        var _iterator4 = (0, _createForOfIteratorHelper2[\"default\"])(clientAbstractTypes[abstractType]),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var concreteType = _step4.value;\n            var typeID = generateTypeID(concreteType);\n            if (this._source.get(typeID) == null) {\n              this._mutator.create(typeID, TYPE_SCHEMA_TYPE);\n            }\n            if (this._mutator.getValue(typeID, abstractType) == null) {\n              this._mutator.setValue(typeID, abstractType, true);\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n    }\n  };\n  return DataChecker;\n}();\nmodule.exports = {\n  check: check\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}