{"ast":null,"code":"'use strict';\n\nvar invariant = require('invariant');\nfunction assertFragmentMap(componentName, fragmentSpec) {\n  !(fragmentSpec && typeof fragmentSpec === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Could not create Relay Container for `%s`. ' + 'Expected a set of GraphQL fragments, got `%s` instead.', componentName, fragmentSpec) : invariant(false) : void 0;\n  for (var key in fragmentSpec) {\n    if (fragmentSpec.hasOwnProperty(key)) {\n      var fragment = fragmentSpec[key];\n      !(fragment && (typeof fragment === 'object' || typeof fragment === 'function')) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Could not create Relay Container for `%s`. ' + 'The value of fragment `%s` was expected to be a fragment, got `%s` instead.', componentName, key, fragment) : invariant(false) : void 0;\n    }\n  }\n}\nmodule.exports = assertFragmentMap;","map":{"version":3,"names":["invariant","require","assertFragmentMap","componentName","fragmentSpec","process","env","NODE_ENV","key","hasOwnProperty","fragment","module","exports"],"sources":["/Users/joaoluismoraes/Desktop/woovi-challenge/web/node_modules/react-relay/lib/assertFragmentMap.js"],"sourcesContent":["'use strict';\n\nvar invariant = require('invariant');\nfunction assertFragmentMap(componentName, fragmentSpec) {\n  !(fragmentSpec && typeof fragmentSpec === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Could not create Relay Container for `%s`. ' + 'Expected a set of GraphQL fragments, got `%s` instead.', componentName, fragmentSpec) : invariant(false) : void 0;\n  for (var key in fragmentSpec) {\n    if (fragmentSpec.hasOwnProperty(key)) {\n      var fragment = fragmentSpec[key];\n      !(fragment && (typeof fragment === 'object' || typeof fragment === 'function')) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Could not create Relay Container for `%s`. ' + 'The value of fragment `%s` was expected to be a fragment, got `%s` instead.', componentName, key, fragment) : invariant(false) : void 0;\n    }\n  }\n}\nmodule.exports = assertFragmentMap;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AACpC,SAASC,iBAAiBA,CAACC,aAAa,EAAEC,YAAY,EAAE;EACtD,EAAEA,YAAY,IAAI,OAAOA,YAAY,KAAK,QAAQ,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGP,SAAS,CAAC,KAAK,EAAE,6CAA6C,GAAG,wDAAwD,EAAEG,aAAa,EAAEC,YAAY,CAAC,GAAGJ,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;EACjR,KAAK,IAAIQ,GAAG,IAAIJ,YAAY,EAAE;IAC5B,IAAIA,YAAY,CAACK,cAAc,CAACD,GAAG,CAAC,EAAE;MACpC,IAAIE,QAAQ,GAAGN,YAAY,CAACI,GAAG,CAAC;MAChC,EAAEE,QAAQ,KAAK,OAAOA,QAAQ,KAAK,QAAQ,IAAI,OAAOA,QAAQ,KAAK,UAAU,CAAC,CAAC,GAAGL,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGP,SAAS,CAAC,KAAK,EAAE,6CAA6C,GAAG,6EAA6E,EAAEG,aAAa,EAAEK,GAAG,EAAEE,QAAQ,CAAC,GAAGV,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;IACrU;EACF;AACF;AACAW,MAAM,CAACC,OAAO,GAAGV,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}