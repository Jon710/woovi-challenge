{"ast":null,"code":"'use strict';\n\nvar _require = require('../../store/ClientID'),\n  generateClientID = _require.generateClientID;\nvar _require2 = require('../../store/RelayStoreUtils'),\n  getStableStorageKey = _require2.getStableStorageKey;\nvar getRelayHandleKey = require('../../util/getRelayHandleKey');\nvar ConnectionInterface = require('./ConnectionInterface');\nvar invariant = require('invariant');\nvar warning = require(\"fbjs/lib/warning\");\nvar CONNECTION = 'connection';\nvar NEXT_EDGE_INDEX = '__connection_next_edge_index';\nfunction update(store, payload) {\n  var record = store.get(payload.dataID);\n  if (!record) {\n    return;\n  }\n  var _ConnectionInterface$ = ConnectionInterface.get(),\n    EDGES = _ConnectionInterface$.EDGES,\n    END_CURSOR = _ConnectionInterface$.END_CURSOR,\n    HAS_NEXT_PAGE = _ConnectionInterface$.HAS_NEXT_PAGE,\n    HAS_PREV_PAGE = _ConnectionInterface$.HAS_PREV_PAGE,\n    PAGE_INFO = _ConnectionInterface$.PAGE_INFO,\n    PAGE_INFO_TYPE = _ConnectionInterface$.PAGE_INFO_TYPE,\n    START_CURSOR = _ConnectionInterface$.START_CURSOR;\n  var serverConnection = record.getLinkedRecord(payload.fieldKey);\n  var serverPageInfo = serverConnection && serverConnection.getLinkedRecord(PAGE_INFO);\n  if (!serverConnection) {\n    record.setValue(null, payload.handleKey);\n    return;\n  }\n  var clientConnectionID = generateClientID(record.getDataID(), payload.handleKey);\n  var clientConnectionField = record.getLinkedRecord(payload.handleKey);\n  var clientConnection = clientConnectionField !== null && clientConnectionField !== void 0 ? clientConnectionField : store.get(clientConnectionID);\n  var clientPageInfo = clientConnection && clientConnection.getLinkedRecord(PAGE_INFO);\n  if (!clientConnection) {\n    var connection = store.create(clientConnectionID, serverConnection.getType());\n    connection.setValue(0, NEXT_EDGE_INDEX);\n    connection.copyFieldsFrom(serverConnection);\n    var serverEdges = serverConnection.getLinkedRecords(EDGES);\n    if (serverEdges) {\n      serverEdges = serverEdges.map(function (edge) {\n        return buildConnectionEdge(store, connection, edge);\n      });\n      connection.setLinkedRecords(serverEdges, EDGES);\n    }\n    record.setLinkedRecord(connection, payload.handleKey);\n    clientPageInfo = store.create(generateClientID(connection.getDataID(), PAGE_INFO), PAGE_INFO_TYPE);\n    clientPageInfo.setValue(false, HAS_NEXT_PAGE);\n    clientPageInfo.setValue(false, HAS_PREV_PAGE);\n    clientPageInfo.setValue(null, END_CURSOR);\n    clientPageInfo.setValue(null, START_CURSOR);\n    if (serverPageInfo) {\n      clientPageInfo.copyFieldsFrom(serverPageInfo);\n    }\n    connection.setLinkedRecord(clientPageInfo, PAGE_INFO);\n  } else {\n    if (clientConnectionField == null) {\n      record.setLinkedRecord(clientConnection, payload.handleKey);\n    }\n    var _connection = clientConnection;\n    var _serverEdges = serverConnection.getLinkedRecords(EDGES);\n    if (_serverEdges) {\n      _serverEdges = _serverEdges.map(function (edge) {\n        return buildConnectionEdge(store, _connection, edge);\n      });\n    }\n    var prevEdges = _connection.getLinkedRecords(EDGES);\n    var prevPageInfo = _connection.getLinkedRecord(PAGE_INFO);\n    _connection.copyFieldsFrom(serverConnection);\n    if (prevEdges) {\n      _connection.setLinkedRecords(prevEdges, EDGES);\n    }\n    if (prevPageInfo) {\n      _connection.setLinkedRecord(prevPageInfo, PAGE_INFO);\n    }\n    var nextEdges = [];\n    var args = payload.args;\n    if (prevEdges && _serverEdges) {\n      if (args.after != null) {\n        var _clientPageInfo;\n        var clientEndCursor = (_clientPageInfo = clientPageInfo) === null || _clientPageInfo === void 0 ? void 0 : _clientPageInfo.getValue(END_CURSOR);\n        var serverEndCursor = serverPageInfo === null || serverPageInfo === void 0 ? void 0 : serverPageInfo.getValue(END_CURSOR);\n        var isAddingEdgesAfterCurrentPage = clientPageInfo && args.after === clientEndCursor;\n        var isFillingOutCurrentPage = clientPageInfo && clientEndCursor === serverEndCursor;\n        if (isAddingEdgesAfterCurrentPage || isFillingOutCurrentPage) {\n          var nodeIDs = new Set();\n          mergeEdges(prevEdges, nextEdges, nodeIDs);\n          mergeEdges(_serverEdges, nextEdges, nodeIDs);\n        } else {\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Unexpected after cursor `%s`, edges must ' + 'be fetched from the end of the list (`%s`).', args.after, clientPageInfo && clientPageInfo.getValue(END_CURSOR)) : void 0;\n          return;\n        }\n      } else if (args.before != null) {\n        if (clientPageInfo && args.before === clientPageInfo.getValue(START_CURSOR)) {\n          var _nodeIDs = new Set();\n          mergeEdges(_serverEdges, nextEdges, _nodeIDs);\n          mergeEdges(prevEdges, nextEdges, _nodeIDs);\n        } else {\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Unexpected before cursor `%s`, edges must ' + 'be fetched from the beginning of the list (`%s`).', args.before, clientPageInfo && clientPageInfo.getValue(START_CURSOR)) : void 0;\n          return;\n        }\n      } else {\n        nextEdges = _serverEdges;\n      }\n    } else if (_serverEdges) {\n      nextEdges = _serverEdges;\n    } else {\n      nextEdges = prevEdges;\n    }\n    if (nextEdges != null && nextEdges !== prevEdges) {\n      _connection.setLinkedRecords(nextEdges, EDGES);\n    }\n    if (clientPageInfo && serverPageInfo) {\n      if (args.after == null && args.before == null) {\n        clientPageInfo.copyFieldsFrom(serverPageInfo);\n      } else if (args.before != null || args.after == null && args.last) {\n        clientPageInfo.setValue(!!serverPageInfo.getValue(HAS_PREV_PAGE), HAS_PREV_PAGE);\n        var startCursor = serverPageInfo.getValue(START_CURSOR);\n        if (typeof startCursor === 'string') {\n          clientPageInfo.setValue(startCursor, START_CURSOR);\n        }\n      } else if (args.after != null || args.before == null && args.first) {\n        clientPageInfo.setValue(!!serverPageInfo.getValue(HAS_NEXT_PAGE), HAS_NEXT_PAGE);\n        var endCursor = serverPageInfo.getValue(END_CURSOR);\n        if (typeof endCursor === 'string') {\n          clientPageInfo.setValue(endCursor, END_CURSOR);\n        }\n      }\n    }\n  }\n}\nfunction getConnection(record, key, filters) {\n  var handleKey = getRelayHandleKey(CONNECTION, key, null);\n  return record.getLinkedRecord(handleKey, filters);\n}\nfunction getConnectionID(recordID, key, filters) {\n  var handleKey = getRelayHandleKey(CONNECTION, key, null);\n  var storageKey = getStableStorageKey(handleKey, filters);\n  return generateClientID(recordID, storageKey);\n}\nfunction insertEdgeAfter(record, newEdge, cursor) {\n  var _ConnectionInterface$2 = ConnectionInterface.get(),\n    CURSOR = _ConnectionInterface$2.CURSOR,\n    EDGES = _ConnectionInterface$2.EDGES;\n  var edges = record.getLinkedRecords(EDGES);\n  if (!edges) {\n    record.setLinkedRecords([newEdge], EDGES);\n    return;\n  }\n  var nextEdges;\n  if (cursor == null) {\n    nextEdges = edges.concat(newEdge);\n  } else {\n    nextEdges = [];\n    var foundCursor = false;\n    for (var ii = 0; ii < edges.length; ii++) {\n      var edge = edges[ii];\n      nextEdges.push(edge);\n      if (edge == null) {\n        continue;\n      }\n      var edgeCursor = edge.getValue(CURSOR);\n      if (cursor === edgeCursor) {\n        nextEdges.push(newEdge);\n        foundCursor = true;\n      }\n    }\n    if (!foundCursor) {\n      nextEdges.push(newEdge);\n    }\n  }\n  record.setLinkedRecords(nextEdges, EDGES);\n}\nfunction createEdge(store, record, node, edgeType) {\n  var _ConnectionInterface$3 = ConnectionInterface.get(),\n    NODE = _ConnectionInterface$3.NODE;\n  var edgeID = generateClientID(record.getDataID(), node.getDataID());\n  var edge = store.get(edgeID);\n  if (!edge) {\n    edge = store.create(edgeID, edgeType);\n  }\n  edge.setLinkedRecord(node, NODE);\n  if (edge.getValue('cursor') == null) {\n    edge.setValue(null, 'cursor');\n  }\n  return edge;\n}\nfunction insertEdgeBefore(record, newEdge, cursor) {\n  var _ConnectionInterface$4 = ConnectionInterface.get(),\n    CURSOR = _ConnectionInterface$4.CURSOR,\n    EDGES = _ConnectionInterface$4.EDGES;\n  var edges = record.getLinkedRecords(EDGES);\n  if (!edges) {\n    record.setLinkedRecords([newEdge], EDGES);\n    return;\n  }\n  var nextEdges;\n  if (cursor == null) {\n    nextEdges = [newEdge].concat(edges);\n  } else {\n    nextEdges = [];\n    var foundCursor = false;\n    for (var ii = 0; ii < edges.length; ii++) {\n      var edge = edges[ii];\n      if (edge != null) {\n        var edgeCursor = edge.getValue(CURSOR);\n        if (cursor === edgeCursor) {\n          nextEdges.push(newEdge);\n          foundCursor = true;\n        }\n      }\n      nextEdges.push(edge);\n    }\n    if (!foundCursor) {\n      nextEdges.unshift(newEdge);\n    }\n  }\n  record.setLinkedRecords(nextEdges, EDGES);\n}\nfunction deleteNode(record, nodeID) {\n  var _ConnectionInterface$5 = ConnectionInterface.get(),\n    EDGES = _ConnectionInterface$5.EDGES,\n    NODE = _ConnectionInterface$5.NODE;\n  var edges = record.getLinkedRecords(EDGES);\n  if (!edges) {\n    return;\n  }\n  var nextEdges;\n  for (var ii = 0; ii < edges.length; ii++) {\n    var edge = edges[ii];\n    var node = edge && edge.getLinkedRecord(NODE);\n    if (node != null && node.getDataID() === nodeID) {\n      if (nextEdges === undefined) {\n        nextEdges = edges.slice(0, ii);\n      }\n    } else if (nextEdges !== undefined) {\n      nextEdges.push(edge);\n    }\n  }\n  if (nextEdges !== undefined) {\n    record.setLinkedRecords(nextEdges, EDGES);\n  }\n}\nfunction buildConnectionEdge(store, connection, edge) {\n  if (edge == null) {\n    return edge;\n  }\n  var _ConnectionInterface$6 = ConnectionInterface.get(),\n    EDGES = _ConnectionInterface$6.EDGES;\n  var edgeIndex = connection.getValue(NEXT_EDGE_INDEX);\n  !(typeof edgeIndex === 'number') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ConnectionHandler: Expected %s to be a number, got `%s`.', NEXT_EDGE_INDEX, edgeIndex) : invariant(false) : void 0;\n  var edgeID = generateClientID(connection.getDataID(), EDGES, edgeIndex);\n  var connectionEdge = store.create(edgeID, edge.getType());\n  connectionEdge.copyFieldsFrom(edge);\n  if (connectionEdge.getValue('cursor') == null) {\n    connectionEdge.setValue(null, 'cursor');\n  }\n  connection.setValue(edgeIndex + 1, NEXT_EDGE_INDEX);\n  return connectionEdge;\n}\nfunction mergeEdges(sourceEdges, targetEdges, nodeIDs) {\n  var _ConnectionInterface$7 = ConnectionInterface.get(),\n    NODE = _ConnectionInterface$7.NODE;\n  for (var ii = 0; ii < sourceEdges.length; ii++) {\n    var edge = sourceEdges[ii];\n    if (!edge) {\n      continue;\n    }\n    var node = edge.getLinkedRecord(NODE);\n    var nodeID = node && node.getDataID();\n    if (nodeID) {\n      if (nodeIDs.has(nodeID)) {\n        continue;\n      }\n      nodeIDs.add(nodeID);\n    }\n    targetEdges.push(edge);\n  }\n}\nmodule.exports = {\n  buildConnectionEdge: buildConnectionEdge,\n  createEdge: createEdge,\n  deleteNode: deleteNode,\n  getConnection: getConnection,\n  getConnectionID: getConnectionID,\n  insertEdgeAfter: insertEdgeAfter,\n  insertEdgeBefore: insertEdgeBefore,\n  update: update\n};","map":{"version":3,"names":["_require","require","generateClientID","_require2","getStableStorageKey","getRelayHandleKey","ConnectionInterface","invariant","warning","CONNECTION","NEXT_EDGE_INDEX","update","store","payload","record","get","dataID","_ConnectionInterface$","EDGES","END_CURSOR","HAS_NEXT_PAGE","HAS_PREV_PAGE","PAGE_INFO","PAGE_INFO_TYPE","START_CURSOR","serverConnection","getLinkedRecord","fieldKey","serverPageInfo","setValue","handleKey","clientConnectionID","getDataID","clientConnectionField","clientConnection","clientPageInfo","connection","create","getType","copyFieldsFrom","serverEdges","getLinkedRecords","map","edge","buildConnectionEdge","setLinkedRecords","setLinkedRecord","_connection","_serverEdges","prevEdges","prevPageInfo","nextEdges","args","after","_clientPageInfo","clientEndCursor","getValue","serverEndCursor","isAddingEdgesAfterCurrentPage","isFillingOutCurrentPage","nodeIDs","Set","mergeEdges","process","env","NODE_ENV","before","_nodeIDs","last","startCursor","first","endCursor","getConnection","key","filters","getConnectionID","recordID","storageKey","insertEdgeAfter","newEdge","cursor","_ConnectionInterface$2","CURSOR","edges","concat","foundCursor","ii","length","push","edgeCursor","createEdge","node","edgeType","_ConnectionInterface$3","NODE","edgeID","insertEdgeBefore","_ConnectionInterface$4","unshift","deleteNode","nodeID","_ConnectionInterface$5","undefined","slice","_ConnectionInterface$6","edgeIndex","connectionEdge","sourceEdges","targetEdges","_ConnectionInterface$7","has","add","module","exports"],"sources":["/Users/joaoluismoraes/Desktop/woovi-challenge/web/node_modules/relay-runtime/lib/handlers/connection/ConnectionHandler.js"],"sourcesContent":["'use strict';\n\nvar _require = require('../../store/ClientID'),\n  generateClientID = _require.generateClientID;\nvar _require2 = require('../../store/RelayStoreUtils'),\n  getStableStorageKey = _require2.getStableStorageKey;\nvar getRelayHandleKey = require('../../util/getRelayHandleKey');\nvar ConnectionInterface = require('./ConnectionInterface');\nvar invariant = require('invariant');\nvar warning = require(\"fbjs/lib/warning\");\nvar CONNECTION = 'connection';\nvar NEXT_EDGE_INDEX = '__connection_next_edge_index';\nfunction update(store, payload) {\n  var record = store.get(payload.dataID);\n  if (!record) {\n    return;\n  }\n  var _ConnectionInterface$ = ConnectionInterface.get(),\n    EDGES = _ConnectionInterface$.EDGES,\n    END_CURSOR = _ConnectionInterface$.END_CURSOR,\n    HAS_NEXT_PAGE = _ConnectionInterface$.HAS_NEXT_PAGE,\n    HAS_PREV_PAGE = _ConnectionInterface$.HAS_PREV_PAGE,\n    PAGE_INFO = _ConnectionInterface$.PAGE_INFO,\n    PAGE_INFO_TYPE = _ConnectionInterface$.PAGE_INFO_TYPE,\n    START_CURSOR = _ConnectionInterface$.START_CURSOR;\n  var serverConnection = record.getLinkedRecord(payload.fieldKey);\n  var serverPageInfo = serverConnection && serverConnection.getLinkedRecord(PAGE_INFO);\n  if (!serverConnection) {\n    record.setValue(null, payload.handleKey);\n    return;\n  }\n  var clientConnectionID = generateClientID(record.getDataID(), payload.handleKey);\n  var clientConnectionField = record.getLinkedRecord(payload.handleKey);\n  var clientConnection = clientConnectionField !== null && clientConnectionField !== void 0 ? clientConnectionField : store.get(clientConnectionID);\n  var clientPageInfo = clientConnection && clientConnection.getLinkedRecord(PAGE_INFO);\n  if (!clientConnection) {\n    var connection = store.create(clientConnectionID, serverConnection.getType());\n    connection.setValue(0, NEXT_EDGE_INDEX);\n    connection.copyFieldsFrom(serverConnection);\n    var serverEdges = serverConnection.getLinkedRecords(EDGES);\n    if (serverEdges) {\n      serverEdges = serverEdges.map(function (edge) {\n        return buildConnectionEdge(store, connection, edge);\n      });\n      connection.setLinkedRecords(serverEdges, EDGES);\n    }\n    record.setLinkedRecord(connection, payload.handleKey);\n    clientPageInfo = store.create(generateClientID(connection.getDataID(), PAGE_INFO), PAGE_INFO_TYPE);\n    clientPageInfo.setValue(false, HAS_NEXT_PAGE);\n    clientPageInfo.setValue(false, HAS_PREV_PAGE);\n    clientPageInfo.setValue(null, END_CURSOR);\n    clientPageInfo.setValue(null, START_CURSOR);\n    if (serverPageInfo) {\n      clientPageInfo.copyFieldsFrom(serverPageInfo);\n    }\n    connection.setLinkedRecord(clientPageInfo, PAGE_INFO);\n  } else {\n    if (clientConnectionField == null) {\n      record.setLinkedRecord(clientConnection, payload.handleKey);\n    }\n    var _connection = clientConnection;\n    var _serverEdges = serverConnection.getLinkedRecords(EDGES);\n    if (_serverEdges) {\n      _serverEdges = _serverEdges.map(function (edge) {\n        return buildConnectionEdge(store, _connection, edge);\n      });\n    }\n    var prevEdges = _connection.getLinkedRecords(EDGES);\n    var prevPageInfo = _connection.getLinkedRecord(PAGE_INFO);\n    _connection.copyFieldsFrom(serverConnection);\n    if (prevEdges) {\n      _connection.setLinkedRecords(prevEdges, EDGES);\n    }\n    if (prevPageInfo) {\n      _connection.setLinkedRecord(prevPageInfo, PAGE_INFO);\n    }\n    var nextEdges = [];\n    var args = payload.args;\n    if (prevEdges && _serverEdges) {\n      if (args.after != null) {\n        var _clientPageInfo;\n        var clientEndCursor = (_clientPageInfo = clientPageInfo) === null || _clientPageInfo === void 0 ? void 0 : _clientPageInfo.getValue(END_CURSOR);\n        var serverEndCursor = serverPageInfo === null || serverPageInfo === void 0 ? void 0 : serverPageInfo.getValue(END_CURSOR);\n        var isAddingEdgesAfterCurrentPage = clientPageInfo && args.after === clientEndCursor;\n        var isFillingOutCurrentPage = clientPageInfo && clientEndCursor === serverEndCursor;\n        if (isAddingEdgesAfterCurrentPage || isFillingOutCurrentPage) {\n          var nodeIDs = new Set();\n          mergeEdges(prevEdges, nextEdges, nodeIDs);\n          mergeEdges(_serverEdges, nextEdges, nodeIDs);\n        } else {\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Unexpected after cursor `%s`, edges must ' + 'be fetched from the end of the list (`%s`).', args.after, clientPageInfo && clientPageInfo.getValue(END_CURSOR)) : void 0;\n          return;\n        }\n      } else if (args.before != null) {\n        if (clientPageInfo && args.before === clientPageInfo.getValue(START_CURSOR)) {\n          var _nodeIDs = new Set();\n          mergeEdges(_serverEdges, nextEdges, _nodeIDs);\n          mergeEdges(prevEdges, nextEdges, _nodeIDs);\n        } else {\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Unexpected before cursor `%s`, edges must ' + 'be fetched from the beginning of the list (`%s`).', args.before, clientPageInfo && clientPageInfo.getValue(START_CURSOR)) : void 0;\n          return;\n        }\n      } else {\n        nextEdges = _serverEdges;\n      }\n    } else if (_serverEdges) {\n      nextEdges = _serverEdges;\n    } else {\n      nextEdges = prevEdges;\n    }\n    if (nextEdges != null && nextEdges !== prevEdges) {\n      _connection.setLinkedRecords(nextEdges, EDGES);\n    }\n    if (clientPageInfo && serverPageInfo) {\n      if (args.after == null && args.before == null) {\n        clientPageInfo.copyFieldsFrom(serverPageInfo);\n      } else if (args.before != null || args.after == null && args.last) {\n        clientPageInfo.setValue(!!serverPageInfo.getValue(HAS_PREV_PAGE), HAS_PREV_PAGE);\n        var startCursor = serverPageInfo.getValue(START_CURSOR);\n        if (typeof startCursor === 'string') {\n          clientPageInfo.setValue(startCursor, START_CURSOR);\n        }\n      } else if (args.after != null || args.before == null && args.first) {\n        clientPageInfo.setValue(!!serverPageInfo.getValue(HAS_NEXT_PAGE), HAS_NEXT_PAGE);\n        var endCursor = serverPageInfo.getValue(END_CURSOR);\n        if (typeof endCursor === 'string') {\n          clientPageInfo.setValue(endCursor, END_CURSOR);\n        }\n      }\n    }\n  }\n}\nfunction getConnection(record, key, filters) {\n  var handleKey = getRelayHandleKey(CONNECTION, key, null);\n  return record.getLinkedRecord(handleKey, filters);\n}\nfunction getConnectionID(recordID, key, filters) {\n  var handleKey = getRelayHandleKey(CONNECTION, key, null);\n  var storageKey = getStableStorageKey(handleKey, filters);\n  return generateClientID(recordID, storageKey);\n}\nfunction insertEdgeAfter(record, newEdge, cursor) {\n  var _ConnectionInterface$2 = ConnectionInterface.get(),\n    CURSOR = _ConnectionInterface$2.CURSOR,\n    EDGES = _ConnectionInterface$2.EDGES;\n  var edges = record.getLinkedRecords(EDGES);\n  if (!edges) {\n    record.setLinkedRecords([newEdge], EDGES);\n    return;\n  }\n  var nextEdges;\n  if (cursor == null) {\n    nextEdges = edges.concat(newEdge);\n  } else {\n    nextEdges = [];\n    var foundCursor = false;\n    for (var ii = 0; ii < edges.length; ii++) {\n      var edge = edges[ii];\n      nextEdges.push(edge);\n      if (edge == null) {\n        continue;\n      }\n      var edgeCursor = edge.getValue(CURSOR);\n      if (cursor === edgeCursor) {\n        nextEdges.push(newEdge);\n        foundCursor = true;\n      }\n    }\n    if (!foundCursor) {\n      nextEdges.push(newEdge);\n    }\n  }\n  record.setLinkedRecords(nextEdges, EDGES);\n}\nfunction createEdge(store, record, node, edgeType) {\n  var _ConnectionInterface$3 = ConnectionInterface.get(),\n    NODE = _ConnectionInterface$3.NODE;\n  var edgeID = generateClientID(record.getDataID(), node.getDataID());\n  var edge = store.get(edgeID);\n  if (!edge) {\n    edge = store.create(edgeID, edgeType);\n  }\n  edge.setLinkedRecord(node, NODE);\n  if (edge.getValue('cursor') == null) {\n    edge.setValue(null, 'cursor');\n  }\n  return edge;\n}\nfunction insertEdgeBefore(record, newEdge, cursor) {\n  var _ConnectionInterface$4 = ConnectionInterface.get(),\n    CURSOR = _ConnectionInterface$4.CURSOR,\n    EDGES = _ConnectionInterface$4.EDGES;\n  var edges = record.getLinkedRecords(EDGES);\n  if (!edges) {\n    record.setLinkedRecords([newEdge], EDGES);\n    return;\n  }\n  var nextEdges;\n  if (cursor == null) {\n    nextEdges = [newEdge].concat(edges);\n  } else {\n    nextEdges = [];\n    var foundCursor = false;\n    for (var ii = 0; ii < edges.length; ii++) {\n      var edge = edges[ii];\n      if (edge != null) {\n        var edgeCursor = edge.getValue(CURSOR);\n        if (cursor === edgeCursor) {\n          nextEdges.push(newEdge);\n          foundCursor = true;\n        }\n      }\n      nextEdges.push(edge);\n    }\n    if (!foundCursor) {\n      nextEdges.unshift(newEdge);\n    }\n  }\n  record.setLinkedRecords(nextEdges, EDGES);\n}\nfunction deleteNode(record, nodeID) {\n  var _ConnectionInterface$5 = ConnectionInterface.get(),\n    EDGES = _ConnectionInterface$5.EDGES,\n    NODE = _ConnectionInterface$5.NODE;\n  var edges = record.getLinkedRecords(EDGES);\n  if (!edges) {\n    return;\n  }\n  var nextEdges;\n  for (var ii = 0; ii < edges.length; ii++) {\n    var edge = edges[ii];\n    var node = edge && edge.getLinkedRecord(NODE);\n    if (node != null && node.getDataID() === nodeID) {\n      if (nextEdges === undefined) {\n        nextEdges = edges.slice(0, ii);\n      }\n    } else if (nextEdges !== undefined) {\n      nextEdges.push(edge);\n    }\n  }\n  if (nextEdges !== undefined) {\n    record.setLinkedRecords(nextEdges, EDGES);\n  }\n}\nfunction buildConnectionEdge(store, connection, edge) {\n  if (edge == null) {\n    return edge;\n  }\n  var _ConnectionInterface$6 = ConnectionInterface.get(),\n    EDGES = _ConnectionInterface$6.EDGES;\n  var edgeIndex = connection.getValue(NEXT_EDGE_INDEX);\n  !(typeof edgeIndex === 'number') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ConnectionHandler: Expected %s to be a number, got `%s`.', NEXT_EDGE_INDEX, edgeIndex) : invariant(false) : void 0;\n  var edgeID = generateClientID(connection.getDataID(), EDGES, edgeIndex);\n  var connectionEdge = store.create(edgeID, edge.getType());\n  connectionEdge.copyFieldsFrom(edge);\n  if (connectionEdge.getValue('cursor') == null) {\n    connectionEdge.setValue(null, 'cursor');\n  }\n  connection.setValue(edgeIndex + 1, NEXT_EDGE_INDEX);\n  return connectionEdge;\n}\nfunction mergeEdges(sourceEdges, targetEdges, nodeIDs) {\n  var _ConnectionInterface$7 = ConnectionInterface.get(),\n    NODE = _ConnectionInterface$7.NODE;\n  for (var ii = 0; ii < sourceEdges.length; ii++) {\n    var edge = sourceEdges[ii];\n    if (!edge) {\n      continue;\n    }\n    var node = edge.getLinkedRecord(NODE);\n    var nodeID = node && node.getDataID();\n    if (nodeID) {\n      if (nodeIDs.has(nodeID)) {\n        continue;\n      }\n      nodeIDs.add(nodeID);\n    }\n    targetEdges.push(edge);\n  }\n}\nmodule.exports = {\n  buildConnectionEdge: buildConnectionEdge,\n  createEdge: createEdge,\n  deleteNode: deleteNode,\n  getConnection: getConnection,\n  getConnectionID: getConnectionID,\n  insertEdgeAfter: insertEdgeAfter,\n  insertEdgeBefore: insertEdgeBefore,\n  update: update\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}