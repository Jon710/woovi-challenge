{"ast":null,"code":"'use strict';\n\nvar _require = require('../query/GraphQLTag'),\n  getFragment = _require.getFragment;\nvar _require2 = require('./RelayModernSelector'),\n  getSelector = _require2.getSelector;\nvar invariant = require('invariant');\nvar contextStack = [];\nfunction withResolverContext(context, cb) {\n  contextStack.push(context);\n  try {\n    return cb();\n  } finally {\n    contextStack.pop();\n  }\n}\nfunction readFragment(fragmentInput, fragmentKey) {\n  if (!contextStack.length) {\n    throw new Error('readFragment should be called only from within a Relay Resolver function.');\n  }\n  var context = contextStack[contextStack.length - 1];\n  var fragmentNode = getFragment(fragmentInput);\n  var fragmentSelector = getSelector(fragmentNode, fragmentKey);\n  !(fragmentSelector != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected a selector for the fragment of the resolver \".concat(fragmentNode.name, \", but got null.\")) : invariant(false) : void 0;\n  !(fragmentSelector.kind === 'SingularReaderSelector') ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected a singular reader selector for the fragment of the resolver \".concat(fragmentNode.name, \", but it was plural.\")) : invariant(false) : void 0;\n  var _context$getDataForRe = context.getDataForResolverFragment(fragmentSelector, fragmentKey),\n    data = _context$getDataForRe.data,\n    isMissingData = _context$getDataForRe.isMissingData;\n  if (isMissingData) {\n    throw RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL;\n  }\n  return data;\n}\nvar RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = {};\nmodule.exports = {\n  readFragment: readFragment,\n  withResolverContext: withResolverContext,\n  RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL: RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL\n};","map":{"version":3,"names":["_require","require","getFragment","_require2","getSelector","invariant","contextStack","withResolverContext","context","cb","push","pop","readFragment","fragmentInput","fragmentKey","length","Error","fragmentNode","fragmentSelector","process","env","NODE_ENV","concat","name","kind","_context$getDataForRe","getDataForResolverFragment","data","isMissingData","RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL","module","exports"],"sources":["/Users/joaoluismoraes/Desktop/woovi-challenge/web/node_modules/relay-runtime/lib/store/ResolverFragments.js"],"sourcesContent":["'use strict';\n\nvar _require = require('../query/GraphQLTag'),\n  getFragment = _require.getFragment;\nvar _require2 = require('./RelayModernSelector'),\n  getSelector = _require2.getSelector;\nvar invariant = require('invariant');\nvar contextStack = [];\nfunction withResolverContext(context, cb) {\n  contextStack.push(context);\n  try {\n    return cb();\n  } finally {\n    contextStack.pop();\n  }\n}\nfunction readFragment(fragmentInput, fragmentKey) {\n  if (!contextStack.length) {\n    throw new Error('readFragment should be called only from within a Relay Resolver function.');\n  }\n  var context = contextStack[contextStack.length - 1];\n  var fragmentNode = getFragment(fragmentInput);\n  var fragmentSelector = getSelector(fragmentNode, fragmentKey);\n  !(fragmentSelector != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected a selector for the fragment of the resolver \".concat(fragmentNode.name, \", but got null.\")) : invariant(false) : void 0;\n  !(fragmentSelector.kind === 'SingularReaderSelector') ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected a singular reader selector for the fragment of the resolver \".concat(fragmentNode.name, \", but it was plural.\")) : invariant(false) : void 0;\n  var _context$getDataForRe = context.getDataForResolverFragment(fragmentSelector, fragmentKey),\n    data = _context$getDataForRe.data,\n    isMissingData = _context$getDataForRe.isMissingData;\n  if (isMissingData) {\n    throw RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL;\n  }\n  return data;\n}\nvar RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = {};\nmodule.exports = {\n  readFragment: readFragment,\n  withResolverContext: withResolverContext,\n  RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL: RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL\n};"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAqB,CAAC;EAC3CC,WAAW,GAAGF,QAAQ,CAACE,WAAW;AACpC,IAAIC,SAAS,GAAGF,OAAO,CAAC,uBAAuB,CAAC;EAC9CG,WAAW,GAAGD,SAAS,CAACC,WAAW;AACrC,IAAIC,SAAS,GAAGJ,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIK,YAAY,GAAG,EAAE;AACrB,SAASC,mBAAmBA,CAACC,OAAO,EAAEC,EAAE,EAAE;EACxCH,YAAY,CAACI,IAAI,CAACF,OAAO,CAAC;EAC1B,IAAI;IACF,OAAOC,EAAE,CAAC,CAAC;EACb,CAAC,SAAS;IACRH,YAAY,CAACK,GAAG,CAAC,CAAC;EACpB;AACF;AACA,SAASC,YAAYA,CAACC,aAAa,EAAEC,WAAW,EAAE;EAChD,IAAI,CAACR,YAAY,CAACS,MAAM,EAAE;IACxB,MAAM,IAAIC,KAAK,CAAC,2EAA2E,CAAC;EAC9F;EACA,IAAIR,OAAO,GAAGF,YAAY,CAACA,YAAY,CAACS,MAAM,GAAG,CAAC,CAAC;EACnD,IAAIE,YAAY,GAAGf,WAAW,CAACW,aAAa,CAAC;EAC7C,IAAIK,gBAAgB,GAAGd,WAAW,CAACa,YAAY,EAAEH,WAAW,CAAC;EAC7D,EAAEI,gBAAgB,IAAI,IAAI,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGhB,SAAS,CAAC,KAAK,EAAE,uDAAuD,CAACiB,MAAM,CAACL,YAAY,CAACM,IAAI,EAAE,iBAAiB,CAAC,CAAC,GAAGlB,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;EACxN,EAAEa,gBAAgB,CAACM,IAAI,KAAK,wBAAwB,CAAC,GAAGL,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGhB,SAAS,CAAC,KAAK,EAAE,uEAAuE,CAACiB,MAAM,CAACL,YAAY,CAACM,IAAI,EAAE,sBAAsB,CAAC,CAAC,GAAGlB,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;EACvQ,IAAIoB,qBAAqB,GAAGjB,OAAO,CAACkB,0BAA0B,CAACR,gBAAgB,EAAEJ,WAAW,CAAC;IAC3Fa,IAAI,GAAGF,qBAAqB,CAACE,IAAI;IACjCC,aAAa,GAAGH,qBAAqB,CAACG,aAAa;EACrD,IAAIA,aAAa,EAAE;IACjB,MAAMC,uCAAuC;EAC/C;EACA,OAAOF,IAAI;AACb;AACA,IAAIE,uCAAuC,GAAG,CAAC,CAAC;AAChDC,MAAM,CAACC,OAAO,GAAG;EACfnB,YAAY,EAAEA,YAAY;EAC1BL,mBAAmB,EAAEA,mBAAmB;EACxCsB,uCAAuC,EAAEA;AAC3C,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}