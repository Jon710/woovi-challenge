{"ast":null,"code":"'use strict';\n\nvar invariant = require('invariant');\nfunction getRefetchMetadata(fragmentNode, componentDisplayName) {\n  var _fragmentNode$metadat, _fragmentNode$metadat2;\n  !(((_fragmentNode$metadat = fragmentNode.metadata) === null || _fragmentNode$metadat === void 0 ? void 0 : _fragmentNode$metadat.plural) !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: getRefetchMetadata(): Expected fragment `%s` not to be plural when using ' + '`%s`. Remove `@relay(plural: true)` from fragment `%s` ' + 'in order to use it with `%s`.', fragmentNode.name, componentDisplayName, fragmentNode.name, componentDisplayName) : invariant(false) : void 0;\n  var refetchMetadata = (_fragmentNode$metadat2 = fragmentNode.metadata) === null || _fragmentNode$metadat2 === void 0 ? void 0 : _fragmentNode$metadat2.refetch;\n  !(refetchMetadata != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: getRefetchMetadata(): Expected fragment `%s` to be refetchable when using `%s`. ' + 'Did you forget to add a @refetchable directive to the fragment?', componentDisplayName, fragmentNode.name) : invariant(false) : void 0;\n  var refetchableRequest = refetchMetadata.operation[\"default\"] ? refetchMetadata.operation[\"default\"] : refetchMetadata.operation;\n  var fragmentRefPathInResponse = refetchMetadata.fragmentPathInResult;\n  !(typeof refetchableRequest !== 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: getRefetchMetadata(): Expected refetch query to be an ' + \"operation and not a string when using `%s`. If you're seeing this, \" + 'this is likely a bug in Relay.', componentDisplayName) : invariant(false) : void 0;\n  var identifierInfo = refetchMetadata.identifierInfo;\n  if (identifierInfo != null) {\n    !(identifierInfo.identifierField == null || typeof identifierInfo.identifierField === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: getRefetchMetadata(): Expected `identifierField` to be a string.') : invariant(false) : void 0;\n    !(identifierInfo.identifierQueryVariableName == null || typeof identifierInfo.identifierQueryVariableName === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: getRefetchMetadata(): Expected `identifierQueryVariableName` to be a string.') : invariant(false) : void 0;\n  }\n  return {\n    fragmentRefPathInResponse: fragmentRefPathInResponse,\n    identifierInfo: identifierInfo,\n    refetchableRequest: refetchableRequest,\n    refetchMetadata: refetchMetadata\n  };\n}\nmodule.exports = getRefetchMetadata;","map":{"version":3,"names":["invariant","require","getRefetchMetadata","fragmentNode","componentDisplayName","_fragmentNode$metadat","_fragmentNode$metadat2","metadata","plural","process","env","NODE_ENV","name","refetchMetadata","refetch","refetchableRequest","operation","fragmentRefPathInResponse","fragmentPathInResult","identifierInfo","identifierField","identifierQueryVariableName","module","exports"],"sources":["/Users/joaoluismoraes/Desktop/woovi-challenge/web/node_modules/relay-runtime/lib/util/getRefetchMetadata.js"],"sourcesContent":["'use strict';\n\nvar invariant = require('invariant');\nfunction getRefetchMetadata(fragmentNode, componentDisplayName) {\n  var _fragmentNode$metadat, _fragmentNode$metadat2;\n  !(((_fragmentNode$metadat = fragmentNode.metadata) === null || _fragmentNode$metadat === void 0 ? void 0 : _fragmentNode$metadat.plural) !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: getRefetchMetadata(): Expected fragment `%s` not to be plural when using ' + '`%s`. Remove `@relay(plural: true)` from fragment `%s` ' + 'in order to use it with `%s`.', fragmentNode.name, componentDisplayName, fragmentNode.name, componentDisplayName) : invariant(false) : void 0;\n  var refetchMetadata = (_fragmentNode$metadat2 = fragmentNode.metadata) === null || _fragmentNode$metadat2 === void 0 ? void 0 : _fragmentNode$metadat2.refetch;\n  !(refetchMetadata != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: getRefetchMetadata(): Expected fragment `%s` to be refetchable when using `%s`. ' + 'Did you forget to add a @refetchable directive to the fragment?', componentDisplayName, fragmentNode.name) : invariant(false) : void 0;\n  var refetchableRequest = refetchMetadata.operation[\"default\"] ? refetchMetadata.operation[\"default\"] : refetchMetadata.operation;\n  var fragmentRefPathInResponse = refetchMetadata.fragmentPathInResult;\n  !(typeof refetchableRequest !== 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: getRefetchMetadata(): Expected refetch query to be an ' + \"operation and not a string when using `%s`. If you're seeing this, \" + 'this is likely a bug in Relay.', componentDisplayName) : invariant(false) : void 0;\n  var identifierInfo = refetchMetadata.identifierInfo;\n  if (identifierInfo != null) {\n    !(identifierInfo.identifierField == null || typeof identifierInfo.identifierField === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: getRefetchMetadata(): Expected `identifierField` to be a string.') : invariant(false) : void 0;\n    !(identifierInfo.identifierQueryVariableName == null || typeof identifierInfo.identifierQueryVariableName === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: getRefetchMetadata(): Expected `identifierQueryVariableName` to be a string.') : invariant(false) : void 0;\n  }\n  return {\n    fragmentRefPathInResponse: fragmentRefPathInResponse,\n    identifierInfo: identifierInfo,\n    refetchableRequest: refetchableRequest,\n    refetchMetadata: refetchMetadata\n  };\n}\nmodule.exports = getRefetchMetadata;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AACpC,SAASC,kBAAkBA,CAACC,YAAY,EAAEC,oBAAoB,EAAE;EAC9D,IAAIC,qBAAqB,EAAEC,sBAAsB;EACjD,EAAE,CAAC,CAACD,qBAAqB,GAAGF,YAAY,CAACI,QAAQ,MAAM,IAAI,IAAIF,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACG,MAAM,MAAM,IAAI,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,kFAAkF,GAAG,yDAAyD,GAAG,+BAA+B,EAAEG,YAAY,CAACS,IAAI,EAAER,oBAAoB,EAAED,YAAY,CAACS,IAAI,EAAER,oBAAoB,CAAC,GAAGJ,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;EAC7e,IAAIa,eAAe,GAAG,CAACP,sBAAsB,GAAGH,YAAY,CAACI,QAAQ,MAAM,IAAI,IAAID,sBAAsB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACQ,OAAO;EAC9J,EAAED,eAAe,IAAI,IAAI,CAAC,GAAGJ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,yFAAyF,GAAG,iEAAiE,EAAEI,oBAAoB,EAAED,YAAY,CAACS,IAAI,CAAC,GAAGZ,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;EACzT,IAAIe,kBAAkB,GAAGF,eAAe,CAACG,SAAS,CAAC,SAAS,CAAC,GAAGH,eAAe,CAACG,SAAS,CAAC,SAAS,CAAC,GAAGH,eAAe,CAACG,SAAS;EAChI,IAAIC,yBAAyB,GAAGJ,eAAe,CAACK,oBAAoB;EACpE,EAAE,OAAOH,kBAAkB,KAAK,QAAQ,CAAC,GAAGN,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,+DAA+D,GAAG,qEAAqE,GAAG,gCAAgC,EAAEI,oBAAoB,CAAC,GAAGJ,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;EAClU,IAAImB,cAAc,GAAGN,eAAe,CAACM,cAAc;EACnD,IAAIA,cAAc,IAAI,IAAI,EAAE;IAC1B,EAAEA,cAAc,CAACC,eAAe,IAAI,IAAI,IAAI,OAAOD,cAAc,CAACC,eAAe,KAAK,QAAQ,CAAC,GAAGX,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,yEAAyE,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;IACjQ,EAAEmB,cAAc,CAACE,2BAA2B,IAAI,IAAI,IAAI,OAAOF,cAAc,CAACE,2BAA2B,KAAK,QAAQ,CAAC,GAAGZ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,qFAAqF,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;EACvS;EACA,OAAO;IACLiB,yBAAyB,EAAEA,yBAAyB;IACpDE,cAAc,EAAEA,cAAc;IAC9BJ,kBAAkB,EAAEA,kBAAkB;IACtCF,eAAe,EAAEA;EACnB,CAAC;AACH;AACAS,MAAM,CAACC,OAAO,GAAGrB,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}