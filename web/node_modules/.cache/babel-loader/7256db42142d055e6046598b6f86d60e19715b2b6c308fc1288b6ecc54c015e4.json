{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\nvar _require = require('./FragmentResource'),\n  getFragmentResourceForEnvironment = _require.getFragmentResourceForEnvironment;\nvar ProfilerContext = require('./ProfilerContext');\nvar _require2 = require('./QueryResource'),\n  getQueryResourceForEnvironment = _require2.getQueryResourceForEnvironment;\nvar useFragmentNode = require('./useFragmentNode');\nvar useIsMountedRef = require('./useIsMountedRef');\nvar useQueryLoader = require('./useQueryLoader');\nvar useRelayEnvironment = require('./useRelayEnvironment');\nvar invariant = require('invariant');\nvar _require3 = require('react'),\n  useCallback = _require3.useCallback,\n  useContext = _require3.useContext,\n  useReducer = _require3.useReducer;\nvar _require4 = require('relay-runtime'),\n  fetchQuery = _require4.__internal.fetchQuery,\n  createOperationDescriptor = _require4.createOperationDescriptor,\n  getFragmentIdentifier = _require4.getFragmentIdentifier,\n  getRefetchMetadata = _require4.getRefetchMetadata,\n  getSelector = _require4.getSelector,\n  getValueAtPath = _require4.getValueAtPath;\nvar warning = require(\"fbjs/lib/warning\");\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'refetch':\n      {\n        var _action$refetchEnviro;\n        return (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, state), {}, {\n          fetchPolicy: action.fetchPolicy,\n          mirroredEnvironment: (_action$refetchEnviro = action.refetchEnvironment) !== null && _action$refetchEnviro !== void 0 ? _action$refetchEnviro : state.mirroredEnvironment,\n          onComplete: action.onComplete,\n          refetchEnvironment: action.refetchEnvironment,\n          refetchQuery: action.refetchQuery,\n          renderPolicy: action.renderPolicy\n        });\n      }\n    case 'reset':\n      {\n        return {\n          fetchPolicy: undefined,\n          mirroredEnvironment: action.environment,\n          mirroredFragmentIdentifier: action.fragmentIdentifier,\n          onComplete: undefined,\n          refetchQuery: null,\n          renderPolicy: undefined\n        };\n      }\n    default:\n      {\n        action.type;\n        throw new Error('useRefetchableFragmentNode: Unexpected action type');\n      }\n  }\n}\nfunction useRefetchableFragmentNode(fragmentNode, parentFragmentRef, componentDisplayName) {\n  var parentEnvironment = useRelayEnvironment();\n  var _getRefetchMetadata = getRefetchMetadata(fragmentNode, componentDisplayName),\n    refetchableRequest = _getRefetchMetadata.refetchableRequest,\n    fragmentRefPathInResponse = _getRefetchMetadata.fragmentRefPathInResponse;\n  var fragmentIdentifier = getFragmentIdentifier(fragmentNode, parentFragmentRef);\n  var _useReducer = useReducer(reducer, {\n      fetchPolicy: undefined,\n      mirroredEnvironment: parentEnvironment,\n      mirroredFragmentIdentifier: fragmentIdentifier,\n      onComplete: undefined,\n      refetchEnvironment: null,\n      refetchQuery: null,\n      renderPolicy: undefined\n    }),\n    refetchState = _useReducer[0],\n    dispatch = _useReducer[1];\n  var fetchPolicy = refetchState.fetchPolicy,\n    mirroredEnvironment = refetchState.mirroredEnvironment,\n    mirroredFragmentIdentifier = refetchState.mirroredFragmentIdentifier,\n    onComplete = refetchState.onComplete,\n    refetchEnvironment = refetchState.refetchEnvironment,\n    refetchQuery = refetchState.refetchQuery,\n    renderPolicy = refetchState.renderPolicy;\n  var environment = refetchEnvironment !== null && refetchEnvironment !== void 0 ? refetchEnvironment : parentEnvironment;\n  var QueryResource = getQueryResourceForEnvironment(environment);\n  var FragmentResource = getFragmentResourceForEnvironment(environment);\n  var profilerContext = useContext(ProfilerContext);\n  var shouldReset = environment !== mirroredEnvironment || fragmentIdentifier !== mirroredFragmentIdentifier;\n  var _useQueryLoader = useQueryLoader(refetchableRequest),\n    queryRef = _useQueryLoader[0],\n    loadQuery = _useQueryLoader[1],\n    disposeQuery = _useQueryLoader[2];\n  var fragmentRef = parentFragmentRef;\n  var _getRefetchMetadata2 = getRefetchMetadata(fragmentNode, componentDisplayName),\n    identifierInfo = _getRefetchMetadata2.identifierInfo;\n  if (shouldReset) {\n    dispatch({\n      type: 'reset',\n      environment: environment,\n      fragmentIdentifier: fragmentIdentifier\n    });\n    disposeQuery();\n  } else if (refetchQuery != null && queryRef != null) {\n    var debugPreviousIDAndTypename;\n    if (process.env.NODE_ENV !== \"production\") {\n      debugPreviousIDAndTypename = debugFunctions.getInitialIDAndType(refetchQuery.request.variables, fragmentRefPathInResponse, identifierInfo === null || identifierInfo === void 0 ? void 0 : identifierInfo.identifierQueryVariableName, environment);\n    }\n    var handleQueryCompleted = function handleQueryCompleted(maybeError) {\n      onComplete && onComplete(maybeError !== null && maybeError !== void 0 ? maybeError : null);\n    };\n    var fetchObservable = queryRef.source != null ? queryRef.source : fetchQuery(environment, refetchQuery);\n    var queryResult = profilerContext.wrapPrepareQueryResource(function () {\n      return QueryResource.prepare(refetchQuery, fetchObservable, fetchPolicy, renderPolicy, {\n        error: handleQueryCompleted,\n        complete: function complete() {\n          if (process.env.NODE_ENV !== \"production\") {\n            debugFunctions.checkSameTypeAfterRefetch(debugPreviousIDAndTypename, environment, fragmentNode, componentDisplayName);\n          }\n          handleQueryCompleted();\n        }\n      }, queryRef.fetchKey, profilerContext);\n    });\n    var queryData = FragmentResource.read(queryResult.fragmentNode, queryResult.fragmentRef, componentDisplayName).data;\n    !(queryData != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected to be able to read refetch query response. ' + \"If you're seeing this, this is likely a bug in Relay.\") : invariant(false) : void 0;\n    var refetchedFragmentRef = getValueAtPath(queryData, fragmentRefPathInResponse);\n    fragmentRef = refetchedFragmentRef;\n    if (process.env.NODE_ENV !== \"production\") {\n      debugFunctions.checkSameIDAfterRefetch(debugPreviousIDAndTypename, fragmentRef, fragmentNode, componentDisplayName);\n    }\n  }\n  var _useFragmentNode = useFragmentNode(fragmentNode, fragmentRef, componentDisplayName),\n    fragmentData = _useFragmentNode.data,\n    disableStoreUpdates = _useFragmentNode.disableStoreUpdates,\n    enableStoreUpdates = _useFragmentNode.enableStoreUpdates;\n  var refetch = useRefetchFunction(componentDisplayName, dispatch, disposeQuery, fragmentData, fragmentIdentifier, fragmentNode, fragmentRefPathInResponse, identifierInfo, loadQuery, parentFragmentRef, refetchableRequest);\n  return {\n    fragmentData: fragmentData,\n    fragmentRef: fragmentRef,\n    refetch: refetch,\n    disableStoreUpdates: disableStoreUpdates,\n    enableStoreUpdates: enableStoreUpdates\n  };\n}\nfunction useRefetchFunction(componentDisplayName, dispatch, disposeQuery, fragmentData, fragmentIdentifier, fragmentNode, fragmentRefPathInResponse, identifierInfo, loadQuery, parentFragmentRef, refetchableRequest) {\n  var isMountedRef = useIsMountedRef();\n  var identifierValue = (identifierInfo === null || identifierInfo === void 0 ? void 0 : identifierInfo.identifierField) != null && fragmentData != null && typeof fragmentData === 'object' ? fragmentData[identifierInfo.identifierField] : null;\n  return useCallback(function (providedRefetchVariables, options) {\n    if (isMountedRef.current !== true) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Unexpected call to `refetch` on unmounted component for fragment ' + '`%s` in `%s`. It looks like some instances of your component are ' + 'still trying to fetch data but they already unmounted. ' + 'Please make sure you clear all timers, intervals, ' + 'async calls, etc that may trigger a fetch.', fragmentNode.name, componentDisplayName) : void 0;\n      return {\n        dispose: function dispose() {}\n      };\n    }\n    if (parentFragmentRef == null) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Unexpected call to `refetch` while using a null fragment ref ' + 'for fragment `%s` in `%s`. When calling `refetch`, we expect ' + \"initial fragment data to be non-null. Please make sure you're \" + 'passing a valid fragment ref to `%s` before calling ' + '`refetch`, or make sure you pass all required variables to `refetch`.', fragmentNode.name, componentDisplayName, componentDisplayName) : void 0;\n    }\n    var refetchEnvironment = options === null || options === void 0 ? void 0 : options.__environment;\n    var fetchPolicy = options === null || options === void 0 ? void 0 : options.fetchPolicy;\n    var renderPolicy = options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy;\n    var onComplete = options === null || options === void 0 ? void 0 : options.onComplete;\n    var fragmentSelector = getSelector(fragmentNode, parentFragmentRef);\n    var parentVariables;\n    var fragmentVariables;\n    if (fragmentSelector == null) {\n      parentVariables = {};\n      fragmentVariables = {};\n    } else if (fragmentSelector.kind === 'PluralReaderSelector') {\n      var _fragmentSelector$sel, _fragmentSelector$sel2, _fragmentSelector$sel3, _fragmentSelector$sel4;\n      parentVariables = (_fragmentSelector$sel = (_fragmentSelector$sel2 = fragmentSelector.selectors[0]) === null || _fragmentSelector$sel2 === void 0 ? void 0 : _fragmentSelector$sel2.owner.variables) !== null && _fragmentSelector$sel !== void 0 ? _fragmentSelector$sel : {};\n      fragmentVariables = (_fragmentSelector$sel3 = (_fragmentSelector$sel4 = fragmentSelector.selectors[0]) === null || _fragmentSelector$sel4 === void 0 ? void 0 : _fragmentSelector$sel4.variables) !== null && _fragmentSelector$sel3 !== void 0 ? _fragmentSelector$sel3 : {};\n    } else {\n      parentVariables = fragmentSelector.owner.variables;\n      fragmentVariables = fragmentSelector.variables;\n    }\n    var refetchVariables = (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, parentVariables), fragmentVariables), providedRefetchVariables);\n    if (identifierInfo != null && !providedRefetchVariables.hasOwnProperty(identifierInfo.identifierQueryVariableName)) {\n      if (typeof identifierValue !== 'string') {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Expected result to have a string  ' + '`%s` in order to refetch, got `%s`.', identifierInfo.identifierField, identifierValue) : void 0;\n      }\n      refetchVariables[identifierInfo.identifierQueryVariableName] = identifierValue;\n    }\n    var refetchQuery = createOperationDescriptor(refetchableRequest, refetchVariables, {\n      force: true\n    });\n    loadQuery(refetchQuery.request.variables, {\n      fetchPolicy: fetchPolicy,\n      __environment: refetchEnvironment,\n      __nameForWarning: 'refetch'\n    });\n    dispatch({\n      type: 'refetch',\n      fetchPolicy: fetchPolicy,\n      onComplete: onComplete,\n      refetchEnvironment: refetchEnvironment,\n      refetchQuery: refetchQuery,\n      renderPolicy: renderPolicy\n    });\n    return {\n      dispose: disposeQuery\n    };\n  }, [fragmentIdentifier, dispatch, disposeQuery, identifierValue, loadQuery]);\n}\nvar debugFunctions;\nif (process.env.NODE_ENV !== \"production\") {\n  debugFunctions = {\n    getInitialIDAndType: function getInitialIDAndType(memoRefetchVariables, fragmentRefPathInResponse, identifierQueryVariableName, environment) {\n      var _require5 = require('relay-runtime'),\n        Record = _require5.Record;\n      var id = memoRefetchVariables === null || memoRefetchVariables === void 0 ? void 0 : memoRefetchVariables[identifierQueryVariableName !== null && identifierQueryVariableName !== void 0 ? identifierQueryVariableName : 'id'];\n      if (fragmentRefPathInResponse.length !== 1 || fragmentRefPathInResponse[0] !== 'node' || id == null) {\n        return null;\n      }\n      var recordSource = environment.getStore().getSource();\n      var record = recordSource.get(id);\n      var typename = record == null ? null : Record.getType(record);\n      if (typename == null) {\n        return null;\n      }\n      return {\n        id: id,\n        typename: typename\n      };\n    },\n    checkSameTypeAfterRefetch: function checkSameTypeAfterRefetch(previousIDAndType, environment, fragmentNode, componentDisplayName) {\n      var _require6 = require('relay-runtime'),\n        Record = _require6.Record;\n      if (!previousIDAndType) {\n        return;\n      }\n      var recordSource = environment.getStore().getSource();\n      var record = recordSource.get(previousIDAndType.id);\n      var typename = record && Record.getType(record);\n      if (typename !== previousIDAndType.typename) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Call to `refetch` returned data with a different ' + '__typename: was `%s`, now `%s`, on `%s` in `%s`. ' + 'Please make sure the server correctly implements' + 'unique id requirement.', previousIDAndType.typename, typename, fragmentNode.name, componentDisplayName) : void 0;\n      }\n    },\n    checkSameIDAfterRefetch: function checkSameIDAfterRefetch(previousIDAndTypename, refetchedFragmentRef, fragmentNode, componentDisplayName) {\n      if (previousIDAndTypename == null) {\n        return;\n      }\n      var _require7 = require('relay-runtime'),\n        ID_KEY = _require7.ID_KEY;\n      var resultID = refetchedFragmentRef[ID_KEY];\n      if (resultID != null && resultID !== previousIDAndTypename.id) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Call to `refetch` returned a different id, expected ' + '`%s`, got `%s`, on `%s` in `%s`. ' + 'Please make sure the server correctly implements ' + 'unique id requirement.', resultID, previousIDAndTypename.id, fragmentNode.name, componentDisplayName) : void 0;\n      }\n    }\n  };\n}\nmodule.exports = useRefetchableFragmentNode;","map":{"version":3,"names":["_interopRequireDefault","require","_objectSpread2","_require","getFragmentResourceForEnvironment","ProfilerContext","_require2","getQueryResourceForEnvironment","useFragmentNode","useIsMountedRef","useQueryLoader","useRelayEnvironment","invariant","_require3","useCallback","useContext","useReducer","_require4","fetchQuery","__internal","createOperationDescriptor","getFragmentIdentifier","getRefetchMetadata","getSelector","getValueAtPath","warning","reducer","state","action","type","_action$refetchEnviro","fetchPolicy","mirroredEnvironment","refetchEnvironment","onComplete","refetchQuery","renderPolicy","undefined","environment","mirroredFragmentIdentifier","fragmentIdentifier","Error","useRefetchableFragmentNode","fragmentNode","parentFragmentRef","componentDisplayName","parentEnvironment","_getRefetchMetadata","refetchableRequest","fragmentRefPathInResponse","_useReducer","refetchState","dispatch","QueryResource","FragmentResource","profilerContext","shouldReset","_useQueryLoader","queryRef","loadQuery","disposeQuery","fragmentRef","_getRefetchMetadata2","identifierInfo","debugPreviousIDAndTypename","process","env","NODE_ENV","debugFunctions","getInitialIDAndType","request","variables","identifierQueryVariableName","handleQueryCompleted","maybeError","fetchObservable","source","queryResult","wrapPrepareQueryResource","prepare","error","complete","checkSameTypeAfterRefetch","fetchKey","queryData","read","data","refetchedFragmentRef","checkSameIDAfterRefetch","_useFragmentNode","fragmentData","disableStoreUpdates","enableStoreUpdates","refetch","useRefetchFunction","isMountedRef","identifierValue","identifierField","providedRefetchVariables","options","current","name","dispose","__environment","UNSTABLE_renderPolicy","fragmentSelector","parentVariables","fragmentVariables","kind","_fragmentSelector$sel","_fragmentSelector$sel2","_fragmentSelector$sel3","_fragmentSelector$sel4","selectors","owner","refetchVariables","hasOwnProperty","force","__nameForWarning","memoRefetchVariables","_require5","Record","id","length","recordSource","getStore","getSource","record","get","typename","getType","previousIDAndType","_require6","previousIDAndTypename","_require7","ID_KEY","resultID","module","exports"],"sources":["/Users/joaoluismoraes/Desktop/woovi-challenge/web/node_modules/react-relay/lib/relay-hooks/useRefetchableFragmentNode.js"],"sourcesContent":["'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\nvar _require = require('./FragmentResource'),\n  getFragmentResourceForEnvironment = _require.getFragmentResourceForEnvironment;\nvar ProfilerContext = require('./ProfilerContext');\nvar _require2 = require('./QueryResource'),\n  getQueryResourceForEnvironment = _require2.getQueryResourceForEnvironment;\nvar useFragmentNode = require('./useFragmentNode');\nvar useIsMountedRef = require('./useIsMountedRef');\nvar useQueryLoader = require('./useQueryLoader');\nvar useRelayEnvironment = require('./useRelayEnvironment');\nvar invariant = require('invariant');\nvar _require3 = require('react'),\n  useCallback = _require3.useCallback,\n  useContext = _require3.useContext,\n  useReducer = _require3.useReducer;\nvar _require4 = require('relay-runtime'),\n  fetchQuery = _require4.__internal.fetchQuery,\n  createOperationDescriptor = _require4.createOperationDescriptor,\n  getFragmentIdentifier = _require4.getFragmentIdentifier,\n  getRefetchMetadata = _require4.getRefetchMetadata,\n  getSelector = _require4.getSelector,\n  getValueAtPath = _require4.getValueAtPath;\nvar warning = require(\"fbjs/lib/warning\");\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'refetch':\n      {\n        var _action$refetchEnviro;\n        return (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, state), {}, {\n          fetchPolicy: action.fetchPolicy,\n          mirroredEnvironment: (_action$refetchEnviro = action.refetchEnvironment) !== null && _action$refetchEnviro !== void 0 ? _action$refetchEnviro : state.mirroredEnvironment,\n          onComplete: action.onComplete,\n          refetchEnvironment: action.refetchEnvironment,\n          refetchQuery: action.refetchQuery,\n          renderPolicy: action.renderPolicy\n        });\n      }\n    case 'reset':\n      {\n        return {\n          fetchPolicy: undefined,\n          mirroredEnvironment: action.environment,\n          mirroredFragmentIdentifier: action.fragmentIdentifier,\n          onComplete: undefined,\n          refetchQuery: null,\n          renderPolicy: undefined\n        };\n      }\n    default:\n      {\n        action.type;\n        throw new Error('useRefetchableFragmentNode: Unexpected action type');\n      }\n  }\n}\nfunction useRefetchableFragmentNode(fragmentNode, parentFragmentRef, componentDisplayName) {\n  var parentEnvironment = useRelayEnvironment();\n  var _getRefetchMetadata = getRefetchMetadata(fragmentNode, componentDisplayName),\n    refetchableRequest = _getRefetchMetadata.refetchableRequest,\n    fragmentRefPathInResponse = _getRefetchMetadata.fragmentRefPathInResponse;\n  var fragmentIdentifier = getFragmentIdentifier(fragmentNode, parentFragmentRef);\n  var _useReducer = useReducer(reducer, {\n      fetchPolicy: undefined,\n      mirroredEnvironment: parentEnvironment,\n      mirroredFragmentIdentifier: fragmentIdentifier,\n      onComplete: undefined,\n      refetchEnvironment: null,\n      refetchQuery: null,\n      renderPolicy: undefined\n    }),\n    refetchState = _useReducer[0],\n    dispatch = _useReducer[1];\n  var fetchPolicy = refetchState.fetchPolicy,\n    mirroredEnvironment = refetchState.mirroredEnvironment,\n    mirroredFragmentIdentifier = refetchState.mirroredFragmentIdentifier,\n    onComplete = refetchState.onComplete,\n    refetchEnvironment = refetchState.refetchEnvironment,\n    refetchQuery = refetchState.refetchQuery,\n    renderPolicy = refetchState.renderPolicy;\n  var environment = refetchEnvironment !== null && refetchEnvironment !== void 0 ? refetchEnvironment : parentEnvironment;\n  var QueryResource = getQueryResourceForEnvironment(environment);\n  var FragmentResource = getFragmentResourceForEnvironment(environment);\n  var profilerContext = useContext(ProfilerContext);\n  var shouldReset = environment !== mirroredEnvironment || fragmentIdentifier !== mirroredFragmentIdentifier;\n  var _useQueryLoader = useQueryLoader(refetchableRequest),\n    queryRef = _useQueryLoader[0],\n    loadQuery = _useQueryLoader[1],\n    disposeQuery = _useQueryLoader[2];\n  var fragmentRef = parentFragmentRef;\n  var _getRefetchMetadata2 = getRefetchMetadata(fragmentNode, componentDisplayName),\n    identifierInfo = _getRefetchMetadata2.identifierInfo;\n  if (shouldReset) {\n    dispatch({\n      type: 'reset',\n      environment: environment,\n      fragmentIdentifier: fragmentIdentifier\n    });\n    disposeQuery();\n  } else if (refetchQuery != null && queryRef != null) {\n    var debugPreviousIDAndTypename;\n    if (process.env.NODE_ENV !== \"production\") {\n      debugPreviousIDAndTypename = debugFunctions.getInitialIDAndType(refetchQuery.request.variables, fragmentRefPathInResponse, identifierInfo === null || identifierInfo === void 0 ? void 0 : identifierInfo.identifierQueryVariableName, environment);\n    }\n    var handleQueryCompleted = function handleQueryCompleted(maybeError) {\n      onComplete && onComplete(maybeError !== null && maybeError !== void 0 ? maybeError : null);\n    };\n    var fetchObservable = queryRef.source != null ? queryRef.source : fetchQuery(environment, refetchQuery);\n    var queryResult = profilerContext.wrapPrepareQueryResource(function () {\n      return QueryResource.prepare(refetchQuery, fetchObservable, fetchPolicy, renderPolicy, {\n        error: handleQueryCompleted,\n        complete: function complete() {\n          if (process.env.NODE_ENV !== \"production\") {\n            debugFunctions.checkSameTypeAfterRefetch(debugPreviousIDAndTypename, environment, fragmentNode, componentDisplayName);\n          }\n          handleQueryCompleted();\n        }\n      }, queryRef.fetchKey, profilerContext);\n    });\n    var queryData = FragmentResource.read(queryResult.fragmentNode, queryResult.fragmentRef, componentDisplayName).data;\n    !(queryData != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Relay: Expected to be able to read refetch query response. ' + \"If you're seeing this, this is likely a bug in Relay.\") : invariant(false) : void 0;\n    var refetchedFragmentRef = getValueAtPath(queryData, fragmentRefPathInResponse);\n    fragmentRef = refetchedFragmentRef;\n    if (process.env.NODE_ENV !== \"production\") {\n      debugFunctions.checkSameIDAfterRefetch(debugPreviousIDAndTypename, fragmentRef, fragmentNode, componentDisplayName);\n    }\n  }\n  var _useFragmentNode = useFragmentNode(fragmentNode, fragmentRef, componentDisplayName),\n    fragmentData = _useFragmentNode.data,\n    disableStoreUpdates = _useFragmentNode.disableStoreUpdates,\n    enableStoreUpdates = _useFragmentNode.enableStoreUpdates;\n  var refetch = useRefetchFunction(componentDisplayName, dispatch, disposeQuery, fragmentData, fragmentIdentifier, fragmentNode, fragmentRefPathInResponse, identifierInfo, loadQuery, parentFragmentRef, refetchableRequest);\n  return {\n    fragmentData: fragmentData,\n    fragmentRef: fragmentRef,\n    refetch: refetch,\n    disableStoreUpdates: disableStoreUpdates,\n    enableStoreUpdates: enableStoreUpdates\n  };\n}\nfunction useRefetchFunction(componentDisplayName, dispatch, disposeQuery, fragmentData, fragmentIdentifier, fragmentNode, fragmentRefPathInResponse, identifierInfo, loadQuery, parentFragmentRef, refetchableRequest) {\n  var isMountedRef = useIsMountedRef();\n  var identifierValue = (identifierInfo === null || identifierInfo === void 0 ? void 0 : identifierInfo.identifierField) != null && fragmentData != null && typeof fragmentData === 'object' ? fragmentData[identifierInfo.identifierField] : null;\n  return useCallback(function (providedRefetchVariables, options) {\n    if (isMountedRef.current !== true) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Unexpected call to `refetch` on unmounted component for fragment ' + '`%s` in `%s`. It looks like some instances of your component are ' + 'still trying to fetch data but they already unmounted. ' + 'Please make sure you clear all timers, intervals, ' + 'async calls, etc that may trigger a fetch.', fragmentNode.name, componentDisplayName) : void 0;\n      return {\n        dispose: function dispose() {}\n      };\n    }\n    if (parentFragmentRef == null) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Unexpected call to `refetch` while using a null fragment ref ' + 'for fragment `%s` in `%s`. When calling `refetch`, we expect ' + \"initial fragment data to be non-null. Please make sure you're \" + 'passing a valid fragment ref to `%s` before calling ' + '`refetch`, or make sure you pass all required variables to `refetch`.', fragmentNode.name, componentDisplayName, componentDisplayName) : void 0;\n    }\n    var refetchEnvironment = options === null || options === void 0 ? void 0 : options.__environment;\n    var fetchPolicy = options === null || options === void 0 ? void 0 : options.fetchPolicy;\n    var renderPolicy = options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy;\n    var onComplete = options === null || options === void 0 ? void 0 : options.onComplete;\n    var fragmentSelector = getSelector(fragmentNode, parentFragmentRef);\n    var parentVariables;\n    var fragmentVariables;\n    if (fragmentSelector == null) {\n      parentVariables = {};\n      fragmentVariables = {};\n    } else if (fragmentSelector.kind === 'PluralReaderSelector') {\n      var _fragmentSelector$sel, _fragmentSelector$sel2, _fragmentSelector$sel3, _fragmentSelector$sel4;\n      parentVariables = (_fragmentSelector$sel = (_fragmentSelector$sel2 = fragmentSelector.selectors[0]) === null || _fragmentSelector$sel2 === void 0 ? void 0 : _fragmentSelector$sel2.owner.variables) !== null && _fragmentSelector$sel !== void 0 ? _fragmentSelector$sel : {};\n      fragmentVariables = (_fragmentSelector$sel3 = (_fragmentSelector$sel4 = fragmentSelector.selectors[0]) === null || _fragmentSelector$sel4 === void 0 ? void 0 : _fragmentSelector$sel4.variables) !== null && _fragmentSelector$sel3 !== void 0 ? _fragmentSelector$sel3 : {};\n    } else {\n      parentVariables = fragmentSelector.owner.variables;\n      fragmentVariables = fragmentSelector.variables;\n    }\n    var refetchVariables = (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, parentVariables), fragmentVariables), providedRefetchVariables);\n    if (identifierInfo != null && !providedRefetchVariables.hasOwnProperty(identifierInfo.identifierQueryVariableName)) {\n      if (typeof identifierValue !== 'string') {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Expected result to have a string  ' + '`%s` in order to refetch, got `%s`.', identifierInfo.identifierField, identifierValue) : void 0;\n      }\n      refetchVariables[identifierInfo.identifierQueryVariableName] = identifierValue;\n    }\n    var refetchQuery = createOperationDescriptor(refetchableRequest, refetchVariables, {\n      force: true\n    });\n    loadQuery(refetchQuery.request.variables, {\n      fetchPolicy: fetchPolicy,\n      __environment: refetchEnvironment,\n      __nameForWarning: 'refetch'\n    });\n    dispatch({\n      type: 'refetch',\n      fetchPolicy: fetchPolicy,\n      onComplete: onComplete,\n      refetchEnvironment: refetchEnvironment,\n      refetchQuery: refetchQuery,\n      renderPolicy: renderPolicy\n    });\n    return {\n      dispose: disposeQuery\n    };\n  }, [fragmentIdentifier, dispatch, disposeQuery, identifierValue, loadQuery]);\n}\nvar debugFunctions;\nif (process.env.NODE_ENV !== \"production\") {\n  debugFunctions = {\n    getInitialIDAndType: function getInitialIDAndType(memoRefetchVariables, fragmentRefPathInResponse, identifierQueryVariableName, environment) {\n      var _require5 = require('relay-runtime'),\n        Record = _require5.Record;\n      var id = memoRefetchVariables === null || memoRefetchVariables === void 0 ? void 0 : memoRefetchVariables[identifierQueryVariableName !== null && identifierQueryVariableName !== void 0 ? identifierQueryVariableName : 'id'];\n      if (fragmentRefPathInResponse.length !== 1 || fragmentRefPathInResponse[0] !== 'node' || id == null) {\n        return null;\n      }\n      var recordSource = environment.getStore().getSource();\n      var record = recordSource.get(id);\n      var typename = record == null ? null : Record.getType(record);\n      if (typename == null) {\n        return null;\n      }\n      return {\n        id: id,\n        typename: typename\n      };\n    },\n    checkSameTypeAfterRefetch: function checkSameTypeAfterRefetch(previousIDAndType, environment, fragmentNode, componentDisplayName) {\n      var _require6 = require('relay-runtime'),\n        Record = _require6.Record;\n      if (!previousIDAndType) {\n        return;\n      }\n      var recordSource = environment.getStore().getSource();\n      var record = recordSource.get(previousIDAndType.id);\n      var typename = record && Record.getType(record);\n      if (typename !== previousIDAndType.typename) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Call to `refetch` returned data with a different ' + '__typename: was `%s`, now `%s`, on `%s` in `%s`. ' + 'Please make sure the server correctly implements' + 'unique id requirement.', previousIDAndType.typename, typename, fragmentNode.name, componentDisplayName) : void 0;\n      }\n    },\n    checkSameIDAfterRefetch: function checkSameIDAfterRefetch(previousIDAndTypename, refetchedFragmentRef, fragmentNode, componentDisplayName) {\n      if (previousIDAndTypename == null) {\n        return;\n      }\n      var _require7 = require('relay-runtime'),\n        ID_KEY = _require7.ID_KEY;\n      var resultID = refetchedFragmentRef[ID_KEY];\n      if (resultID != null && resultID !== previousIDAndTypename.id) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Call to `refetch` returned a different id, expected ' + '`%s`, got `%s`, on `%s` in `%s`. ' + 'Please make sure the server correctly implements ' + 'unique id requirement.', resultID, previousIDAndTypename.id, fragmentNode.name, componentDisplayName) : void 0;\n      }\n    }\n  };\n}\nmodule.exports = useRefetchableFragmentNode;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAA8C,CAAC,CAAC,SAAS,CAAC;AAC/F,IAAIC,cAAc,GAAGF,sBAAsB,CAACC,OAAO,CAAC,sCAAsC,CAAC,CAAC;AAC5F,IAAIE,QAAQ,GAAGF,OAAO,CAAC,oBAAoB,CAAC;EAC1CG,iCAAiC,GAAGD,QAAQ,CAACC,iCAAiC;AAChF,IAAIC,eAAe,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;AAClD,IAAIK,SAAS,GAAGL,OAAO,CAAC,iBAAiB,CAAC;EACxCM,8BAA8B,GAAGD,SAAS,CAACC,8BAA8B;AAC3E,IAAIC,eAAe,GAAGP,OAAO,CAAC,mBAAmB,CAAC;AAClD,IAAIQ,eAAe,GAAGR,OAAO,CAAC,mBAAmB,CAAC;AAClD,IAAIS,cAAc,GAAGT,OAAO,CAAC,kBAAkB,CAAC;AAChD,IAAIU,mBAAmB,GAAGV,OAAO,CAAC,uBAAuB,CAAC;AAC1D,IAAIW,SAAS,GAAGX,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIY,SAAS,GAAGZ,OAAO,CAAC,OAAO,CAAC;EAC9Ba,WAAW,GAAGD,SAAS,CAACC,WAAW;EACnCC,UAAU,GAAGF,SAAS,CAACE,UAAU;EACjCC,UAAU,GAAGH,SAAS,CAACG,UAAU;AACnC,IAAIC,SAAS,GAAGhB,OAAO,CAAC,eAAe,CAAC;EACtCiB,UAAU,GAAGD,SAAS,CAACE,UAAU,CAACD,UAAU;EAC5CE,yBAAyB,GAAGH,SAAS,CAACG,yBAAyB;EAC/DC,qBAAqB,GAAGJ,SAAS,CAACI,qBAAqB;EACvDC,kBAAkB,GAAGL,SAAS,CAACK,kBAAkB;EACjDC,WAAW,GAAGN,SAAS,CAACM,WAAW;EACnCC,cAAc,GAAGP,SAAS,CAACO,cAAc;AAC3C,IAAIC,OAAO,GAAGxB,OAAO,CAAC,kBAAkB,CAAC;AACzC,SAASyB,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC9B,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,SAAS;MACZ;QACE,IAAIC,qBAAqB;QACzB,OAAO,CAAC,CAAC,EAAE5B,cAAc,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,EAAEA,cAAc,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,EAAEyB,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE;UACnFI,WAAW,EAAEH,MAAM,CAACG,WAAW;UAC/BC,mBAAmB,EAAE,CAACF,qBAAqB,GAAGF,MAAM,CAACK,kBAAkB,MAAM,IAAI,IAAIH,qBAAqB,KAAK,KAAK,CAAC,GAAGA,qBAAqB,GAAGH,KAAK,CAACK,mBAAmB;UACzKE,UAAU,EAAEN,MAAM,CAACM,UAAU;UAC7BD,kBAAkB,EAAEL,MAAM,CAACK,kBAAkB;UAC7CE,YAAY,EAAEP,MAAM,CAACO,YAAY;UACjCC,YAAY,EAAER,MAAM,CAACQ;QACvB,CAAC,CAAC;MACJ;IACF,KAAK,OAAO;MACV;QACE,OAAO;UACLL,WAAW,EAAEM,SAAS;UACtBL,mBAAmB,EAAEJ,MAAM,CAACU,WAAW;UACvCC,0BAA0B,EAAEX,MAAM,CAACY,kBAAkB;UACrDN,UAAU,EAAEG,SAAS;UACrBF,YAAY,EAAE,IAAI;UAClBC,YAAY,EAAEC;QAChB,CAAC;MACH;IACF;MACE;QACET,MAAM,CAACC,IAAI;QACX,MAAM,IAAIY,KAAK,CAAC,oDAAoD,CAAC;MACvE;EACJ;AACF;AACA,SAASC,0BAA0BA,CAACC,YAAY,EAAEC,iBAAiB,EAAEC,oBAAoB,EAAE;EACzF,IAAIC,iBAAiB,GAAGnC,mBAAmB,CAAC,CAAC;EAC7C,IAAIoC,mBAAmB,GAAGzB,kBAAkB,CAACqB,YAAY,EAAEE,oBAAoB,CAAC;IAC9EG,kBAAkB,GAAGD,mBAAmB,CAACC,kBAAkB;IAC3DC,yBAAyB,GAAGF,mBAAmB,CAACE,yBAAyB;EAC3E,IAAIT,kBAAkB,GAAGnB,qBAAqB,CAACsB,YAAY,EAAEC,iBAAiB,CAAC;EAC/E,IAAIM,WAAW,GAAGlC,UAAU,CAACU,OAAO,EAAE;MAClCK,WAAW,EAAEM,SAAS;MACtBL,mBAAmB,EAAEc,iBAAiB;MACtCP,0BAA0B,EAAEC,kBAAkB;MAC9CN,UAAU,EAAEG,SAAS;MACrBJ,kBAAkB,EAAE,IAAI;MACxBE,YAAY,EAAE,IAAI;MAClBC,YAAY,EAAEC;IAChB,CAAC,CAAC;IACFc,YAAY,GAAGD,WAAW,CAAC,CAAC,CAAC;IAC7BE,QAAQ,GAAGF,WAAW,CAAC,CAAC,CAAC;EAC3B,IAAInB,WAAW,GAAGoB,YAAY,CAACpB,WAAW;IACxCC,mBAAmB,GAAGmB,YAAY,CAACnB,mBAAmB;IACtDO,0BAA0B,GAAGY,YAAY,CAACZ,0BAA0B;IACpEL,UAAU,GAAGiB,YAAY,CAACjB,UAAU;IACpCD,kBAAkB,GAAGkB,YAAY,CAAClB,kBAAkB;IACpDE,YAAY,GAAGgB,YAAY,CAAChB,YAAY;IACxCC,YAAY,GAAGe,YAAY,CAACf,YAAY;EAC1C,IAAIE,WAAW,GAAGL,kBAAkB,KAAK,IAAI,IAAIA,kBAAkB,KAAK,KAAK,CAAC,GAAGA,kBAAkB,GAAGa,iBAAiB;EACvH,IAAIO,aAAa,GAAG9C,8BAA8B,CAAC+B,WAAW,CAAC;EAC/D,IAAIgB,gBAAgB,GAAGlD,iCAAiC,CAACkC,WAAW,CAAC;EACrE,IAAIiB,eAAe,GAAGxC,UAAU,CAACV,eAAe,CAAC;EACjD,IAAImD,WAAW,GAAGlB,WAAW,KAAKN,mBAAmB,IAAIQ,kBAAkB,KAAKD,0BAA0B;EAC1G,IAAIkB,eAAe,GAAG/C,cAAc,CAACsC,kBAAkB,CAAC;IACtDU,QAAQ,GAAGD,eAAe,CAAC,CAAC,CAAC;IAC7BE,SAAS,GAAGF,eAAe,CAAC,CAAC,CAAC;IAC9BG,YAAY,GAAGH,eAAe,CAAC,CAAC,CAAC;EACnC,IAAII,WAAW,GAAGjB,iBAAiB;EACnC,IAAIkB,oBAAoB,GAAGxC,kBAAkB,CAACqB,YAAY,EAAEE,oBAAoB,CAAC;IAC/EkB,cAAc,GAAGD,oBAAoB,CAACC,cAAc;EACtD,IAAIP,WAAW,EAAE;IACfJ,QAAQ,CAAC;MACPvB,IAAI,EAAE,OAAO;MACbS,WAAW,EAAEA,WAAW;MACxBE,kBAAkB,EAAEA;IACtB,CAAC,CAAC;IACFoB,YAAY,CAAC,CAAC;EAChB,CAAC,MAAM,IAAIzB,YAAY,IAAI,IAAI,IAAIuB,QAAQ,IAAI,IAAI,EAAE;IACnD,IAAIM,0BAA0B;IAC9B,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzCH,0BAA0B,GAAGI,cAAc,CAACC,mBAAmB,CAAClC,YAAY,CAACmC,OAAO,CAACC,SAAS,EAAEtB,yBAAyB,EAAEc,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACS,2BAA2B,EAAElC,WAAW,CAAC;IACrP;IACA,IAAImC,oBAAoB,GAAG,SAASA,oBAAoBA,CAACC,UAAU,EAAE;MACnExC,UAAU,IAAIA,UAAU,CAACwC,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAGA,UAAU,GAAG,IAAI,CAAC;IAC5F,CAAC;IACD,IAAIC,eAAe,GAAGjB,QAAQ,CAACkB,MAAM,IAAI,IAAI,GAAGlB,QAAQ,CAACkB,MAAM,GAAG1D,UAAU,CAACoB,WAAW,EAAEH,YAAY,CAAC;IACvG,IAAI0C,WAAW,GAAGtB,eAAe,CAACuB,wBAAwB,CAAC,YAAY;MACrE,OAAOzB,aAAa,CAAC0B,OAAO,CAAC5C,YAAY,EAAEwC,eAAe,EAAE5C,WAAW,EAAEK,YAAY,EAAE;QACrF4C,KAAK,EAAEP,oBAAoB;QAC3BQ,QAAQ,EAAE,SAASA,QAAQA,CAAA,EAAG;UAC5B,IAAIhB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;YACzCC,cAAc,CAACc,yBAAyB,CAAClB,0BAA0B,EAAE1B,WAAW,EAAEK,YAAY,EAAEE,oBAAoB,CAAC;UACvH;UACA4B,oBAAoB,CAAC,CAAC;QACxB;MACF,CAAC,EAAEf,QAAQ,CAACyB,QAAQ,EAAE5B,eAAe,CAAC;IACxC,CAAC,CAAC;IACF,IAAI6B,SAAS,GAAG9B,gBAAgB,CAAC+B,IAAI,CAACR,WAAW,CAAClC,YAAY,EAAEkC,WAAW,CAAChB,WAAW,EAAEhB,oBAAoB,CAAC,CAACyC,IAAI;IACnH,EAAEF,SAAS,IAAI,IAAI,CAAC,GAAGnB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGvD,SAAS,CAAC,KAAK,EAAE,6DAA6D,GAAG,uDAAuD,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;IACpO,IAAI2E,oBAAoB,GAAG/D,cAAc,CAAC4D,SAAS,EAAEnC,yBAAyB,CAAC;IAC/EY,WAAW,GAAG0B,oBAAoB;IAClC,IAAItB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzCC,cAAc,CAACoB,uBAAuB,CAACxB,0BAA0B,EAAEH,WAAW,EAAElB,YAAY,EAAEE,oBAAoB,CAAC;IACrH;EACF;EACA,IAAI4C,gBAAgB,GAAGjF,eAAe,CAACmC,YAAY,EAAEkB,WAAW,EAAEhB,oBAAoB,CAAC;IACrF6C,YAAY,GAAGD,gBAAgB,CAACH,IAAI;IACpCK,mBAAmB,GAAGF,gBAAgB,CAACE,mBAAmB;IAC1DC,kBAAkB,GAAGH,gBAAgB,CAACG,kBAAkB;EAC1D,IAAIC,OAAO,GAAGC,kBAAkB,CAACjD,oBAAoB,EAAEO,QAAQ,EAAEQ,YAAY,EAAE8B,YAAY,EAAElD,kBAAkB,EAAEG,YAAY,EAAEM,yBAAyB,EAAEc,cAAc,EAAEJ,SAAS,EAAEf,iBAAiB,EAAEI,kBAAkB,CAAC;EAC3N,OAAO;IACL0C,YAAY,EAAEA,YAAY;IAC1B7B,WAAW,EAAEA,WAAW;IACxBgC,OAAO,EAAEA,OAAO;IAChBF,mBAAmB,EAAEA,mBAAmB;IACxCC,kBAAkB,EAAEA;EACtB,CAAC;AACH;AACA,SAASE,kBAAkBA,CAACjD,oBAAoB,EAAEO,QAAQ,EAAEQ,YAAY,EAAE8B,YAAY,EAAElD,kBAAkB,EAAEG,YAAY,EAAEM,yBAAyB,EAAEc,cAAc,EAAEJ,SAAS,EAAEf,iBAAiB,EAAEI,kBAAkB,EAAE;EACrN,IAAI+C,YAAY,GAAGtF,eAAe,CAAC,CAAC;EACpC,IAAIuF,eAAe,GAAG,CAACjC,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACkC,eAAe,KAAK,IAAI,IAAIP,YAAY,IAAI,IAAI,IAAI,OAAOA,YAAY,KAAK,QAAQ,GAAGA,YAAY,CAAC3B,cAAc,CAACkC,eAAe,CAAC,GAAG,IAAI;EAChP,OAAOnF,WAAW,CAAC,UAAUoF,wBAAwB,EAAEC,OAAO,EAAE;IAC9D,IAAIJ,YAAY,CAACK,OAAO,KAAK,IAAI,EAAE;MACjCnC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG1C,OAAO,CAAC,KAAK,EAAE,0EAA0E,GAAG,mEAAmE,GAAG,yDAAyD,GAAG,oDAAoD,GAAG,4CAA4C,EAAEkB,YAAY,CAAC0D,IAAI,EAAExD,oBAAoB,CAAC,GAAG,KAAK,CAAC;MAC5Z,OAAO;QACLyD,OAAO,EAAE,SAASA,OAAOA,CAAA,EAAG,CAAC;MAC/B,CAAC;IACH;IACA,IAAI1D,iBAAiB,IAAI,IAAI,EAAE;MAC7BqB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG1C,OAAO,CAAC,KAAK,EAAE,sEAAsE,GAAG,+DAA+D,GAAG,gEAAgE,GAAG,sDAAsD,GAAG,uEAAuE,EAAEkB,YAAY,CAAC0D,IAAI,EAAExD,oBAAoB,EAAEA,oBAAoB,CAAC,GAAG,KAAK,CAAC;IAChd;IACA,IAAIZ,kBAAkB,GAAGkE,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACI,aAAa;IAChG,IAAIxE,WAAW,GAAGoE,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACpE,WAAW;IACvF,IAAIK,YAAY,GAAG+D,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACK,qBAAqB;IAClG,IAAItE,UAAU,GAAGiE,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACjE,UAAU;IACrF,IAAIuE,gBAAgB,GAAGlF,WAAW,CAACoB,YAAY,EAAEC,iBAAiB,CAAC;IACnE,IAAI8D,eAAe;IACnB,IAAIC,iBAAiB;IACrB,IAAIF,gBAAgB,IAAI,IAAI,EAAE;MAC5BC,eAAe,GAAG,CAAC,CAAC;MACpBC,iBAAiB,GAAG,CAAC,CAAC;IACxB,CAAC,MAAM,IAAIF,gBAAgB,CAACG,IAAI,KAAK,sBAAsB,EAAE;MAC3D,IAAIC,qBAAqB,EAAEC,sBAAsB,EAAEC,sBAAsB,EAAEC,sBAAsB;MACjGN,eAAe,GAAG,CAACG,qBAAqB,GAAG,CAACC,sBAAsB,GAAGL,gBAAgB,CAACQ,SAAS,CAAC,CAAC,CAAC,MAAM,IAAI,IAAIH,sBAAsB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACI,KAAK,CAAC3C,SAAS,MAAM,IAAI,IAAIsC,qBAAqB,KAAK,KAAK,CAAC,GAAGA,qBAAqB,GAAG,CAAC,CAAC;MAC9QF,iBAAiB,GAAG,CAACI,sBAAsB,GAAG,CAACC,sBAAsB,GAAGP,gBAAgB,CAACQ,SAAS,CAAC,CAAC,CAAC,MAAM,IAAI,IAAID,sBAAsB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACzC,SAAS,MAAM,IAAI,IAAIwC,sBAAsB,KAAK,KAAK,CAAC,GAAGA,sBAAsB,GAAG,CAAC,CAAC;IAC/Q,CAAC,MAAM;MACLL,eAAe,GAAGD,gBAAgB,CAACS,KAAK,CAAC3C,SAAS;MAClDoC,iBAAiB,GAAGF,gBAAgB,CAAClC,SAAS;IAChD;IACA,IAAI4C,gBAAgB,GAAG,CAAC,CAAC,EAAEjH,cAAc,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,EAAEA,cAAc,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,EAAEA,cAAc,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,EAAEwG,eAAe,CAAC,EAAEC,iBAAiB,CAAC,EAAET,wBAAwB,CAAC;IACvL,IAAInC,cAAc,IAAI,IAAI,IAAI,CAACmC,wBAAwB,CAACkB,cAAc,CAACrD,cAAc,CAACS,2BAA2B,CAAC,EAAE;MAClH,IAAI,OAAOwB,eAAe,KAAK,QAAQ,EAAE;QACvC/B,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG1C,OAAO,CAAC,KAAK,EAAE,2CAA2C,GAAG,qCAAqC,EAAEsC,cAAc,CAACkC,eAAe,EAAED,eAAe,CAAC,GAAG,KAAK,CAAC;MACvM;MACAmB,gBAAgB,CAACpD,cAAc,CAACS,2BAA2B,CAAC,GAAGwB,eAAe;IAChF;IACA,IAAI7D,YAAY,GAAGf,yBAAyB,CAAC4B,kBAAkB,EAAEmE,gBAAgB,EAAE;MACjFE,KAAK,EAAE;IACT,CAAC,CAAC;IACF1D,SAAS,CAACxB,YAAY,CAACmC,OAAO,CAACC,SAAS,EAAE;MACxCxC,WAAW,EAAEA,WAAW;MACxBwE,aAAa,EAAEtE,kBAAkB;MACjCqF,gBAAgB,EAAE;IACpB,CAAC,CAAC;IACFlE,QAAQ,CAAC;MACPvB,IAAI,EAAE,SAAS;MACfE,WAAW,EAAEA,WAAW;MACxBG,UAAU,EAAEA,UAAU;MACtBD,kBAAkB,EAAEA,kBAAkB;MACtCE,YAAY,EAAEA,YAAY;MAC1BC,YAAY,EAAEA;IAChB,CAAC,CAAC;IACF,OAAO;MACLkE,OAAO,EAAE1C;IACX,CAAC;EACH,CAAC,EAAE,CAACpB,kBAAkB,EAAEY,QAAQ,EAAEQ,YAAY,EAAEoC,eAAe,EAAErC,SAAS,CAAC,CAAC;AAC9E;AACA,IAAIS,cAAc;AAClB,IAAIH,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzCC,cAAc,GAAG;IACfC,mBAAmB,EAAE,SAASA,mBAAmBA,CAACkD,oBAAoB,EAAEtE,yBAAyB,EAAEuB,2BAA2B,EAAElC,WAAW,EAAE;MAC3I,IAAIkF,SAAS,GAAGvH,OAAO,CAAC,eAAe,CAAC;QACtCwH,MAAM,GAAGD,SAAS,CAACC,MAAM;MAC3B,IAAIC,EAAE,GAAGH,oBAAoB,KAAK,IAAI,IAAIA,oBAAoB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,oBAAoB,CAAC/C,2BAA2B,KAAK,IAAI,IAAIA,2BAA2B,KAAK,KAAK,CAAC,GAAGA,2BAA2B,GAAG,IAAI,CAAC;MAC9N,IAAIvB,yBAAyB,CAAC0E,MAAM,KAAK,CAAC,IAAI1E,yBAAyB,CAAC,CAAC,CAAC,KAAK,MAAM,IAAIyE,EAAE,IAAI,IAAI,EAAE;QACnG,OAAO,IAAI;MACb;MACA,IAAIE,YAAY,GAAGtF,WAAW,CAACuF,QAAQ,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC;MACrD,IAAIC,MAAM,GAAGH,YAAY,CAACI,GAAG,CAACN,EAAE,CAAC;MACjC,IAAIO,QAAQ,GAAGF,MAAM,IAAI,IAAI,GAAG,IAAI,GAAGN,MAAM,CAACS,OAAO,CAACH,MAAM,CAAC;MAC7D,IAAIE,QAAQ,IAAI,IAAI,EAAE;QACpB,OAAO,IAAI;MACb;MACA,OAAO;QACLP,EAAE,EAAEA,EAAE;QACNO,QAAQ,EAAEA;MACZ,CAAC;IACH,CAAC;IACD/C,yBAAyB,EAAE,SAASA,yBAAyBA,CAACiD,iBAAiB,EAAE7F,WAAW,EAAEK,YAAY,EAAEE,oBAAoB,EAAE;MAChI,IAAIuF,SAAS,GAAGnI,OAAO,CAAC,eAAe,CAAC;QACtCwH,MAAM,GAAGW,SAAS,CAACX,MAAM;MAC3B,IAAI,CAACU,iBAAiB,EAAE;QACtB;MACF;MACA,IAAIP,YAAY,GAAGtF,WAAW,CAACuF,QAAQ,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC;MACrD,IAAIC,MAAM,GAAGH,YAAY,CAACI,GAAG,CAACG,iBAAiB,CAACT,EAAE,CAAC;MACnD,IAAIO,QAAQ,GAAGF,MAAM,IAAIN,MAAM,CAACS,OAAO,CAACH,MAAM,CAAC;MAC/C,IAAIE,QAAQ,KAAKE,iBAAiB,CAACF,QAAQ,EAAE;QAC3ChE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG1C,OAAO,CAAC,KAAK,EAAE,0DAA0D,GAAG,mDAAmD,GAAG,kDAAkD,GAAG,wBAAwB,EAAE0G,iBAAiB,CAACF,QAAQ,EAAEA,QAAQ,EAAEtF,YAAY,CAAC0D,IAAI,EAAExD,oBAAoB,CAAC,GAAG,KAAK,CAAC;MAClV;IACF,CAAC;IACD2C,uBAAuB,EAAE,SAASA,uBAAuBA,CAAC6C,qBAAqB,EAAE9C,oBAAoB,EAAE5C,YAAY,EAAEE,oBAAoB,EAAE;MACzI,IAAIwF,qBAAqB,IAAI,IAAI,EAAE;QACjC;MACF;MACA,IAAIC,SAAS,GAAGrI,OAAO,CAAC,eAAe,CAAC;QACtCsI,MAAM,GAAGD,SAAS,CAACC,MAAM;MAC3B,IAAIC,QAAQ,GAAGjD,oBAAoB,CAACgD,MAAM,CAAC;MAC3C,IAAIC,QAAQ,IAAI,IAAI,IAAIA,QAAQ,KAAKH,qBAAqB,CAACX,EAAE,EAAE;QAC7DzD,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG1C,OAAO,CAAC,KAAK,EAAE,6DAA6D,GAAG,mCAAmC,GAAG,mDAAmD,GAAG,wBAAwB,EAAE+G,QAAQ,EAAEH,qBAAqB,CAACX,EAAE,EAAE/E,YAAY,CAAC0D,IAAI,EAAExD,oBAAoB,CAAC,GAAG,KAAK,CAAC;MACpU;IACF;EACF,CAAC;AACH;AACA4F,MAAM,CAACC,OAAO,GAAGhG,0BAA0B"},"metadata":{},"sourceType":"script","externalDependencies":[]}