{"ast":null,"code":"'use strict';\n\nvar _require = require('./loadQuery'),\n  useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\nvar useLazyLoadQueryNode = require('./useLazyLoadQueryNode');\nvar useMemoOperationDescriptor = require('./useMemoOperationDescriptor');\nvar useRelayEnvironment = require('./useRelayEnvironment');\nvar invariant = require('invariant');\nvar _require2 = require('react'),\n  useDebugValue = _require2.useDebugValue;\nvar _require3 = require('relay-runtime'),\n  _require3$__internal = _require3.__internal,\n  fetchQueryDeduped = _require3$__internal.fetchQueryDeduped,\n  fetchQuery = _require3$__internal.fetchQuery;\nvar warning = require(\"fbjs/lib/warning\");\nfunction usePreloadedQuery(gqlQuery, preloadedQuery, options) {\n  useTrackLoadQueryInRender();\n  var environment = useRelayEnvironment();\n  var fetchKey = preloadedQuery.fetchKey,\n    fetchPolicy = preloadedQuery.fetchPolicy,\n    source = preloadedQuery.source,\n    variables = preloadedQuery.variables,\n    networkCacheConfig = preloadedQuery.networkCacheConfig;\n  var operation = useMemoOperationDescriptor(gqlQuery, variables, networkCacheConfig);\n  var useLazyLoadQueryNodeParams;\n  if (preloadedQuery.kind === 'PreloadedQuery_DEPRECATED') {\n    !(operation.request.node.params.name === preloadedQuery.name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'usePreloadedQuery(): Expected data to be prefetched for query `%s`, ' + 'got prefetch results for query `%s`.', operation.request.node.params.name, preloadedQuery.name) : invariant(false) : void 0;\n    useLazyLoadQueryNodeParams = {\n      componentDisplayName: 'usePreloadedQuery()',\n      fetchKey: fetchKey,\n      fetchObservable: fetchQueryDeduped(environment, operation.request.identifier, function () {\n        if (environment === preloadedQuery.environment && source != null) {\n          return environment.executeWithSource({\n            operation: operation,\n            source: source\n          });\n        } else {\n          return environment.execute({\n            operation: operation\n          });\n        }\n      }),\n      fetchPolicy: fetchPolicy,\n      query: operation,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    };\n  } else {\n    process.env.NODE_ENV !== \"production\" ? warning(preloadedQuery.isDisposed === false, 'usePreloadedQuery(): Expected preloadedQuery to not be disposed yet. ' + 'This is because disposing the query marks it for future garbage ' + 'collection, and as such query results may no longer be present in the Relay ' + 'store. In the future, this will become a hard error.') : void 0;\n    var fallbackFetchObservable = fetchQuery(environment, operation);\n    var fetchObservable;\n    if (source != null && environment === preloadedQuery.environment) {\n      fetchObservable = source.ifEmpty(fallbackFetchObservable);\n    } else if (environment !== preloadedQuery.environment) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'usePreloadedQuery(): usePreloadedQuery was passed a preloaded query ' + 'that was created with a different environment than the one that is currently ' + 'in context. In the future, this will become a hard error.') : void 0;\n      fetchObservable = fallbackFetchObservable;\n    } else {\n      fetchObservable = fallbackFetchObservable;\n    }\n    useLazyLoadQueryNodeParams = {\n      componentDisplayName: 'usePreloadedQuery()',\n      fetchObservable: fetchObservable,\n      fetchKey: fetchKey,\n      fetchPolicy: fetchPolicy,\n      query: operation,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    };\n  }\n  var data = useLazyLoadQueryNode(useLazyLoadQueryNodeParams);\n  if (process.env.NODE_ENV !== \"production\") {\n    useDebugValue({\n      query: preloadedQuery.name,\n      variables: preloadedQuery.variables,\n      data: data,\n      fetchKey: fetchKey,\n      fetchPolicy: fetchPolicy,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    });\n  }\n  return data;\n}\nmodule.exports = usePreloadedQuery;","map":{"version":3,"names":["_require","require","useTrackLoadQueryInRender","useLazyLoadQueryNode","useMemoOperationDescriptor","useRelayEnvironment","invariant","_require2","useDebugValue","_require3","_require3$__internal","__internal","fetchQueryDeduped","fetchQuery","warning","usePreloadedQuery","gqlQuery","preloadedQuery","options","environment","fetchKey","fetchPolicy","source","variables","networkCacheConfig","operation","useLazyLoadQueryNodeParams","kind","request","node","params","name","process","env","NODE_ENV","componentDisplayName","fetchObservable","identifier","executeWithSource","execute","query","renderPolicy","UNSTABLE_renderPolicy","isDisposed","fallbackFetchObservable","ifEmpty","data","module","exports"],"sources":["/Users/joaoluismoraes/Desktop/woovi-challenge/web/node_modules/react-relay/lib/relay-hooks/usePreloadedQuery.js"],"sourcesContent":["'use strict';\n\nvar _require = require('./loadQuery'),\n  useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\nvar useLazyLoadQueryNode = require('./useLazyLoadQueryNode');\nvar useMemoOperationDescriptor = require('./useMemoOperationDescriptor');\nvar useRelayEnvironment = require('./useRelayEnvironment');\nvar invariant = require('invariant');\nvar _require2 = require('react'),\n  useDebugValue = _require2.useDebugValue;\nvar _require3 = require('relay-runtime'),\n  _require3$__internal = _require3.__internal,\n  fetchQueryDeduped = _require3$__internal.fetchQueryDeduped,\n  fetchQuery = _require3$__internal.fetchQuery;\nvar warning = require(\"fbjs/lib/warning\");\nfunction usePreloadedQuery(gqlQuery, preloadedQuery, options) {\n  useTrackLoadQueryInRender();\n  var environment = useRelayEnvironment();\n  var fetchKey = preloadedQuery.fetchKey,\n    fetchPolicy = preloadedQuery.fetchPolicy,\n    source = preloadedQuery.source,\n    variables = preloadedQuery.variables,\n    networkCacheConfig = preloadedQuery.networkCacheConfig;\n  var operation = useMemoOperationDescriptor(gqlQuery, variables, networkCacheConfig);\n  var useLazyLoadQueryNodeParams;\n  if (preloadedQuery.kind === 'PreloadedQuery_DEPRECATED') {\n    !(operation.request.node.params.name === preloadedQuery.name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'usePreloadedQuery(): Expected data to be prefetched for query `%s`, ' + 'got prefetch results for query `%s`.', operation.request.node.params.name, preloadedQuery.name) : invariant(false) : void 0;\n    useLazyLoadQueryNodeParams = {\n      componentDisplayName: 'usePreloadedQuery()',\n      fetchKey: fetchKey,\n      fetchObservable: fetchQueryDeduped(environment, operation.request.identifier, function () {\n        if (environment === preloadedQuery.environment && source != null) {\n          return environment.executeWithSource({\n            operation: operation,\n            source: source\n          });\n        } else {\n          return environment.execute({\n            operation: operation\n          });\n        }\n      }),\n      fetchPolicy: fetchPolicy,\n      query: operation,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    };\n  } else {\n    process.env.NODE_ENV !== \"production\" ? warning(preloadedQuery.isDisposed === false, 'usePreloadedQuery(): Expected preloadedQuery to not be disposed yet. ' + 'This is because disposing the query marks it for future garbage ' + 'collection, and as such query results may no longer be present in the Relay ' + 'store. In the future, this will become a hard error.') : void 0;\n    var fallbackFetchObservable = fetchQuery(environment, operation);\n    var fetchObservable;\n    if (source != null && environment === preloadedQuery.environment) {\n      fetchObservable = source.ifEmpty(fallbackFetchObservable);\n    } else if (environment !== preloadedQuery.environment) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'usePreloadedQuery(): usePreloadedQuery was passed a preloaded query ' + 'that was created with a different environment than the one that is currently ' + 'in context. In the future, this will become a hard error.') : void 0;\n      fetchObservable = fallbackFetchObservable;\n    } else {\n      fetchObservable = fallbackFetchObservable;\n    }\n    useLazyLoadQueryNodeParams = {\n      componentDisplayName: 'usePreloadedQuery()',\n      fetchObservable: fetchObservable,\n      fetchKey: fetchKey,\n      fetchPolicy: fetchPolicy,\n      query: operation,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    };\n  }\n  var data = useLazyLoadQueryNode(useLazyLoadQueryNodeParams);\n  if (process.env.NODE_ENV !== \"production\") {\n    useDebugValue({\n      query: preloadedQuery.name,\n      variables: preloadedQuery.variables,\n      data: data,\n      fetchKey: fetchKey,\n      fetchPolicy: fetchPolicy,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    });\n  }\n  return data;\n}\nmodule.exports = usePreloadedQuery;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}